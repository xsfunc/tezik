/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/v1/accounts': {
    /** Returns a list of accounts. */
    get: operations['Accounts_Get']
  }
  '/v1/accounts/count': {
    /** Returns a number of accounts. */
    get: operations['Accounts_GetCount']
  }
  '/v1/accounts/{address}': {
    /** Returns an account with the specified address. */
    get: operations['Accounts_GetByAddress']
  }
  '/v1/accounts/{address}/contracts': {
    /** Returns a list of contracts created by (or related to) the specified account. */
    get: operations['Accounts_GetContracts']
  }
  '/v1/accounts/{address}/delegators': {
    /** Returns a list of accounts delegated to the specified account. */
    get: operations['Accounts_GetDelegators']
  }
  '/v1/accounts/{address}/operations': {
    /**
     * Returns a list of operations related to the specified account.
     * Note: for better flexibility this endpoint accumulates query parameters (filters) of each `/operations/{type}` endpoint,
     * so a particular filter may affect several operation types containing this filter.
     * For example, if you specify an `initiator` it will affect all transactions, delegations and originations,
     * because all these types have an `initiator` field.
     */
    get: operations['Accounts_GetOperations']
  }
  '/v1/accounts/{address}/metadata': {
    /** Returns metadata of the specified account (alias, logo, website, contacts, etc). */
    get: operations['Accounts_GetMetadata']
  }
  '/v1/accounts/{address}/counter': {
    /** Returns account counter */
    get: operations['Accounts_GetCounter']
  }
  '/v1/accounts/{address}/balance': {
    /** Returns account balance */
    get: operations['Accounts_GetBalance']
  }
  '/v1/accounts/{address}/balance_history/{level}': {
    /** Returns account balance at the specified block */
    get: operations['Accounts_GetBalanceAtLevel']
  }
  '/v1/accounts/{address}/balance_history/{datetime}': {
    /** Returns account balance at the specified datetime */
    get: operations['Accounts_GetBalanceAtDate']
  }
  '/v1/accounts/{address}/balance_history': {
    /** Returns time series with historical balances (only changes, without duplicates). */
    get: operations['Accounts_GetBalanceHistory']
  }
  '/v1/accounts/{address}/report': {
    /** Exports account balance report in .csv format */
    get: operations['Accounts_GetBalanceReport']
  }
  '/v1/bigmaps/count': {
    /** Returns the total number of bigmaps. */
    get: operations['BigMaps_GetBigMapsCount']
  }
  '/v1/bigmaps': {
    /** Returns a list of bigmaps. */
    get: operations['BigMaps_GetBigMaps']
  }
  '/v1/bigmaps/updates': {
    /** Returns a list of all bigmap updates. */
    get: operations['BigMaps_GetBigMapUpdates']
  }
  '/v1/bigmaps/{id}': {
    /** Returns a bigmap with the specified Id. */
    get: operations['BigMaps_GetBigMapById']
  }
  '/v1/bigmaps/{id}/type': {
    /** Returns a type of the bigmap with the specified Id in Micheline format (with annotations). */
    get: operations['BigMaps_GetBigMapType']
  }
  '/v1/bigmaps/{id}/keys': {
    /** Returns a list of bigmap keys. */
    get: operations['BigMaps_GetKeys']
  }
  '/v1/bigmaps/{id}/keys/{key}': {
    /** Returns the specified bigmap key. */
    get: operations['BigMaps_GetKey']
  }
  '/v1/bigmaps/{id}/keys/{key}/updates': {
    /** Returns updates history for the specified bigmap key. */
    get: operations['BigMaps_GetKeyUpdates']
  }
  '/v1/bigmaps/{id}/historical_keys/{level}': {
    /** Returns a list of bigmap keys at the specific block. */
    get: operations['BigMaps_GetHistoricalKeys']
  }
  '/v1/bigmaps/{id}/historical_keys/{level}/{key}': {
    /** Returns the specified bigmap key at the specific block. */
    get: operations['BigMaps_GetKey2']
  }
  '/v1/blocks/count': {
    /** Returns the total number of blocks. */
    get: operations['Blocks_GetCount']
  }
  '/v1/blocks': {
    /** Returns a list of blocks. */
    get: operations['Blocks_Get']
  }
  '/v1/blocks/{hash}': {
    /** Returns a block with the specified hash. */
    get: operations['Blocks_GetByHash']
  }
  '/v1/blocks/{level}': {
    /** Returns a block at the specified level. */
    get: operations['Blocks_GetByLevel']
  }
  '/v1/commitments/{address}': {
    /** Returns a commitment with the specified blinded address. */
    get: operations['Commitments_Get']
  }
  '/v1/commitments': {
    /** Returns a list of commitments. */
    get: operations['Commitments_GetAll']
  }
  '/v1/commitments/count': {
    /** Returns a number of commitments. */
    get: operations['Commitments_GetCount']
  }
  '/v1/constants': {
    /** Returns a list of global constants. */
    get: operations['Constants_Get']
  }
  '/v1/constants/{address}': {
    /** Returns global constant with specified address (expression hash). */
    get: operations['Constants_GetByAddress']
  }
  '/v1/constants/count': {
    /** Returns a number of global constants. */
    get: operations['Constants_GetCount']
  }
  '/v1/contracts': {
    /** Returns a list of contract accounts. */
    get: operations['Contracts_Get']
  }
  '/v1/contracts/count': {
    /** Returns a number of contract accounts. */
    get: operations['Contracts_GetCount']
  }
  '/v1/contracts/{address}': {
    /** Returns a contract account with the specified address. */
    get: operations['Contracts_GetByAddress']
  }
  '/v1/contracts/{address}/same': {
    /**
     * Returns contracts which have the same script as the specified one.
     * Note, contract scripts are compared by 32-bit hash, so in very rare cases there may be collisions.
     */
    get: operations['Contracts_GetSame']
  }
  '/v1/contracts/{address}/similar': {
    /**
     * Returns contracts which have the same interface (parameter and storage types) as the specified one.
     * Note, contract parameter and storage types are compared by 32-bit hash, so in very rare cases there may be collisions.
     */
    get: operations['Contracts_GetSimilar']
  }
  '/v1/contracts/{address}/code': {
    /** Returns a code of the specified contract. */
    get: operations['Contracts_GetCode']
  }
  '/v1/contracts/{address}/interface': {
    /** Returns standard JSON Schema for contract storage, entrypoints, and Big_map entries. */
    get: operations['Contracts_GetInterface']
  }
  '/v1/contracts/{address}/entrypoints': {
    /** Returns entrypoints of the specified contract. */
    get: operations['Contracts_GetEntrypoints']
  }
  '/v1/contracts/{address}/entrypoints/{name}': {
    /** Returns contract's entrypoint with specified name. */
    get: operations['Contracts_GetEntrypointByName']
  }
  '/v1/contracts/{address}/views': {
    /** Returns all views of the specified contract. */
    get: operations['Contracts_GetContractViews']
  }
  '/v1/contracts/{address}/views/{name}': {
    /** Returns contract view with specified name. */
    get: operations['Contracts_GetContractViewByName']
  }
  '/v1/contracts/{address}/entrypoints/{name}/build': {
    /** Returns micheline parameters converted from its JSON representation. */
    get: operations['Contracts_BuildEntrypointParametersGET']
    /** Returns micheline parameters converted from its JSON representation. */
    post: operations['Contracts_BuildEntrypointParametersPOST']
  }
  '/v1/contracts/{address}/storage': {
    /** Returns contract storage value in JSON format. */
    get: operations['Contracts_GetStorage']
  }
  '/v1/contracts/{address}/storage/schema': {
    /** Returns JSON schema of the contract storage. */
    get: operations['Contracts_GetStorageSchema']
  }
  '/v1/contracts/{address}/storage/history': {
    /** Returns contract storage historical values. */
    get: operations['Contracts_GetStorageHistory']
  }
  '/v1/contracts/{address}/storage/raw': {
    /** Returns raw contract storage value in micheline format. */
    get: operations['Contracts_GetRawStorage']
  }
  '/v1/contracts/{address}/storage/raw/schema': {
    /** Returns micheline schema (type) of the contract storage. */
    get: operations['Contracts_GetRawStorageSchema']
  }
  '/v1/contracts/{address}/storage/raw/history': {
    /** Returns raw contract storage historical values. */
    get: operations['Contracts_GetRawStorageHistory']
  }
  '/v1/contracts/{address}/bigmaps': {
    /** Returns all active bigmaps allocated in the contract storage. */
    get: operations['Contracts_GetBigMaps']
  }
  '/v1/contracts/{address}/bigmaps/{name}': {
    /** Returns contract bigmap with the specified name or storage path. */
    get: operations['Contracts_GetBigMapByName']
  }
  '/v1/contracts/{address}/bigmaps/{name}/keys': {
    /** Returns keys of a contract bigmap with the specified name. */
    get: operations['Contracts_GetBigMapByNameKeys']
  }
  '/v1/contracts/{address}/bigmaps/{name}/keys/{key}': {
    /** Returns the specified bigmap key. */
    get: operations['Contracts_GetKey']
  }
  '/v1/contracts/{address}/bigmaps/{name}/keys/{key}/updates': {
    /** Returns updates history for the specified bigmap key. */
    get: operations['Contracts_GetKeyUpdates']
  }
  '/v1/contracts/{address}/bigmaps/{name}/historical_keys/{level}': {
    /** Returns a list of bigmap keys at the specific block. */
    get: operations['Contracts_GetHistoricalKeys']
  }
  '/v1/contracts/{address}/bigmaps/{name}/historical_keys/{level}/{key}': {
    /** Returns the specified bigmap key at the specific block. */
    get: operations['Contracts_GetKey2']
  }
  '/v1/cycles/count': {
    /** Returns the total number of cycles, including future cycles. */
    get: operations['Cycles_GetCount']
  }
  '/v1/cycles': {
    /** Returns a list of cycles, including future cycles. */
    get: operations['Cycles_Get']
  }
  '/v1/cycles/{index}': {
    /** Returns a cycle at the specified index. */
    get: operations['Cycles_GetByIndex']
  }
  '/v1/delegates': {
    /** Returns a list of delegate accounts. */
    get: operations['Delegates_Get']
  }
  '/v1/delegates/count': {
    /** Returns a number of delegate accounts. */
    get: operations['Delegates_GetCount']
  }
  '/v1/delegates/{address}': {
    /** Returns a delegate with the specified address. */
    get: operations['Delegates_GetByAddress']
  }
  '/v1/head': {
    /** Returns indexer head and synchronization status. */
    get: operations['Head_Get']
  }
  '/v1/operations/{hash}': {
    /** Returns a list of operations with the specified hash. */
    get: operations['Operations_GetByHash']
  }
  '/v1/operations/{hash}/{counter}': {
    /** Returns a list of operations with the specified hash and counter. */
    get: operations['Operations_GetByHashCounter']
  }
  '/v1/operations/{hash}/{counter}/{nonce}': {
    /** Returns an internal operations with the specified hash, counter and nonce. */
    get: operations['Operations_GetByHashCounterNonce']
  }
  '/v1/operations/endorsements': {
    /** Returns a list of endorsement operations. */
    get: operations['Operations_GetEndorsements']
  }
  '/v1/operations/endorsements/{hash}': {
    /** Returns an endorsement operation with specified hash. */
    get: operations['Operations_GetEndorsementByHash']
  }
  '/v1/operations/endorsements/count': {
    /** Returns the total number of endorsement operations. */
    get: operations['Operations_GetEndorsementsCount']
  }
  '/v1/operations/ballots': {
    /** Returns a list of ballot operations. */
    get: operations['Operations_GetBallots']
  }
  '/v1/operations/ballots/{hash}': {
    /** Returns a ballot operation with specified hash. */
    get: operations['Operations_GetBallotByHash']
  }
  '/v1/operations/ballots/count': {
    /** Returns the total number of ballot operations. */
    get: operations['Operations_GetBallotsCount']
  }
  '/v1/operations/proposals': {
    /** Returns a list of proposal operations. */
    get: operations['Operations_GetProposals']
  }
  '/v1/operations/proposals/{hash}': {
    /** Returns a proposal operation with specified hash. */
    get: operations['Operations_GetProposalByHash']
  }
  '/v1/operations/proposals/count': {
    /** Returns the total number of proposal operations. */
    get: operations['Operations_GetProposalsCount']
  }
  '/v1/operations/activations': {
    /** Returns a list of activation operations. */
    get: operations['Operations_GetActivations']
  }
  '/v1/operations/activations/{hash}': {
    /** Returns an activation operation with specified hash. */
    get: operations['Operations_GetActivationByHash']
  }
  '/v1/operations/activations/count': {
    /** Returns the total number of activation operations. */
    get: operations['Operations_GetActivationsCount']
  }
  '/v1/operations/double_baking': {
    /** Returns a list of double baking operations. */
    get: operations['Operations_GetDoubleBaking']
  }
  '/v1/operations/double_baking/{hash}': {
    /** Returns a double baking operation with specified hash. */
    get: operations['Operations_GetDoubleBakingByHash']
  }
  '/v1/operations/double_baking/count': {
    /** Returns the total number of double baking operations. */
    get: operations['Operations_GetDoubleBakingCount']
  }
  '/v1/operations/double_endorsing': {
    /** Returns a list of double endorsing operations. */
    get: operations['Operations_GetDoubleEndorsing']
  }
  '/v1/operations/double_endorsing/{hash}': {
    /** Returns a double endorsing operation with specified hash. */
    get: operations['Operations_GetDoubleEndorsingByHash']
  }
  '/v1/operations/double_endorsing/count': {
    /** Returns the total number of double endorsing operations. */
    get: operations['Operations_GetDoubleEndorsingCount']
  }
  '/v1/operations/nonce_revelations': {
    /** Returns a list of seed nonce revelation operations. */
    get: operations['Operations_GetNonceRevelations']
  }
  '/v1/operations/nonce_revelations/{hash}': {
    /** Returns a seed nonce revelation operation with specified hash. */
    get: operations['Operations_GetNonceRevelationByHash']
  }
  '/v1/operations/nonce_revelations/count': {
    /** Returns the total number of seed nonce revelation operations. */
    get: operations['Operations_GetNonceRevelationsCount']
  }
  '/v1/operations/delegations': {
    /** Returns a list of delegation operations. */
    get: operations['Operations_GetDelegations']
  }
  '/v1/operations/delegations/{hash}': {
    /** Returns a delegation operation with specified hash. */
    get: operations['Operations_GetDelegationByHash']
  }
  '/v1/operations/delegations/count': {
    /** Returns the total number of delegation operations. */
    get: operations['Operations_GetDelegationsCount']
  }
  '/v1/operations/originations': {
    /** Returns a list of origination operations. */
    get: operations['Operations_GetOriginations']
  }
  '/v1/operations/originations/{hash}': {
    /** Returns origination operations with specified hash. */
    get: operations['Operations_GetOriginationByHash']
  }
  '/v1/operations/originations/count': {
    /** Returns the total number of origination operations. */
    get: operations['Operations_GetOriginationsCount']
  }
  '/v1/operations/transactions': {
    /** Returns a list of transaction operations. */
    get: operations['Operations_GetTransactions']
  }
  '/v1/operations/transactions/{hash}': {
    /** Returns transaction operations with specified hash. */
    get: operations['Operations_GetTransactionByHash']
  }
  '/v1/operations/transactions/{hash}/{counter}': {
    /** Returns transaction operations with specified hash and counter. */
    get: operations['Operations_GetTransactionByHashCounter']
  }
  '/v1/operations/transactions/{hash}/{counter}/{nonce}': {
    /** Returns an internal transaction operation with specified hash, counter and nonce. */
    get: operations['Operations_GetTransactionByHashCounterNonce']
  }
  '/v1/operations/transactions/count': {
    /** Returns the total number of transaction operations. */
    get: operations['Operations_GetTransactionsCount']
  }
  '/v1/operations/reveals': {
    /** Returns a list of reveal operations. */
    get: operations['Operations_GetReveals']
  }
  '/v1/operations/reveals/{hash}': {
    /** Returns reveal operation with specified hash. */
    get: operations['Operations_GetRevealByHash']
  }
  '/v1/operations/reveals/count': {
    /** Returns the total number of reveal operations. */
    get: operations['Operations_GetRevealsCount']
  }
  '/v1/operations/register_constants': {
    /** Returns a list of register global constant operations. */
    get: operations['Operations_GetRegisterConstants']
  }
  '/v1/operations/register_constants/{hash}': {
    /** Returns register global constant operation with specified hash. */
    get: operations['Operations_GetRegisterConstantByHash']
  }
  '/v1/operations/register_constants/count': {
    /** Returns the total number of register global constant operations. */
    get: operations['Operations_GetRegisterConstantsCount']
  }
  '/v1/operations/migrations': {
    /** Returns a list of migration operations (synthetic type). */
    get: operations['Operations_GetMigrations']
  }
  '/v1/operations/migrations/{id}': {
    /** Returns migration operation with specified id. */
    get: operations['Operations_GetMigrationById']
  }
  '/v1/operations/migrations/count': {
    /** Returns the total number of migration operations (synthetic type). */
    get: operations['Operations_GetMigrationsCount']
  }
  '/v1/operations/revelation_penalties': {
    /** Returns a list of revelation penalty operations (synthetic type). */
    get: operations['Operations_GetRevelationPenalties']
  }
  '/v1/operations/revelation_penalties/{id}': {
    /** Returns revelation penalty operation with specified id. */
    get: operations['Operations_GetRevelationPenaltyById']
  }
  '/v1/operations/revelation_penalties/count': {
    /** Returns the total number of revelation penalty operations (synthetic type). */
    get: operations['Operations_GetRevelationPenaltiesCount']
  }
  '/v1/operations/baking': {
    /** Returns a list of baking operations (synthetic type). */
    get: operations['Operations_GetBaking']
  }
  '/v1/operations/baking/{id}': {
    /** Returns baking operation with specified id. */
    get: operations['Operations_GetBakingById']
  }
  '/v1/operations/baking/count': {
    /** Returns the total number of baking operations (synthetic type). */
    get: operations['Operations_GetBakingCount']
  }
  '/v1/protocols/count': {
    /** Returns the total number of protocols. */
    get: operations['Protocols_GetCount']
  }
  '/v1/protocols': {
    /** Returns a list of protocols. */
    get: operations['Protocols_Get']
  }
  '/v1/protocols/current': {
    /** Returns current protocol. */
    get: operations['Protocols_GetCurrent']
  }
  '/v1/protocols/{code}': {
    /** Returns a protocol with the specified proto code. */
    get: operations['Protocols_GetByCode']
  }
  '/v1/protocols/{hash}': {
    /** Returns a protocol with the specified hash. */
    get: operations['Protocols_GetByHash']
  }
  '/v1/protocols/cycles/{cycle}': {
    /** Returns a protocol at the specified cycle. */
    get: operations['Protocols_GetByCycle']
  }
  '/v1/quotes/count': {
    /** Returns the total number of quotes aligned with blocks. */
    get: operations['Quotes_GetCount']
  }
  '/v1/quotes/last': {
    /** Returns last known quote. */
    get: operations['Quotes_GetLast']
  }
  '/v1/quotes': {
    /** Returns a list of quotes aligned with blocks. */
    get: operations['Quotes_Get']
  }
  '/v1/rewards/bakers/{address}/count': {
    /** Returns total number of cycles where the baker was active */
    get: operations['Rewards_GetBakerRewardsCount']
  }
  '/v1/rewards/bakers/{address}': {
    /** Returns a list of baker rewards for every cycle, including future cycles. */
    get: operations['Rewards_GetBakerRewards']
  }
  '/v1/rewards/bakers/{address}/{cycle}': {
    /** Returns baker cycle rewards for the specified cycle. */
    get: operations['Rewards_GetBakerRewardsByCycle']
  }
  '/v1/rewards/delegators/{address}/count': {
    /** Returns total number of cycles where the delegator was delegated to an active baker */
    get: operations['Rewards_GetDelegatorRewardsCount']
  }
  '/v1/rewards/delegators/{address}': {
    /** Returns a list of delegator rewards for every cycle, including future cycles. */
    get: operations['Rewards_GetDelegatorRewards']
  }
  '/v1/rewards/delegators/{address}/{cycle}': {
    /** Returns delegator cycle rewards for the specified cycle. */
    get: operations['Rewards_GetDelegatorRewardsByCycle']
  }
  '/v1/rewards/split/{baker}/{cycle}': {
    /** Returns baker rewards for the specified cycle with all delegator balances at that cycle to allow rewards distribution in proportion to shares. */
    get: operations['Rewards_GetRewardSplit']
  }
  '/v1/rewards/split/{baker}/{cycle}/{delegator}': {
    /** Returns delegator from the reward split for the specified cycle. */
    get: operations['Rewards_GetRewardSplitDelegator']
  }
  '/v1/rights/count': {
    /** Returns the total number of stored rights. */
    get: operations['Rights_GetCount']
  }
  '/v1/rights': {
    /** Returns a list of rights. */
    get: operations['Rights_Get']
  }
  '/v1/software': {
    /** Returns a list of baker software. */
    get: operations['Software_Get']
  }
  '/v1/software/count': {
    /** Returns a number of software. */
    get: operations['Software_GetCount']
  }
  '/v1/statistics': {
    /** Returns a list of end-of-block statistics. */
    get: operations['Statistics_Get']
  }
  '/v1/statistics/daily': {
    /** Returns a list of end-of-day statistics. */
    get: operations['Statistics_GetDaily']
  }
  '/v1/statistics/cyclic': {
    /** Returns a list of end-of-cycle statistics. */
    get: operations['Statistics_GetCyclesAll']
  }
  '/v1/statistics/current': {
    /** Returns statistics at the end of a head block. */
    get: operations['Statistics_GetCycles']
  }
  '/v1/tokens/count': {
    /** Returns a total number of tokens. */
    get: operations['Tokens_GetTokensCount']
  }
  '/v1/tokens': {
    /** Returns a list of tokens. */
    get: operations['Tokens_GetTokens']
  }
  '/v1/tokens/balances/count': {
    /** Returns a total number of token balances. */
    get: operations['Tokens_GetTokenBalancesCount']
  }
  '/v1/tokens/balances': {
    /** Returns a list of token balances. */
    get: operations['Tokens_GetTokenBalances']
  }
  '/v1/tokens/transfers/count': {
    /** Returns the total number of token transfers. */
    get: operations['Tokens_GetTokenTransfersCount']
  }
  '/v1/tokens/transfers': {
    /** Returns a list of token transfers. */
    get: operations['Tokens_GetTokenTransfers']
  }
  '/v1/tokens/historical_balances/{level}': {
    /**
     * Returns a list of token balances at the end of the specified block.
     * Note, this endpoint is quite heavy, therefore at least one of the filters
     * (`account`, `token.id`, `token.contract` with `token.tokenId`) must be specified.
     */
    get: operations['Tokens_GetTokenBalances2']
  }
  '/v1/voting/proposals/count': {
    /** Returns the total number of protocol proposals. */
    get: operations['Voting_GetProposalsCount']
  }
  '/v1/voting/proposals': {
    /** Returns a list of protocol proposals. */
    get: operations['Voting_GetProposals']
  }
  '/v1/voting/proposals/{hash}': {
    /** Returns the most recent protocol proposal with the specified hash. */
    get: operations['Voting_GetProposalByHash']
  }
  '/v1/voting/periods': {
    /** Returns a list of voting periods. */
    get: operations['Voting_GetPeriods']
  }
  '/v1/voting/periods/{index}': {
    /** Returns a voting period at the specified index. */
    get: operations['Voting_GetPeriod']
  }
  '/v1/voting/periods/current': {
    /** Returns current voting period. */
    get: operations['Voting_GetCurrentPeriod']
  }
  '/v1/voting/periods/{index}/voters': {
    /** Returns voters from the voting period at the specified index. */
    get: operations['Voting_GetPeriodVoters']
  }
  '/v1/voting/periods/{index}/voters/{address}': {
    /** Returns a voter with the specified address from the voting period at the specified index. */
    get: operations['Voting_GetPeriodVoter']
  }
  '/v1/voting/periods/current/voters': {
    /** Returns voters from the current period. */
    get: operations['Voting_GetPeriodVoters2']
  }
  '/v1/voting/periods/current/voters/{address}': {
    /** Returns a voter with the specified address from the current period. */
    get: operations['Voting_GetPeriodVoter2']
  }
  '/v1/voting/epochs': {
    /** Returns a list of voting epochs. */
    get: operations['Voting_GetEpochs']
  }
  '/v1/voting/epochs/{index}': {
    /** Returns a voting epoch at the specified index. */
    get: operations['Voting_GetEpoch']
  }
  '/v1/voting/epochs/current': {
    /** Returns the current voting epoch */
    get: operations['Voting_GetCurrentEpoch']
  }
  '/v1/voting/epochs/latest_voting': {
    /** Returns the latest epoch with at least one proposal */
    get: operations['Voting_GetLatestVoting']
  }
}

export interface Components {
  schemas: {
    Account: {
      type: string
    }
    User: Components['schemas']['Account'] & {
      type?: string | null
      /** @description Public key hash of the account */
      address?: string | null
      /** @description Name of the project behind the account or account description */
      alias?: string | null
      /** @description Base58 representation of account's public key, revealed by the account */
      publicKey?: string | null
      /** @description Public key revelation status. Unrevealed account can't send manager operation (transaction, origination etc.) */
      revealed?: boolean
      /**
       * Format: int64
       * @description Account balance
       */
      balance?: number
      /**
       * Format: int32
       * @description An account nonce which is used to prevent operation replay
       */
      counter?: number
      /** @description Information about the current delegate of the account. `null` if it's not delegated */
      delegate?: Components['schemas']['DelegateInfo'] | null
      /**
       * Format: int32
       * @description Block height of latest delegation. `null` if it's not delegated
       */
      delegationLevel?: number | null
      /**
       * Format: date-time
       * @description Block datetime of latest delegation (ISO 8601, e.g. `2020-02-20T02:40:57Z`). `null` if it's not delegated
       */
      delegationTime?: string | null
      /**
       * Format: int32
       * @description Number of contracts, created (originated) and/or managed by the contract
       */
      numContracts?: number
      /**
       * Format: int32
       * @description Number of account tokens with non-zero balances
       */
      activeTokensCount?: number
      /**
       * Format: int32
       * @description Number of tokens the account ever had
       */
      tokenBalancesCount?: number
      /**
       * Format: int32
       * @description Number of token transfers from/to the account
       */
      tokenTransfersCount?: number
      /**
       * Format: int32
       * @description Number of account activation operations. Are used to activate accounts that were recommended allocations of
       * tezos tokens for donations to the Tezos Foundation’s fundraiser
       */
      numActivations?: number
      /**
       * Format: int32
       * @description Number of delegation operations, related to the account
       */
      numDelegations?: number
      /**
       * Format: int32
       * @description Number of all origination (deployment / contract creation) operations, related to the account
       */
      numOriginations?: number
      /**
       * Format: int32
       * @description Number of all transaction (tez transfer) operations, related to the account
       */
      numTransactions?: number
      /**
       * Format: int32
       * @description Number of reveal (is used to reveal the public key associated with an account) operations of the contract
       */
      numReveals?: number
      /**
       * Format: int32
       * @description Number of register global constant operations of the delegate (baker)
       */
      numRegisterConstants?: number
      /**
       * Format: int32
       * @description Number of migration (result of the context (database) migration during a protocol update) operations,
       * related to the account (synthetic type)
       */
      numMigrations?: number
      /**
       * Format: int32
       * @description Block height of the first operation, related to the account
       */
      firstActivity?: number | null
      /**
       * Format: date-time
       * @description Block datetime of the first operation, related to the account (ISO 8601, e.g. `2020-02-20T02:40:57Z`)
       */
      firstActivityTime?: string | null
      /**
       * Format: int32
       * @description Height of the block in which the account state was changed last time
       */
      lastActivity?: number | null
      /**
       * Format: date-time
       * @description Datetime of the block in which the account state was changed last time (ISO 8601, e.g. `2020-02-20T02:40:57Z`)
       */
      lastActivityTime?: string | null
      /** @description Metadata of the account (alias, logo, website, contacts, etc) */
      metadata?: Components['schemas']['ProfileMetadata'] | null
    }
    DelegateInfo: {
      /** @description Name of the baking service */
      alias?: string | null
      /** @description Public key hash of the delegate (baker) */
      address?: string | null
      /** @description Delegation status (`true` - active, `false` - deactivated) */
      active?: boolean
    }
    ProfileMetadata: {
      kind?: string | null
      alias?: string | null
      description?: string | null
      site?: string | null
      support?: string | null
      email?: string | null
      twitter?: string | null
      telegram?: string | null
      discord?: string | null
      reddit?: string | null
      slack?: string | null
      github?: string | null
      gitlab?: string | null
      instagram?: string | null
      facebook?: string | null
      medium?: string | null
    }
    Delegate: Components['schemas']['Account'] & {
      /** @description Type of the account, `delegate` - account, registered as a delegate (baker) */
      type?: string | null
      /** @description Public key hash of the delegate (baker) */
      address?: string | null
      /** @description Delegation status (`true` - active, `false` - deactivated) */
      active?: boolean
      /** @description Name of the baking service */
      alias?: string | null
      /** @description Public key of the delegate (baker) */
      publicKey?: string | null
      /** @description Public key revelation status. Unrevealed account can't send manager operation (transaction, origination etc.) */
      revealed?: boolean
      /**
       * Format: int64
       * @description Total balance of the delegate (baker), including spendable and frozen funds (micro tez)
       */
      balance?: number
      /**
       * Format: int64
       * @description Amount of security deposit, currently locked for baked (produced) blocks and (or) given endorsements (micro tez)
       */
      frozenDeposits?: number
      /**
       * Format: int64
       * @description Amount of currently frozen baking rewards (micro tez)
       */
      frozenRewards?: number
      /**
       * Format: int64
       * @description Amount of currently frozen fees paid by operations inside blocks, baked (produced) by the delegate (micro tez)
       */
      frozenFees?: number
      /**
       * Format: int32
       * @description An account nonce which is used to prevent operation replay
       */
      counter?: number
      /**
       * Format: int32
       * @description Block height when delegate (baker) was registered as a baker last time
       */
      activationLevel?: number
      /**
       * Format: date-time
       * @description Block datetime when delegate (baker) was registered as a baker last time (ISO 8601, e.g. 2019-11-31)
       */
      activationTime?: string
      /**
       * Format: int32
       * @description Block height when delegate (baker) was deactivated as a baker because of lack of funds or inactivity
       */
      deactivationLevel?: number | null
      /**
       * Format: date-time
       * @description Block datetime when delegate (baker) was deactivated as a baker because of lack of funds or inactivity (ISO 8601, e.g. 2019-11-31)
       */
      deactivationTime?: string | null
      /**
       * Format: int64
       * @description Sum of delegate (baker) balance and delegated funds minus frozen rewards (micro tez)
       */
      stakingBalance?: number
      /**
       * Format: int32
       * @description Number of contracts, created (originated) and/or managed by the delegate (baker)
       */
      numContracts?: number
      /**
       * Format: int32
       * @description Number of account tokens with non-zero balances
       */
      activeTokensCount?: number
      /**
       * Format: int32
       * @description Number of tokens the account ever had
       */
      tokenBalancesCount?: number
      /**
       * Format: int32
       * @description Number of token transfers from/to the account
       */
      tokenTransfersCount?: number
      /**
       * Format: int32
       * @description Number of current delegators (accounts, delegated their funds) of the delegate (baker)
       */
      numDelegators?: number
      /**
       * Format: int32
       * @description Number of baked (validated) blocks all the time by the delegate (baker)
       */
      numBlocks?: number
      /**
       * Format: int32
       * @description Number of given endorsements (approvals) by the delegate (baker)
       */
      numEndorsements?: number
      /**
       * Format: int32
       * @description Number of submitted by the delegate ballots during a voting period
       */
      numBallots?: number
      /**
       * Format: int32
       * @description Number of submitted (upvoted) by the delegate proposals during a proposal period
       */
      numProposals?: number
      /**
       * Format: int32
       * @description Number of account activation operations. Are used to activate accounts that were recommended allocations of
       * tezos tokens for donations to the Tezos Foundation’s fundraiser
       */
      numActivations?: number
      /**
       * Format: int32
       * @description Number of double baking (baking two different blocks at the same height) evidence operations,
       * included in blocks, baked (validated) by the delegate
       */
      numDoubleBaking?: number
      /**
       * Format: int32
       * @description Number of double endorsement (endorsing two different blocks at the same block height) evidence operations,
       * included in blocks, baked (validated) by the delegate
       */
      numDoubleEndorsing?: number
      /**
       * Format: int32
       * @description Number of seed nonce revelation (are used by the blockchain to create randomness) operations provided by the delegate
       */
      numNonceRevelations?: number
      /**
       * Format: int32
       * @description Number of operations for all time in which rewards were lost due to unrevealed seed nonces by the delegate (synthetic type)
       */
      numRevelationPenalties?: number
      /**
       * Format: int32
       * @description Number of all delegation related operations (new delegator, left delegator, registration as a baker),
       * related to the delegate (baker)
       */
      numDelegations?: number
      /**
       * Format: int32
       * @description Number of all origination (deployment / contract creation) operations, related to the delegate (baker)
       */
      numOriginations?: number
      /**
       * Format: int32
       * @description Number of all transaction (tez transfer) operations, related to the delegate (baker)
       */
      numTransactions?: number
      /**
       * Format: int32
       * @description Number of reveal (is used to reveal the public key associated with an account) operations of the delegate (baker)
       */
      numReveals?: number
      /**
       * Format: int32
       * @description Number of register global constant operations of the delegate (baker)
       */
      numRegisterConstants?: number
      /**
       * Format: int32
       * @description Number of migration (result of the context (database) migration during a protocol update) operations,
       * related to the delegate (synthetic type)
       */
      numMigrations?: number
      /**
       * Format: int32
       * @description Block height of the first operation, related to the delegate (baker)
       */
      firstActivity?: number
      /**
       * Format: date-time
       * @description Block datetime of the first operation, related to the delegate (ISO 8601, e.g. `2020-02-20T02:40:57Z`)
       */
      firstActivityTime?: string
      /**
       * Format: int32
       * @description Height of the block in which the account state was changed last time
       */
      lastActivity?: number
      /**
       * Format: date-time
       * @description Datetime of the block in which the account state was changed last time (ISO 8601, e.g. `2020-02-20T02:40:57Z`)
       */
      lastActivityTime?: string
      /** @description Metadata of the delegate (alias, logo, website, contacts, etc) */
      metadata?: Components['schemas']['ProfileMetadata'] | null
      /** @description Last seen baker's software */
      software?: Components['schemas']['SoftwareAlias'] | null
    }
    SoftwareAlias: {
      /** @description Software version (commit tag) */
      version?: string | null
      /**
       * Format: date-time
       * @description Date of the commit or when the software was first seen
       */
      date?: string
    }
    Contract: Components['schemas']['Account'] & {
      /** @description Type of the account, `contract` - smart contract programmable account */
      type?: string | null
      /** @description Public key hash of the contract */
      address?: string | null
      /**
       * @description Kind of the contract (`delegator_contract` or `smart_contract`),
       * where `delegator_contract` - manager.tz smart contract for delegation purpose only
       */
      kind?: string | null
      /** @description List of implemented standards (TZIPs) */
      tzips?: string[] | null
      /** @description Name of the project behind the contract or contract description */
      alias?: string | null
      /**
       * Format: int64
       * @description Contract balance (micro tez)
       */
      balance?: number
      /** @description Information about the account, which has deployed the contract to the blockchain */
      creator?: Components['schemas']['CreatorInfo'] | null
      /** @description Information about the account, which was marked as a manager when contract was deployed to the blockchain */
      manager?: Components['schemas']['ManagerInfo'] | null
      /** @description Information about the current delegate of the contract. `null` if it's not delegated */
      delegate?: Components['schemas']['DelegateInfo'] | null
      /**
       * Format: int32
       * @description Block height of latest delegation. `null` if it's not delegated
       */
      delegationLevel?: number | null
      /**
       * Format: date-time
       * @description Block datetime of latest delegation (ISO 8601, e.g. `2020-02-20T02:40:57Z`). `null` if it's not delegated
       */
      delegationTime?: string | null
      /**
       * Format: int32
       * @description Number of contracts, created (originated) and/or managed by the contract
       */
      numContracts?: number
      /**
       * Format: int32
       * @description Number of account tokens with non-zero balances
       */
      activeTokensCount?: number
      /**
       * Format: int32
       * @description Number of tokens the account ever had
       */
      tokenBalancesCount?: number
      /**
       * Format: int32
       * @description Number of token transfers from/to the account
       */
      tokenTransfersCount?: number
      /**
       * Format: int32
       * @description Number of delegation operations of the contract
       */
      numDelegations?: number
      /**
       * Format: int32
       * @description Number of origination (deployment / contract creation) operations, related the contract
       */
      numOriginations?: number
      /**
       * Format: int32
       * @description Number of transaction (transfer) operations, related to the contract
       */
      numTransactions?: number
      /**
       * Format: int32
       * @description Number of reveal (is used to reveal the public key associated with an account) operations of the contract
       */
      numReveals?: number
      /**
       * Format: int32
       * @description Number of migration (result of the context (database) migration during a protocol update) operations
       * related to the contract (synthetic type)
       */
      numMigrations?: number
      /**
       * Format: int32
       * @description Block height of the contract creation
       */
      firstActivity?: number
      /**
       * Format: date-time
       * @description Block datetime of the contract creation (ISO 8601, e.g. `2020-02-20T02:40:57Z`)
       */
      firstActivityTime?: string
      /**
       * Format: int32
       * @description Height of the block in which the account state was changed last time
       */
      lastActivity?: number
      /**
       * Format: date-time
       * @description Datetime of the block in which the account state was changed last time (ISO 8601, e.g. `2020-02-20T02:40:57Z`)
       */
      lastActivityTime?: string
      /** @description Contract storage value. Omitted by default. Use `?includeStorage=true` to include it in response. */
      storage?: unknown | null
      /**
       * Format: int32
       * @description 32-bit hash of the contract parameter and storage types.
       * This field can be used for searching similar contracts (which have the same interface).
       */
      typeHash?: number
      /**
       * Format: int32
       * @description 32-bit hash of the contract code.
       * This field can be used for searching same contracts (which have the same script).
       */
      codeHash?: number
      /** @description Metadata of the contract (alias, logo, website, contacts, etc) */
      metadata?: Components['schemas']['ProfileMetadata'] | null
    }
    CreatorInfo: {
      /** @description Name of the project behind the account or account description */
      alias?: string | null
      /** @description Public key hash of the account */
      address?: string | null
    }
    ManagerInfo: {
      /** @description Name of the project behind the account or account description */
      alias?: string | null
      /** @description Public key hash of the account */
      address?: string | null
      /** @description Base58 representation of account's public key, revealed by the account */
      publicKey?: string | null
    }
    Ghost: Components['schemas']['Account'] & {
      /** @description Type of the account, `ghost` - contract that has been met among token holders, but hasn't been originated */
      type?: string | null
      /** @description Address of the contract */
      address?: string | null
      /** @description Name of the ghost contract */
      alias?: string | null
      /**
       * Format: int32
       * @description Number of account tokens with non-zero balances
       */
      activeTokensCount?: number
      /**
       * Format: int32
       * @description Number of tokens the account ever had
       */
      tokenBalancesCount?: number
      /**
       * Format: int32
       * @description Number of token transfers from/to the account
       */
      tokenTransfersCount?: number
      /**
       * Format: int32
       * @description Block height at which the ghost contract appeared first time
       */
      firstActivity?: number
      /**
       * Format: date-time
       * @description Block datetime at which the ghost contract appeared first time (ISO 8601, e.g. `2020-02-20T02:40:57Z`)
       */
      firstActivityTime?: string
      /**
       * Format: int32
       * @description Height of the block in which the ghost contract state was changed last time
       */
      lastActivity?: number
      /**
       * Format: date-time
       * @description Datetime of the block in which the ghost contract state was changed last time (ISO 8601, e.g. `2020-02-20T02:40:57Z`)
       */
      lastActivityTime?: string
      /** @description Metadata of the ghost contract (alias, logo, website, contacts, etc) */
      metadata?: Components['schemas']['ProfileMetadata'] | null
    }
    EmptyAccount: Components['schemas']['Account'] & {
      /** @description Type of the account, `empty` - account hasn't appeared in the blockchain yet */
      type?: string | null
      /** @description Public key hash of the account */
      address?: string | null
      /**
       * Format: int32
       * @description An account nonce which is used to prevent operation replay
       */
      counter?: number
    }
    AccountTypeParameter: {
      /**
       * @description **Equal** filter mode (optional, i.e. `param.eq=123` is the same as `param=123`). \
       * Specify an account type to get items where the specified field is equal to the specified value.
       *
       * Example: `?type=delegate`.
       */
      eq?: string | null
      /**
       * @description **Not equal** filter mode. \
       * Specify an account type to get items where the specified field is not equal to the specified value.
       *
       * Example: `?type.ne=contract`.
       */
      ne?: string | null
    }
    ContractKindParameter: {
      /**
       * @description **Equal** filter mode (optional, i.e. `param.eq=123` is the same as `param=123`). \
       * Specify a contract kind to get items where the specified field is equal to the specified value.
       *
       * Example: `?kind=smart_contract`.
       */
      eq?: string | null
      /**
       * @description **Not equal** filter mode. \
       * Specify a contract kind to get items where the specified field is not equal to the specified value.
       *
       * Example: `?kind.ne=delegator_contract`.
       */
      ne?: string | null
      /**
       * @description **In list** (any of) filter mode. \
       * Specify a comma-separated list of contract kinds to get items where the specified field is equal to one of the specified values.
       *
       * Example: `?kind.in=smart_contract,asset`.
       */
      in?: string[] | null
      /**
       * @description **Not in list** (none of) filter mode. \
       * Specify a comma-separated list of contract kinds to get items where the specified field is not equal to all the specified values.
       *
       * Example: `?kind.ni=smart_contract,asset`.
       */
      ni?: string[] | null
    }
    AccountParameter: {
      /**
       * @description **Equal** filter mode (optional, i.e. `param.eq=123` is the same as `param=123`). \
       * Specify a `tz` or `KT` address to get items where the specified field is equal to the specified value.
       *
       * Example: `?sender=tz1WnfXMPaNTBmH7DBPwqCWs9cPDJdkGBTZ8`.
       */
      eq?: string | null
      /**
       * @description **Not equal** filter mode. \
       * Specify a `tz` or `KT` address to get items where the specified field is not equal to the specified value.
       *
       * Example: `?sender.ne=tz1WnfXMPaNTBmH7DBPwqCWs9cPDJdkGBTZ8`.
       */
      ne?: string | null
      /**
       * @description **In list** (any of) filter mode. \
       * Specify a comma-separated list of addresses to get items where the specified field is equal to one of the specified values.
       *
       * Example: `?sender.in=tz1WnfXMPaNTB,tz1SiPXX4MYGNJND`.
       */
      in?: string[] | null
      /**
       * @description **Not in list** (none of) filter mode. \
       * Specify a comma-separated list of addresses to get items where the specified field is not equal to all the specified values.
       *
       * Example: `?sender.ni=tz1WnfXMPaNTB,tz1SiPXX4MYGNJND`.
       */
      ni?: string[] | null
      /**
       * @description **Equal to another field** filter mode. \
       * Specify a field name to get items where the specified fields are equal.
       *
       * Example: `?sender.eqx=target`.
       */
      eqx?: string | null
      /**
       * @description **Not equal to another field** filter mode. \
       * Specify a field name to get items where the specified fields are not equal.
       *
       * Example: `?sender.nex=initiator`.
       */
      nex?: string | null
      /**
       * @description **Is null** filter mode. \
       * Use this mode to get items where the specified field is null or not.
       *
       * Example: `?initiator.null` or `?initiator.null=false`.
       */
      null?: boolean | null
    }
    Int64Parameter: {
      /**
       * Format: int64
       * @description **Equal** filter mode (optional, i.e. `param.eq=123` is the same as `param=123`). \
       * Specify an integer number to get items where the specified field is equal to the specified value.
       *
       * Example: `?balance=1234`.
       */
      eq?: number | null
      /**
       * Format: int64
       * @description **Not equal** filter mode. \
       * Specify an integer number to get items where the specified field is not equal to the specified value.
       *
       * Example: `?balance.ne=1234`.
       */
      ne?: number | null
      /**
       * Format: int64
       * @description **Greater than** filter mode. \
       * Specify an integer number to get items where the specified field is greater than the specified value.
       *
       * Example: `?balance.gt=1234`.
       */
      gt?: number | null
      /**
       * Format: int64
       * @description **Greater or equal** filter mode. \
       * Specify an integer number to get items where the specified field is greater than equal to the specified value.
       *
       * Example: `?balance.ge=1234`.
       */
      ge?: number | null
      /**
       * Format: int64
       * @description **Less than** filter mode. \
       * Specify an integer number to get items where the specified field is less than the specified value.
       *
       * Example: `?balance.lt=1234`.
       */
      lt?: number | null
      /**
       * Format: int64
       * @description **Less or equal** filter mode. \
       * Specify an integer number to get items where the specified field is less than or equal to the specified value.
       *
       * Example: `?balance.le=1234`.
       */
      le?: number | null
      /**
       * @description **In list** (any of) filter mode. \
       * Specify a comma-separated list of integers to get items where the specified field is equal to one of the specified values.
       *
       * Example: `?level.in=12,14,52,69`.
       */
      in?: number[] | null
      /**
       * @description **Not in list** (none of) filter mode. \
       * Specify a comma-separated list of integers to get items where the specified field is not equal to all the specified values.
       *
       * Example: `?level.ni=12,14,52,69`.
       */
      ni?: number[] | null
    }
    BoolParameter: {
      /**
       * @description **Equal** filter mode (optional, i.e. `param.eq=true` is the same as `param=true`). \
       * Specify a bool flag to get items where the specified field is equal to the specified value.
       *
       * Example: `?active=true` or `?active=1` or `?active`.
       */
      eq?: boolean | null
      /**
       * @description **Is null** filter mode. \
       * Use this mode to get items where the specified field is null or not.
       *
       * Example: `?active.null` or `?active.null=false`.
       */
      null?: boolean | null
    }
    Int32Parameter: {
      /**
       * Format: int32
       * @description **Equal** filter mode (optional, i.e. `param.eq=123` is the same as `param=123`). \
       * Specify an integer number to get items where the specified field is equal to the specified value.
       *
       * Example: `?balance=1234`.
       */
      eq?: number | null
      /**
       * Format: int32
       * @description **Not equal** filter mode. \
       * Specify an integer number to get items where the specified field is not equal to the specified value.
       *
       * Example: `?balance.ne=1234`.
       */
      ne?: number | null
      /**
       * Format: int32
       * @description **Greater than** filter mode. \
       * Specify an integer number to get items where the specified field is greater than the specified value.
       *
       * Example: `?balance.gt=1234`.
       */
      gt?: number | null
      /**
       * Format: int32
       * @description **Greater or equal** filter mode. \
       * Specify an integer number to get items where the specified field is greater than equal to the specified value.
       *
       * Example: `?balance.ge=1234`.
       */
      ge?: number | null
      /**
       * Format: int32
       * @description **Less than** filter mode. \
       * Specify an integer number to get items where the specified field is less than the specified value.
       *
       * Example: `?balance.lt=1234`.
       */
      lt?: number | null
      /**
       * Format: int32
       * @description **Less or equal** filter mode. \
       * Specify an integer number to get items where the specified field is less than or equal to the specified value.
       *
       * Example: `?balance.le=1234`.
       */
      le?: number | null
      /**
       * @description **In list** (any of) filter mode. \
       * Specify a comma-separated list of integers to get items where the specified field is equal to one of the specified values.
       *
       * Example: `?level.in=12,14,52,69`.
       */
      in?: number[] | null
      /**
       * @description **Not in list** (none of) filter mode. \
       * Specify a comma-separated list of integers to get items where the specified field is not equal to all the specified values.
       *
       * Example: `?level.ni=12,14,52,69`.
       */
      ni?: number[] | null
    }
    SelectParameter: {
      /**
       * @description **Fields** selection mode (optional, i.e. `select.fields=balance` is the same as `select=balance`). \
       * Specify a comma-separated list of fields to include into response.
       *
       * Example: `?select=address,balance` =&gt; `[ { "address": "asd", "balance": 10 } ]`.
       */
      fields?: string[] | null
      /**
       * @description **Values** selection mode. \
       * Specify a comma-separated list of fields to include their values into response.
       *
       * Example: `?select.values=address,balance` =&gt; `[ [ "asd", 10 ] ]`.
       */
      values?: string[] | null
    }
    SortParameter: {
      /**
       * @description **Ascending** sort mode (optional, i.e. `sort.asc=id` is the same as `sort=id`). \
       * Specify a field name to sort by.
       *
       * Example: `?sort=balance`.
       */
      asc?: string | null
      /**
       * @description **Descending** sort mode. \
       * Specify a field name to sort by descending.
       *
       * Example: `?sort.desc=id`.
       */
      desc?: string | null
    }
    OffsetParameter: {
      /**
       * Format: int32
       * @description **Elements** offset mode (optional, i.e. `offset.el=123` is the same as `offset=123`). \
       * Skips specified number of elements.
       *
       * Example: `?offset=100`.
       */
      el?: number | null
      /**
       * Format: int32
       * @description **Page** offset mode. \
       * Skips `page * limit` elements. This is a classic pagination.
       *
       * Example: `?offset.pg=1`.
       */
      pg?: number | null
      /**
       * Format: int64
       * @description **Cursor** offset mode. \
       * Skips all elements with the `cursor` before (including) the specified value. Cursor is a field used for sorting, e.g. `id`.
       * Avoid using this offset mode with non-unique or non-sequential cursors such as `amount`, `balance`, etc.
       *
       * Example: `?offset.cr=45837`.
       */
      cr?: number | null
    }
    RelatedContract: {
      /**
       * @description Kind of the contract (`delegator_contract` or `smart_contract`),
       * where `delegator_contract` - manager.tz smart contract for delegation purpose only
       */
      kind?: string | null
      /** @description Name of the project behind the contract or contract description */
      alias?: string | null
      /** @description Public key hash of the contract */
      address?: string | null
      /**
       * Format: int64
       * @description Contract balance (micro tez)
       */
      balance?: number
      /** @description Information about the current delegate of the contract. `null` if it's not delegated */
      delegate?: Components['schemas']['DelegateInfo'] | null
      /**
       * Format: int32
       * @description Height of the block where the contract was created
       */
      creationLevel?: number
      /**
       * Format: date-time
       * @description Datetime of the block where the contract was created (ISO 8601, e.g. `2020-02-20T02:40:57Z`)
       */
      creationTime?: string | null
    }
    Delegator: {
      /** @description Delegator type ('contract' for KT.. address or 'user' for tz.. address) */
      type?: string | null
      /** @description Name of the project behind the account or account description */
      alias?: string | null
      /** @description Public key hash of the account */
      address?: string | null
      /**
       * Format: int64
       * @description Account balance (micro tez)
       */
      balance?: number
      /**
       * Format: int32
       * @description Block height of last delegation operation
       */
      delegationLevel?: number
      /**
       * Format: date-time
       * @description Block datetime of last delegation operation (ISO 8601, e.g. `2020-02-20T02:40:57Z`)
       */
      delegationTime?: string
    }
    Operation: {
      type: string
    }
    EndorsementOperation: Components['schemas']['Operation'] & {
      /**
       * @description Type of the operation, `endorsement` - is operation, which specifies the head of the chain as seen by the endorser of a given slot.
       * The endorser is randomly selected to be included in the block that extends the head of the chain as specified in this operation.
       * A block with more endorsements improves the weight of the chain and increases the likelihood of that chain being the canonical one.
       */
      type?: string | null
      /**
       * Format: int32
       * @description Unique ID of the operation, stored in the TzKT indexer database
       */
      id?: number
      /**
       * Format: int32
       * @description The height of the block from the genesis block, in which the operation was included
       */
      level?: number
      /**
       * Format: date-time
       * @description Datetime of the block, in which the operation was included (ISO 8601, e.g. `2020-02-20T02:40:57Z`)
       */
      timestamp?: string
      /** @description Hash of the block, in which the operation was included */
      block?: string | null
      /** @description Hash of the operation */
      hash?: string | null
      /** @description Information about the baker (delegate) who sent the operation */
      delegate?: Components['schemas']['Alias'] | null
      /**
       * Format: int32
       * @description Number of assigned endorsement slots (out of 32) to the baker (delegate) who sent the operation
       */
      slots?: number
      /**
       * Format: int64
       * @description Security deposit frozen on the baker's account
       */
      deposit?: number
      /**
       * Format: int64
       * @description Reward of the baker (delegate) for the operation
       */
      rewards?: number
      /** @description Injected historical quote at the time of operation */
      quote?: Components['schemas']['QuoteShort'] | null
    }
    Alias: {
      /** @description Account alias name (offchain metadata). */
      alias?: string | null
      /** @description Account address (public key hash). */
      address?: string | null
    }
    QuoteShort: {
      /**
       * Format: double
       * @description XTZ/BTC price
       */
      btc?: number | null
      /**
       * Format: double
       * @description XTZ/EUR price
       */
      eur?: number | null
      /**
       * Format: double
       * @description XTZ/USD price
       */
      usd?: number | null
      /**
       * Format: double
       * @description XTZ/CNY price
       */
      cny?: number | null
      /**
       * Format: double
       * @description XTZ/JPY price
       */
      jpy?: number | null
      /**
       * Format: double
       * @description XTZ/KRW price
       */
      krw?: number | null
      /**
       * Format: double
       * @description XTZ/ETH price
       */
      eth?: number | null
      /**
       * Format: double
       * @description XTZ/GBP price
       */
      gbp?: number | null
    }
    BallotOperation: Components['schemas']['Operation'] & {
      /** @description Type of the operation, `ballot` - is used to vote for a proposal in a given voting cycle */
      type?: string | null
      /**
       * Format: int32
       * @description Unique ID of the operation, stored in the TzKT indexer database
       */
      id?: number
      /**
       * Format: int32
       * @description The height of the block from the genesis block, in which the operation was included
       */
      level?: number
      /**
       * Format: date-time
       * @description Datetime of the block, in which the operation was included (ISO 8601, e.g. `2020-02-20T02:40:57Z`)
       */
      timestamp?: string
      /** @description Hash of the block, in which the operation was included */
      block?: string | null
      /** @description Hash of the operation */
      hash?: string | null
      /** @description Information about the voting period for which the ballot was submitted */
      period?: Components['schemas']['PeriodInfo'] | null
      /** @description Information about the proposal for which ballot was submitted */
      proposal?: Components['schemas']['ProposalAlias'] | null
      /** @description Information about the delegate (baker), submitted the ballot */
      delegate?: Components['schemas']['Alias'] | null
      /**
       * Format: int32
       * @description Number of baker's rolls (baker's voting power)
       */
      rolls?: number
      /** @description Vote, given in the ballot (`yay`, `nay`, or `pass`) */
      vote?: string | null
      /** @description Injected historical quote at the time of operation */
      quote?: Components['schemas']['QuoteShort'] | null
    }
    PeriodInfo: {
      /**
       * Format: int32
       * @description Voting period index, starting from zero
       */
      index?: number
      /**
       * Format: int32
       * @description Voting epoch index, starting from zero
       */
      epoch?: number
      /**
       * @description Kind of the voting period
       * `proposal` - delegates can submit protocol amendment proposals using the proposal operation
       * `exploration` -  bakers (delegates) may vote on the top-ranked proposal from the previous Proposal Period using the ballot operation
       * `testing` - If the proposal is approved in the Exploration Period, the testing (or 'cooldown') period begins and bakers start testing the new protocol
       * `promotion` - delegates can cast one vote to promote or not the tested proposal using the ballot operation
       * `adoption` - after the proposal is actually accepted, the ecosystem has some time to prepare to the upgrade
       * Learn more: https://tezos.gitlab.io/whitedoc/voting.html
       */
      kind?: string | null
      /**
       * Format: int32
       * @description The height of the block in which the period starts
       */
      firstLevel?: number
      /**
       * Format: int32
       * @description The height of the block in which the period ends
       */
      lastLevel?: number
    }
    ProposalAlias: {
      /** @description Alias of the proposal */
      alias?: string | null
      /** @description Hash of the proposal, which representing a tarball of concatenated .ml/.mli source files */
      hash?: string | null
    }
    ProposalOperation: Components['schemas']['Operation'] & {
      /** @description Type of the operation, `proposal` - is used by bakers (delegates) to submit and/or upvote proposals to amend the protocol */
      type?: string | null
      /**
       * Format: int32
       * @description Unique ID of the operation, stored in the TzKT indexer database
       */
      id?: number
      /**
       * Format: int32
       * @description The height of the block from the genesis block, in which the operation was included
       */
      level?: number
      /**
       * Format: date-time
       * @description Datetime of the block, in which the operation was included (ISO 8601, e.g. `2020-02-20T02:40:57Z`)
       */
      timestamp?: string
      /** @description Hash of the block, in which the operation was included */
      block?: string | null
      /** @description Hash of the operation */
      hash?: string | null
      /** @description Information about the proposal period for which the proposal was submitted (upvoted) */
      period?: Components['schemas']['PeriodInfo'] | null
      /** @description Information about the submitted (upvoted) proposal */
      proposal?: Components['schemas']['ProposalAlias'] | null
      /** @description Information about the baker (delegate), submitted (upvoted) the proposal operation */
      delegate?: Components['schemas']['Alias'] | null
      /**
       * Format: int32
       * @description Number of baker's rolls (baker's voting power)
       */
      rolls?: number
      /** @description Indicates whether proposal upvote has already been pushed. Duplicated proposal operations are not counted when selecting proposal-winner. */
      duplicated?: boolean
      /** @description Injected historical quote at the time of operation */
      quote?: Components['schemas']['QuoteShort'] | null
    }
    ActivationOperation: Components['schemas']['Operation'] & {
      /**
       * @description Type of the operation, `activation` - is used to activate accounts that were recommended allocations of
       * tezos tokens for donations to the Tezos Foundation’s fundraiser.
       */
      type?: string | null
      /**
       * Format: int32
       * @description Unique ID of the operation, stored in the TzKT indexer database
       */
      id?: number
      /**
       * Format: int32
       * @description The height of the block, from the genesis block, in which the operation was included
       */
      level?: number
      /**
       * Format: date-time
       * @description Datetime of the block, in which the operation was included (ISO 8601, e.g. `2020-02-20T02:40:57Z`)
       */
      timestamp?: string
      /** @description Hash of the block, in which the operation was included */
      block?: string | null
      /** @description Hash of the operation */
      hash?: string | null
      /** @description Information about activated account */
      account?: Components['schemas']['Alias'] | null
      /**
       * Format: int64
       * @description Account activation balance of tezos tokens that were recommended allocations for donations to the Tezos Foundation’s fundraiser
       */
      balance?: number
      /** @description Injected historical quote at the time of operation */
      quote?: Components['schemas']['QuoteShort'] | null
    }
    DoubleBakingOperation: Components['schemas']['Operation'] & {
      /** @description Type of the operation, `double_baking` - is used by bakers to provide evidence of double baking (baking two different blocks at the same height) by a baker */
      type?: string | null
      /**
       * Format: int32
       * @description Unique ID of the operation, stored in the TzKT indexer database
       */
      id?: number
      /**
       * Format: int32
       * @description The height of the block from the genesis block, in which the operation was included
       */
      level?: number
      /**
       * Format: date-time
       * @description Datetime of the block, in which the operation was included (ISO 8601, e.g. `2020-02-20T02:40:57Z`)
       */
      timestamp?: string
      /** @description Hash of the block, in which the operation was included */
      block?: string | null
      /** @description Hash of the operation */
      hash?: string | null
      /**
       * Format: int32
       * @description The height of the block from the genesis block, which was double baked
       */
      accusedLevel?: number
      /** @description Information about the baker (delegate), produced the block, in which the operation was included */
      accuser?: Components['schemas']['Alias'] | null
      /**
       * Format: int64
       * @description Reward of the baker (delegate), produced the block, in which the operation was included
       */
      accuserRewards?: number
      /** @description Information about the baker (delegate), accused for producing two different blocks at the same height */
      offender?: Components['schemas']['Alias'] | null
      /**
       * Format: int64
       * @description Amount of frozen security deposit, lost by accused baker (delegate)
       */
      offenderLostDeposits?: number
      /**
       * Format: int64
       * @description Amount of frozen rewards, lost by accused baker (delegate)
       */
      offenderLostRewards?: number
      /**
       * Format: int64
       * @description Amount of frozen fees, lost by accused baker (delegate)
       */
      offenderLostFees?: number
      /** @description Injected historical quote at the time of operation */
      quote?: Components['schemas']['QuoteShort'] | null
    }
    DoubleEndorsingOperation: Components['schemas']['Operation'] & {
      /**
       * @description Type of the operation, `double_endorsing` - is used by bakers to provide evidence of double endorsement
       * (endorsing two different blocks at the same block height) by a baker
       */
      type?: string | null
      /**
       * Format: int32
       * @description Unique ID of the operation, stored in the TzKT indexer database
       */
      id?: number
      /**
       * Format: int32
       * @description The height of the block from the genesis block, in which the operation was included
       */
      level?: number
      /**
       * Format: date-time
       * @description Datetime of the block, in which the operation was included (ISO 8601, e.g. `2020-02-20T02:40:57Z`)
       */
      timestamp?: string
      /** @description Hash of the block, in which the operation was included */
      block?: string | null
      /** @description Hash of the operation */
      hash?: string | null
      /**
       * Format: int32
       * @description The height of the block from the genesis block, at which double endorsing occurred
       */
      accusedLevel?: number
      /** @description Information about the baker (delegate), produced the block, in which the operation was included */
      accuser?: Components['schemas']['Alias'] | null
      /**
       * Format: int64
       * @description Reward of the baker (delegate), produced the block, in which the operation was included
       */
      accuserRewards?: number
      /** @description Information about the baker (delegate), accused for producing two different endorsements at the same height */
      offender?: Components['schemas']['Alias'] | null
      /**
       * Format: int64
       * @description Amount of frozen security deposit, lost by accused baker (delegate)
       */
      offenderLostDeposits?: number
      /**
       * Format: int64
       * @description Amount of frozen rewards, lost by accused baker (delegate)
       */
      offenderLostRewards?: number
      /**
       * Format: int64
       * @description Amount of frozen fees, lost by accused baker (delegate)
       */
      offenderLostFees?: number
      /** @description Injected historical quote at the time of operation */
      quote?: Components['schemas']['QuoteShort'] | null
    }
    NonceRevelationOperation: Components['schemas']['Operation'] & {
      /** @description Type of the operation, `nonce_revelation` - are used by the blockchain to create randomness */
      type?: string | null
      /**
       * Format: int32
       * @description Unique ID of the operation, stored in the TzKT indexer database
       */
      id?: number
      /**
       * Format: int32
       * @description The height of the block from the genesis block, in which the operation was included
       */
      level?: number
      /**
       * Format: date-time
       * @description Datetime of the block, in which the operation was included (ISO 8601, e.g. `2020-02-20T02:40:57Z`)
       */
      timestamp?: string
      /** @description Hash of the block, in which the operation was included */
      block?: string | null
      /** @description Hash of the operation */
      hash?: string | null
      /** @description Information about the delegate (baker), who produced the block with the operation */
      baker?: Components['schemas']['Alias'] | null
      /**
       * Format: int64
       * @description Reward amount paid to baker, included this operation into a block
       */
      bakerRewards?: number
      /** @description Information about the delegate (baker), who revealed the nonce (sent the operation) */
      sender?: Components['schemas']['Alias'] | null
      /**
       * Format: int32
       * @description Block height of the block, where seed nonce hash is stored
       */
      revealedLevel?: number
      /** @description Injected historical quote at the time of operation */
      quote?: Components['schemas']['QuoteShort'] | null
    }
    DelegationOperation: Components['schemas']['Operation'] & {
      /** @description Type of the operation, `delegation` -  is used to delegate funds to a delegate (an implicit account registered as a baker) */
      type?: string | null
      /**
       * Format: int32
       * @description Unique ID of the operation, stored in the TzKT indexer database
       */
      id?: number
      /**
       * Format: int32
       * @description The height of the block from the genesis block, in which the operation was included
       */
      level?: number
      /**
       * Format: date-time
       * @description Datetime of the block, in which the operation was included (ISO 8601, e.g. `2020-02-20T02:40:57Z`)
       */
      timestamp?: string
      /** @description Hash of the block, in which the operation was included */
      block?: string | null
      /** @description Hash of the operation */
      hash?: string | null
      /**
       * Format: int32
       * @description An account nonce which is used to prevent operation replay
       */
      counter?: number
      /** @description Information about the initiator of the delegation contract call */
      initiator?: Components['schemas']['Alias'] | null
      /** @description Information about the delegated account */
      sender?: Components['schemas']['Alias'] | null
      /**
       * Format: int32
       * @description An account nonce which is used to prevent internal operation replay
       */
      nonce?: number | null
      /**
       * Format: int32
       * @description A cap on the amount of gas a given operation can consume
       */
      gasLimit?: number
      /**
       * Format: int32
       * @description Amount of gas, consumed by the operation
       */
      gasUsed?: number
      /**
       * Format: int64
       * @description Fee to a baker, produced block, in which the operation was included
       */
      bakerFee?: number
      /**
       * Format: int64
       * @description Sender's balance at the time of delegation operation (aka delegation amount).
       */
      amount?: number
      /** @description Information about the previous delegate of the account. `null` if there is no previous delegate */
      prevDelegate?: Components['schemas']['Alias'] | null
      /** @description Information about the delegate to which the operation was sent. `null` if there is no new delegate (an undelegation operation) */
      newDelegate?: Components['schemas']['Alias'] | null
      /**
       * @description Operation status (`applied` - an operation applied by the node and successfully added to the blockchain,
       * `failed` - an operation which failed with some particular error (not enough balance, gas limit, etc),
       * `backtracked` - an operation which was successful but reverted due to one of the following operations in the same operation group was failed,
       * `skipped` - all operations after the failed one in an operation group)
       */
      status?: string | null
      /** @description List of errors provided by the node, injected the operation to the blockchain. `null` if there is no errors */
      errors?: Components['schemas']['OperationError'][] | null
      /** @description Injected historical quote at the time of operation */
      quote?: Components['schemas']['QuoteShort'] | null
    }
    OperationError: {
      type: string
    }
    BaseOperationError: Components['schemas']['OperationError'] & {
      /**
       * @description Type of an error
       * https://tezos.gitlab.io/api/errors.html - full list of errors
       */
      type?: string | null
    }
    BalanceTooLowError: Components['schemas']['OperationError'] & {
      /**
       * @description Type of an error, `contract.balance_too_low` - an operation tried to spend more then the contract has
       * https://tezos.gitlab.io/api/errors.html - full list of errors
       */
      type?: string | null
      /**
       * Format: int64
       * @description Balance of the contract
       */
      balance?: number
      /**
       * Format: int64
       * @description Required balance to send the operation
       */
      required?: number
    }
    NonExistingContractError: Components['schemas']['OperationError'] & {
      /**
       * @description Type of an error, `contract.non_existing_contract` - the operation was sent to non-existent contract
       * https://tezos.gitlab.io/api/errors.html - full list of errors
       */
      type?: string | null
      /** @description Public key hash of the account to which in the operation tried to send to */
      contract?: string | null
    }
    UnregisteredDelegateError: Components['schemas']['OperationError'] & {
      /**
       * @description Type of an error, `contract.manager.unregistered_delegate` - an operation of delegation was sent to an account,
       * not registered as a delegate (baker)
       * https://tezos.gitlab.io/api/errors.html - full list of errors
       */
      type?: string | null
      /** @description Public key hash of the account to which in the operation tried to delegate to */
      delegate?: string | null
    }
    ExpressionAlreadyRegisteredError: Components['schemas']['OperationError'] & {
      /**
       * @description Type of an error, `Expression_already_registered` - an operation tried to register
       * an already existing global consant
       * https://tezos.gitlab.io/api/errors.html - full list of errors
       */
      type?: string | null
      /** @description Global address of the constant */
      expression?: string | null
    }
    OriginationOperation: Components['schemas']['Operation'] & {
      /** @description Type of the operation, `origination` - deployment / contract creation operation. */
      type?: string | null
      /**
       * Format: int32
       * @description Unique ID of the operation, stored in the TzKT indexer database
       */
      id?: number
      /**
       * Format: int32
       * @description The height of the block from the genesis block, in which the operation was included
       */
      level?: number
      /**
       * Format: date-time
       * @description Datetime of the block, in which the operation was included (ISO 8601, e.g. `2020-02-20T02:40:57Z`)
       */
      timestamp?: string
      /** @description Hash of the block, in which the operation was included */
      block?: string | null
      /** @description Hash of the operation */
      hash?: string | null
      /**
       * Format: int32
       * @description An account nonce which is used to prevent operation replay
       */
      counter?: number
      /** @description Information about the initiator of the contract call */
      initiator?: Components['schemas']['Alias'] | null
      /** @description Information about the account, created a contract */
      sender?: Components['schemas']['Alias'] | null
      /**
       * Format: int32
       * @description An account nonce which is used to prevent internal operation replay
       */
      nonce?: number | null
      /**
       * Format: int32
       * @description A cap on the amount of gas a given operation can consume
       */
      gasLimit?: number
      /**
       * Format: int32
       * @description Amount of gas, consumed by the operation
       */
      gasUsed?: number
      /**
       * Format: int32
       * @description A cap on the amount of storage a given operation can consume
       */
      storageLimit?: number
      /**
       * Format: int32
       * @description Amount of storage, consumed by the operation
       */
      storageUsed?: number
      /**
       * Format: int64
       * @description Fee to the baker, produced block, in which the operation was included (micro tez)
       */
      bakerFee?: number
      /**
       * Format: int64
       * @description The amount of funds burned from the sender account for contract storage in the blockchain (micro tez)
       */
      storageFee?: number
      /**
       * Format: int64
       * @description The amount of funds burned from the sender account for contract account creation (micro tez)
       */
      allocationFee?: number
      /**
       * Format: int64
       * @description The contract origination balance (micro tez)
       */
      contractBalance?: number
      /** @description Information about the account, which was marked as a manager in the operation */
      contractManager?: Components['schemas']['Alias'] | null
      /** @description Information about the baker (delegate), which was marked as a delegate in the operation */
      contractDelegate?: Components['schemas']['Alias'] | null
      /** @description Contract code. Note: you can configure code format by setting `micheline` query parameter (`0 | 2` - raw micheline, `1 | 3` - raw micheline string). */
      code?: unknown | null
      /** @description Initial contract storage value converted to human-readable JSON. Note: you can configure storage format by setting `micheline` query parameter. */
      storage?: unknown | null
      /** @description List of bigmap updates (aka big_map_diffs) caused by the origination. */
      diffs?: Components['schemas']['BigMapDiff'][] | null
      /**
       * @description Operation status (`applied` - an operation applied by the node and successfully added to the blockchain,
       * `failed` - an operation which failed with some particular error (not enough balance, gas limit, etc),
       * `backtracked` - an operation which was a successful but reverted due to one of the following operations in the same operation group was failed,
       * `skipped` - all operations after the failed one in an operation group)
       */
      status?: string | null
      /** @description List of errors provided by the node, injected the operation to the blockchain. `null` if there is no errors */
      errors?: Components['schemas']['OperationError'][] | null
      /** @description Information about the originated ( deployed / created ) contract */
      originatedContract?: Components['schemas']['OriginatedContract'] | null
      /** @description Injected historical quote at the time of operation */
      quote?: Components['schemas']['QuoteShort'] | null
    }
    BigMapDiff: {
      /**
       * Format: int32
       * @description Bigmap Id
       */
      bigmap?: number
      /** @description Path to the bigmap in the contract storage */
      path?: string | null
      /** @description Action with the bigmap (`allocate`, `add_key`, `update_key`, `remove_key`, `remove`) */
      action?: string | null
      /**
       * @description Affected key.
       * If the action is `allocate` or `remove` the key will be `null`.
       */
      content?: Components['schemas']['BigMapKeyShort'] | null
    }
    BigMapKeyShort: {
      /** @description Key hash */
      hash?: string | null
      /** @description Key in JSON or Micheline format, depending on the `micheline` query parameter. */
      key?: unknown | null
      /**
       * @description Value in JSON or Micheline format, depending on the `micheline` query parameter.
       * Note, if the action is `remove_key` it will contain the last non-null value.
       */
      value?: unknown | null
    }
    OriginatedContract: {
      /**
       * @description Kind of the contract (`delegator_contract` or `smart_contract`),
       * where `delegator_contract` - manager.tz smart contract for delegation purpose only
       */
      kind?: string | null
      /** @description Name of the project behind the contract or contract description */
      alias?: string | null
      /** @description Public key hash of the contract */
      address?: string | null
      /**
       * Format: int32
       * @description 32-bit hash of the contract parameter and storage types.
       * This field can be used for searching similar contracts (which have the same interface).
       */
      typeHash?: number
      /**
       * Format: int32
       * @description 32-bit hash of the contract code.
       * This field can be used for searching same contracts (which have the same script).
       */
      codeHash?: number
    }
    TransactionOperation: Components['schemas']['Operation'] & {
      /** @description Type of the operation, `transaction` - is a standard operation used to transfer tezos tokens to an account */
      type?: string | null
      /**
       * Format: int32
       * @description Unique ID of the operation, stored in the TzKT indexer database
       */
      id?: number
      /**
       * Format: int32
       * @description The height of the block from the genesis block, in which the operation was included
       */
      level?: number
      /**
       * Format: date-time
       * @description Datetime of the block, in which the operation was included (ISO 8601, e.g. `2020-02-20T02:40:57Z`)
       */
      timestamp?: string
      /** @description Hash of the block, in which the operation was included */
      block?: string | null
      /** @description Hash of the operation */
      hash?: string | null
      /**
       * Format: int32
       * @description An account nonce which is used to prevent operation replay
       */
      counter?: number
      /** @description Information about the initiator of the transaction call */
      initiator?: Components['schemas']['Alias'] | null
      /** @description Information about the account sent the transaction */
      sender?: Components['schemas']['Alias'] | null
      /**
       * Format: int32
       * @description An account nonce which is used to prevent internal operation replay
       */
      nonce?: number | null
      /**
       * Format: int32
       * @description A cap on the amount of gas a given operation can consume
       */
      gasLimit?: number
      /**
       * Format: int32
       * @description Amount of gas, consumed by the operation
       */
      gasUsed?: number
      /**
       * Format: int32
       * @description A cap on the amount of storage a given operation can consume
       */
      storageLimit?: number
      /**
       * Format: int32
       * @description Amount of storage, consumed by the operation
       */
      storageUsed?: number
      /**
       * Format: int64
       * @description Fee to the baker, produced block, in which the operation was included (micro tez)
       */
      bakerFee?: number
      /**
       * Format: int64
       * @description The amount of funds burned from the sender account for used the blockchain storage (micro tez)
       */
      storageFee?: number
      /**
       * Format: int64
       * @description The amount of funds burned from the sender account for account creation (micro tez)
       */
      allocationFee?: number
      /** @description Information about the target of the transaction */
      target?: Components['schemas']['Alias'] | null
      /**
       * Format: int64
       * @description The transaction amount (micro tez)
       */
      amount?: number
      /** @description Transaction parameter, including called entrypoint and value passed to the entrypoint. */
      parameter?: Components['schemas']['TxParameter'] | null
      /** @description Contract storage after executing the transaction converted to human-readable JSON. Note: you can configure storage format by setting `micheline` query parameter. */
      storage?: unknown | null
      /** @description List of bigmap updates (aka big_map_diffs) caused by the transaction. */
      diffs?: Components['schemas']['BigMapDiff'][] | null
      /**
       * @description Operation status (`applied` - an operation applied by the node and successfully added to the blockchain,
       * `failed` - an operation which failed with some particular error (not enough balance, gas limit, etc),
       * `backtracked` - an operation which was successful but reverted due to one of the following operations in the same operation group was failed,
       * `skipped` - all operations after the failed one in an operation group)
       */
      status?: string | null
      /** @description List of errors provided by the node, injected the operation to the blockchain. `null` if there is no errors */
      errors?: Components['schemas']['OperationError'][] | null
      /**
       * @description An indication of whether the transaction has an internal operations
       * `true` - there are internal operations
       * `false` - no internal operations
       */
      hasInternals?: boolean
      /** @description Injected historical quote at the time of operation */
      quote?: Components['schemas']['QuoteShort'] | null
    }
    TxParameter: {
      /** @description Entrypoint called on the target contract */
      entrypoint?: string | null
      /** @description Value passed to the called entrypoint converted to human-readable JSON. Note: you can configure parameters format by setting `micheline` query parameter. */
      value?: unknown | null
    }
    RevealOperation: Components['schemas']['Operation'] & {
      /** @description Type of the operation, `reveal` - is used to reveal the public key associated with an account */
      type?: string | null
      /**
       * Format: int32
       * @description Unique ID of the operation, stored in the TzKT indexer database
       */
      id?: number
      /**
       * Format: int32
       * @description The height of the block from the genesis block, in which the operation was included
       */
      level?: number
      /**
       * Format: date-time
       * @description Datetime of the block, in which the operation was included (ISO 8601, e.g. `2020-02-20T02:40:57Z`)
       */
      timestamp?: string
      /** @description Hash of the block, in which the operation was included */
      block?: string | null
      /** @description Hash of the operation */
      hash?: string | null
      /** @description Information about the account who has sent the operation */
      sender?: Components['schemas']['Alias'] | null
      /**
       * Format: int32
       * @description An account nonce which is used to prevent operation replay
       */
      counter?: number
      /**
       * Format: int32
       * @description A cap on the amount of gas a given operation can consume
       */
      gasLimit?: number
      /**
       * Format: int32
       * @description Amount of gas, consumed by the operation
       */
      gasUsed?: number
      /**
       * Format: int64
       * @description Fee to the baker, produced block, in which the operation was included (micro tez)
       */
      bakerFee?: number
      /**
       * @description Operation status (`applied` - an operation applied by the node and successfully added to the blockchain,
       * `failed` - an operation which failed with some particular error (not enough balance, gas limit, etc),
       * `backtracked` - an operation which was successful but reverted due to one of the following operations in the same operation group was failed,
       * `skipped` - all operations after the failed one in an operation group)
       */
      status?: string | null
      /** @description List of errors provided by the node, injected the operation to the blockchain. `null` if there is no errors */
      errors?: Components['schemas']['OperationError'][] | null
      /** @description Injected historical quote at the time of operation */
      quote?: Components['schemas']['QuoteShort'] | null
    }
    MigrationOperation: Components['schemas']['Operation'] & {
      /** @description Type of the operation, `migration` - result of the context (database) migration during a protocol update (synthetic type) */
      type?: string | null
      /**
       * Format: int32
       * @description Unique ID of the operation, stored in the TzKT indexer database
       */
      id?: number
      /**
       * Format: int32
       * @description The height of the block from the genesis block, in which the operation was included
       */
      level?: number
      /**
       * Format: date-time
       * @description Datetime of the block, in which the operation was included (ISO 8601, e.g. `2020-02-20T02:40:57Z`)
       */
      timestamp?: string
      /** @description Hash of the block, in which the operation was included */
      block?: string | null
      /**
       * @description Kind of the migration
       * `bootstrap` - balance updates, included in the first block after genesis
       * `activate_delegate` - registering a new baker (delegator) during protocol migration
       * `airdrop` - airdrop of 1 micro tez during Babylon protocol upgrade
       * `proposal_invoice` - invoice for creation a proposal for protocol upgrade
       * `code_change` - changing contract scripts during Babylon protocol upgrade
       * `origination` - implicit (hardcoded in the protocol) origination of liquidity baking contracts
       * `subsidy` - liquidity baking subsidy
       */
      kind?: string | null
      /** @description Information about the account whose balance has updated as a result of the operation */
      account?: Components['schemas']['Alias'] | null
      /**
       * Format: int64
       * @description The amount for which the operation updated the balance (micro tez)
       */
      balanceChange?: number
      /** @description Contract storage after the migration converted to human-readable JSON. Note: you can configure storage format by setting `micheline` query parameter. */
      storage?: unknown | null
      /** @description List of bigmap updates caused by the migration. */
      diffs?: Components['schemas']['BigMapDiff'][] | null
      /** @description Injected historical quote at the time of operation */
      quote?: Components['schemas']['QuoteShort'] | null
    }
    RevelationPenaltyOperation: Components['schemas']['Operation'] & {
      /** @description Type of the operation, `revelation_penalty` - is operation, in which rewards were lost due to unrevealed seed nonces by the delegate (synthetic type) */
      type?: string | null
      /**
       * Format: int32
       * @description Unique ID of the operation, stored in the TzKT indexer database
       */
      id?: number
      /**
       * Format: int32
       * @description The height of the block from the genesis block, in which the operation was included
       */
      level?: number
      /**
       * Format: date-time
       * @description Datetime of the block, in which the operation was included (ISO 8601, e.g. `2020-02-20T02:40:57Z`)
       */
      timestamp?: string
      /** @description Hash of the block, in which the operation was included */
      block?: string | null
      /** @description Information about the delegate (baker) who has lost rewards due to unrevealed seed nonces */
      baker?: Components['schemas']['Alias'] | null
      /**
       * Format: int32
       * @description Height of the block, which contains hash of the seed nonce, which was to be revealed
       */
      missedLevel?: number
      /**
       * Format: int64
       * @description Reward for baking the block, which was lost due to unrevealed seed nonces (micro tez)
       */
      lostReward?: number
      /**
       * Format: int64
       * @description Lost due to unrevealed seed nonce total fee paid by all operations, included in the block, which was to be revealed (micro tez)
       */
      lostFees?: number
      /** @description Injected historical quote at the time of operation */
      quote?: Components['schemas']['QuoteShort'] | null
    }
    BakingOperation: Components['schemas']['Operation'] & {
      /** @description Type of the operation, `baking` - an operation which contains brief information about a baked (produced) block (synthetic type) */
      type?: string | null
      /**
       * Format: int32
       * @description Unique ID of the operation, stored in the TzKT indexer database
       */
      id?: number
      /**
       * Format: int32
       * @description The height of the block from the genesis block
       */
      level?: number
      /**
       * Format: date-time
       * @description The datetime at which the block is claimed to have been created (ISO 8601, e.g. `2020-02-20T02:40:57Z`)
       */
      timestamp?: string
      /** @description Block hash */
      block?: string | null
      /** @description Information about a delegate (baker), produced the block */
      baker?: Components['schemas']['Alias'] | null
      /**
       * Format: int32
       * @description The position in the priority list of delegates at which the block was baked
       */
      priority?: number
      /**
       * Format: int64
       * @description Security deposit frozen on the baker's account for producing the block (micro tez)
       */
      deposit?: number
      /**
       * Format: int64
       * @description Reward of the baker for producing the block (micro tez)
       */
      reward?: number
      /**
       * Format: int64
       * @description Total fee paid by all operations, included in the block
       */
      fees?: number
      /** @description Injected historical quote at the time of operation */
      quote?: Components['schemas']['QuoteShort'] | null
    }
    DateTimeParameter: {
      /**
       * Format: date-time
       * @description **Equal** filter mode (optional, i.e. `param.eq=2020-01-01` is the same as `param=2020-01-01`). \
       * Specify a datetime to get items where the specified field is equal to the specified value.
       *
       * Example: `?timestamp=2020-02-20T02:40:57Z`.
       */
      eq?: string | null
      /**
       * Format: date-time
       * @description **Not equal** filter mode. \
       * Specify a datetime to get items where the specified field is not equal to the specified value.
       *
       * Example: `?timestamp.ne=2020-02-20T02:40:57Z`.
       */
      ne?: string | null
      /**
       * Format: date-time
       * @description **Greater than** filter mode. \
       * Specify a datetime to get items where the specified field is greater than the specified value.
       *
       * Example: `?timestamp.gt=2020-02-20T02:40:57Z`.
       */
      gt?: string | null
      /**
       * Format: date-time
       * @description **Greater or equal** filter mode. \
       * Specify a datetime to get items where the specified field is greater than equal to the specified value.
       *
       * Example: `?timestamp.ge=2020-02-20T02:40:57Z`.
       */
      ge?: string | null
      /**
       * Format: date-time
       * @description **Less than** filter mode. \
       * Specify a datetime to get items where the specified field is less than the specified value.
       *
       * Example: `?timestamp.lt=2020-02-20T02:40:57Z`.
       */
      lt?: string | null
      /**
       * Format: date-time
       * @description **Less or equal** filter mode. \
       * Specify a datetime to get items where the specified field is less than or equal to the specified value.
       *
       * Example: `?timestamp.le=2020-02-20T02:40:57Z`.
       */
      le?: string | null
      /**
       * @description **In list** (any of) filter mode. \
       * Specify a comma-separated list of datetimes to get items where the specified field is equal to one of the specified values.
       *
       * Example: `?timestamp.in=2020-02-20,2020-02-21`.
       */
      in?: string[] | null
      /**
       * @description **Not in list** (none of) filter mode. \
       * Specify a comma-separated list of datetimes to get items where the specified field is not equal to all the specified values.
       *
       * Example: `?timestamp.ni=2020-02-20,2020-02-21`.
       */
      ni?: string[] | null
    }
    StringParameter: {
      /**
       * @description **Equal** filter mode (optional, i.e. `param.eq=123` is the same as `param=123`). \
       * Specify a string to get items where the specified field is equal to the specified value.
       *
       * Example: `?parameters=abc`.
       */
      eq?: string | null
      /**
       * @description **Not equal** filter mode. \
       * Specify a string to get items where the specified field is not equal to the specified value.
       *
       * Example: `?parameters.ne=abc`.
       */
      ne?: string | null
      /**
       * @description **Same as** filter mode. \
       * Specify a string template to get items where the specified field matches the specified template. \
       * This mode supports wildcard `*`. Use `\*` as an escape symbol.
       *
       * Example: `?parameters.as=*mid*` or `?parameters.as=*end`.
       */
      as?: string | null
      /**
       * @description **Unlike** filter mode. \
       * Specify a string template to get items where the specified field doesn't match the specified template.
       * This mode supports wildcard `*`. Use `\*` as an escape symbol.
       *
       * Example: `?parameters.un=*mid*` or `?parameters.un=*end`.
       */
      un?: string | null
      /**
       * @description **In list** (any of) filter mode. \
       * Specify a comma-separated list of strings to get items where the specified field is equal to one of the specified values. \
       * Use `\,` as an escape symbol.
       *
       * Example: `?errors.in=bla,bal,abl`.
       */
      in?: string[] | null
      /**
       * @description **Not in list** (none of) filter mode. \
       * Specify a comma-separated list of strings to get items where the specified field is not equal to all the specified values. \
       * Use `\,` as an escape symbol.
       *
       * Example: `?errors.ni=bla,bal,abl`.
       */
      ni?: string[] | null
      /**
       * @description **Is null** filter mode. \
       * Use this mode to get items where the specified field is null or not.
       *
       * Example: `?parameters.null` or `?parameters.null=false`.
       */
      null?: boolean | null
    }
    JsonParameter: {
      /**
       * @description **Equal** filter mode (optional, i.e. `param.eq=123` is the same as `param=123`). \
       * Specify a JSON value to get items where the specified field is equal to the specified value.
       *
       * Example: `?parameter.from=tz1...` or `?parameter.signatures.[3].[0]=null` or `?parameter.sigs.[*]=null`.
       */
      eq?: string | null
      /**
       * @description **Not equal** filter mode. \
       * Specify a JSON value to get items where the specified field is not equal to the specified value.
       *
       * Example: `?parameter.ne=true` or `?parameter.amount.ne=0`.
       */
      ne?: string | null
      /**
       * @description **Greater than** filter mode. \
       * Specify a string to get items where the specified field is greater than the specified value.
       * Note that all stored JSON values are strings, so this will be a comparison of two strings, so we recommend comparing values of the same type,
       * e.g. numeric strings with numeric strings (`parameter.number.gt=123`), datetime strings with datetime strings (`parameter.date.gt=2021-01-01`), etc.
       * Otherwise, result may surprise you.
       *
       * Example: `?parameter.balance.gt=1234` or `?parameter.time.gt=2021-02-01`.
       */
      gt?: string | null
      /**
       * @description **Greater or equal** filter mode. \
       * Specify a string to get items where the specified field is greater than equal to the specified value.
       * Note that all stored JSON values are strings, so this will be a comparison of two strings, so we recommend comparing values of the same type,
       * e.g. numeric strings with numeric strings (`parameter.number.gt=123`), datetime strings with datetime strings (`parameter.date.gt=2021-01-01`), etc.
       * Otherwise, result may surprise you.
       *
       * Example: `?parameter.balance.ge=1234` or `?parameter.time.ge=2021-02-01`.
       */
      ge?: string | null
      /**
       * @description **Less than** filter mode. \
       * Specify a string to get items where the specified field is less than the specified value.
       * Note that all stored JSON values are strings, so this will be a comparison of two strings, so we recommend comparing values of the same type,
       * e.g. numeric strings with numeric strings (`parameter.number.gt=123`), datetime strings with datetime strings (`parameter.date.gt=2021-01-01`), etc.
       * Otherwise, result may surprise you.
       *
       * Example: `?parameter.balance.lt=1234` or `?parameter.time.lt=2021-02-01`.
       */
      lt?: string | null
      /**
       * @description **Less or equal** filter mode. \
       * Specify a string to get items where the specified field is less than or equal to the specified value.
       * Note that all stored JSON values are strings, so this will be a comparison of two strings, so we recommend comparing values of the same type,
       * e.g. numeric strings with numeric strings (`parameter.number.gt=123`), datetime strings with datetime strings (`parameter.date.gt=2021-01-01`), etc.
       * Otherwise, result may surprise you.
       *
       * Example: `?parameter.balance.le=1234` or `?parameter.time.le=2021-02-01`.
       */
      le?: string | null
      /**
       * @description **Same as** filter mode. \
       * Specify a string template to get items where the specified field matches the specified template. \
       * This mode supports wildcard `*`. Use `\*` as an escape symbol.
       *
       * Example: `?parameter.as=*mid*` or `?parameter.as=*end`.
       */
      as?: string | null
      /**
       * @description **Unlike** filter mode. \
       * Specify a string template to get items where the specified field doesn't match the specified template.
       * This mode supports wildcard `*`. Use `\*` as an escape symbol.
       *
       * Example: `?parameter.un=*mid*` or `?parameter.un=*end`.
       */
      un?: string | null
      /**
       * @description **In list** (any of) filter mode. \
       * Specify a comma-separated list of strings or JSON array to get items where the specified field is equal to one of the specified values. \
       *
       * Example: `?parameter.amount.in=1,2,3` or `?parameter.in=[{"from":"tz1","to":"tz2"},{"from":"tz2","to":"tz1"}]`.
       */
      in?: string[] | null
      /**
       * @description **Not in list** (none of) filter mode. \
       * Specify a comma-separated list of strings to get items where the specified field is not equal to all the specified values. \
       * Use `\,` as an escape symbol.
       *
       * Example: `?parameter.amount.ni=1,2,3` or `?parameter.ni=[{"from":"tz1","to":"tz2"},{"from":"tz2","to":"tz1"}]`.
       */
      ni?: string[] | null
      /**
       * @description **Is null** filter mode. \
       * Use this mode to get items where the specified field is null or not.
       *
       * Example: `?parameter.null` or `?parameter.null=false` or `?parameter.sigs.[0].null=false`.
       */
      null?: boolean
    }
    OperationStatusParameter: {
      /**
       * @description **Equal** filter mode (optional, i.e. `param.eq=applied` is the same as `param=applied`). \
       * Specify an operation status to get items where the specified field is equal to the specified value.
       *
       * Example: `?type=failed`.
       */
      eq?: string | null
      /**
       * @description **Not equal** filter mode. \
       * Specify an operation status to get items where the specified field is not equal to the specified value.
       *
       * Example: `?type.ne=applied`.
       */
      ne?: string | null
    }
    /** @enum {string} */
    SortMode: 'Ascending' | 'Descending'
    /** @enum {string} */
    MichelineFormat: 'Json' | 'JsonString' | 'Raw' | 'RawString'
    /** @enum {string} */
    Symbols:
      | 'none'
      | 'btc'
      | 'eur'
      | 'usd'
      | 'cny'
      | 'Jjy'
      | 'krw'
      | 'eth'
      | 'gbp'
    HistoricalBalance: {
      /**
       * Format: int32
       * @description Height of the block at which the account balance was calculated
       */
      level?: number
      /**
       * Format: date-time
       * @description Timestamp of the block at which the account balance was calculated
       */
      timestamp?: string
      /**
       * Format: int64
       * @description Historical balance
       */
      balance?: number
      /** @description Injected historical quote at the time of balance snapshot */
      quote?: Components['schemas']['QuoteShort'] | null
    }
    BigMap: {
      /**
       * Format: int32
       * @description Bigmap pointer
       */
      ptr?: number
      /** @description Smart contract in which's storage the bigmap is allocated */
      contract?: Components['schemas']['Alias'] | null
      /** @description Path to the bigmap in the contract storage */
      path?: string | null
      /** @description List of tags (`token_metadata` - tzip-12, `metadata` - tzip-16, `null` - no tags) */
      tags?: string[] | null
      /** @description Bigmap status (`true` - active, `false` - removed) */
      active?: boolean
      /**
       * Format: int32
       * @description Level of the block where the bigmap was seen first time
       */
      firstLevel?: number
      /**
       * Format: int32
       * @description Level of the block where the bigmap was seen last time
       */
      lastLevel?: number
      /**
       * Format: int32
       * @description Total number of keys ever added to the bigmap
       */
      totalKeys?: number
      /**
       * Format: int32
       * @description Total number of currently active keys
       */
      activeKeys?: number
      /**
       * Format: int32
       * @description Total number of actions with the bigmap
       */
      updates?: number
      /** @description Bigmap key type as JSON schema or Micheline, depending on the `micheline` query parameter. */
      keyType?: unknown | null
      /** @description Bigmap value type as JSON schema or Micheline, depending on the `micheline` query parameter. */
      valueType?: unknown | null
    }
    BigMapTagsParameter: {
      /**
       * @description **Equal** filter mode (optional, i.e. `param.eq=123` is the same as `param=123`). \
       * Specify a comma-separated list of bigmap tags to get bigmaps with exactly the same set of tags.
       *
       * Example: `?tags=metadata` or `?tags=token_metadata,metadata`.
       */
      eq?: string[] | null
      /**
       * @description **Has any** filter mode. \
       * Specify a comma-separated list of bigmap tags to get bigmaps where at least one of the specified tags is presented.
       *
       * Example: `?tags=metadata` or `?tags=token_metadata,metadata`.
       */
      any?: string[] | null
      /**
       * @description **Has all** filter mode. \
       * Specify a comma-separated list of bigmap tags to get bigmaps where all of the specified tags are presented.
       *
       * Example: `?tags=metadata` or `?tags=token_metadata,metadata`.
       */
      all?: string[] | null
    }
    BigMapUpdate: {
      /**
       * Format: int32
       * @description Internal Id, can be used for pagination
       */
      id?: number
      /**
       * Format: int32
       * @description Level of the block where the bigmap was updated
       */
      level?: number
      /**
       * Format: date-time
       * @description Timestamp of the block where the bigmap was updated
       */
      timestamp?: string
      /**
       * Format: int32
       * @description Bigmap ptr
       */
      bigmap?: number
      /** @description Smart contract in which's storage the bigmap is allocated */
      contract?: Components['schemas']['Alias'] | null
      /** @description Path to the bigmap in the contract storage */
      path?: string | null
      /** @description Action with the bigmap (`allocate`, `add_key`, `update_key`, `remove_key`, `remove`) */
      action?: string | null
      /**
       * @description Updated key.
       * If the action is `allocate` or `remove` the content will be `null`.
       */
      content?: Components['schemas']['BigMapKeyShort'] | null
    }
    BigMapActionParameter: {
      /**
       * @description **Equal** filter mode (optional, i.e. `param.eq=123` is the same as `param=123`). \
       * Specify a contract kind to get items where the specified field is equal to the specified value.
       *
       * Example: `?kind=smart_contract`.
       */
      eq?: string | null
      /**
       * @description **Not equal** filter mode. \
       * Specify a contract kind to get items where the specified field is not equal to the specified value.
       *
       * Example: `?kind.ne=delegator_contract`.
       */
      ne?: string | null
      /**
       * @description **In list** (any of) filter mode. \
       * Specify a comma-separated list of contract kinds to get items where the specified field is equal to one of the specified values.
       *
       * Example: `?kind.in=smart_contract,asset`.
       */
      in?: string[] | null
      /**
       * @description **Not in list** (none of) filter mode. \
       * Specify a comma-separated list of contract kinds to get items where the specified field is not equal to all the specified values.
       *
       * Example: `?kind.ni=smart_contract,asset`.
       */
      ni?: string[] | null
    }
    TimestampParameter: {
      /**
       * Format: date-time
       * @description **Equal** filter mode (optional, i.e. `param.eq=123` is the same as `param=123`). \
       * Specify a datetime value to get items where the specified field is equal to the specified value.
       *
       * Example: `?timestamp=2020-02-20T02:40:57Z`.
       */
      eq?: string | null
      /**
       * Format: date-time
       * @description **Not equal** filter mode. \
       * Specify a datetime value to get items where the specified field is not equal to the specified value.
       *
       * Example: `?timestamp.ne=2020-02-20T02:40:57Z`.
       */
      ne?: string | null
      /**
       * Format: date-time
       * @description **Greater than** filter mode. \
       * Specify a datetime value to get items where the specified field is greater than the specified value.
       *
       * Example: `?timestamp.gt=2020-02-20T02:40:57Z`.
       */
      gt?: string | null
      /**
       * Format: date-time
       * @description **Greater or equal** filter mode. \
       * Specify a datetime value to get items where the specified field is greater than equal to the specified value.
       *
       * Example: `?timestamp.ge=2020-02-20T02:40:57Z`.
       */
      ge?: string | null
      /**
       * Format: date-time
       * @description **Less than** filter mode. \
       * Specify a datetime value to get items where the specified field is less than the specified value.
       *
       * Example: `?timestamp.lt=2020-02-20T02:40:57Z`.
       */
      lt?: string | null
      /**
       * Format: date-time
       * @description **Less or equal** filter mode. \
       * Specify a datetime value to get items where the specified field is less than or equal to the specified value.
       *
       * Example: `?timestamp.le=2020-02-20T02:40:57Z`.
       */
      le?: string | null
      /**
       * @description **In list** (any of) filter mode. \
       * Specify a comma-separated list of datetimes to get items where the specified field is equal to one of the specified values.
       *
       * Example: `?timestamp.in=2020-02-20,2020-02-21`.
       */
      in?: string[] | null
      /**
       * @description **Not in list** (none of) filter mode. \
       * Specify a comma-separated list of datetimes to get items where the specified field is not equal to all the specified values.
       *
       * Example: `?timestamp.ni=2020-02-20,2020-02-21`.
       */
      ni?: string[] | null
    }
    MichelinePrim: {
      prim?: Components['schemas']['PrimType']
      args?: Components['schemas']['IMicheline'][] | null
      annots?: Components['schemas']['IAnnotation'][] | null
    }
    /** @enum {integer} */
    PrimType:
      | 0
      | 1
      | 2
      | 3
      | 4
      | 5
      | 6
      | 7
      | 8
      | 9
      | 10
      | 11
      | 12
      | 13
      | 14
      | 15
      | 16
      | 17
      | 18
      | 19
      | 20
      | 21
      | 22
      | 23
      | 24
      | 25
      | 26
      | 27
      | 28
      | 29
      | 30
      | 31
      | 32
      | 33
      | 34
      | 35
      | 36
      | 37
      | 38
      | 39
      | 40
      | 41
      | 42
      | 43
      | 44
      | 45
      | 46
      | 47
      | 48
      | 49
      | 50
      | 51
      | 52
      | 53
      | 54
      | 55
      | 56
      | 57
      | 58
      | 59
      | 60
      | 61
      | 62
      | 63
      | 64
      | 65
      | 66
      | 67
      | 68
      | 69
      | 70
      | 71
      | 72
      | 73
      | 74
      | 75
      | 76
      | 77
      | 78
      | 79
      | 80
      | 81
      | 82
      | 83
      | 84
      | 85
      | 86
      | 87
      | 88
      | 89
      | 90
      | 91
      | 92
      | 93
      | 94
      | 95
      | 96
      | 97
      | 98
      | 99
      | 100
      | 101
      | 102
      | 103
      | 104
      | 105
      | 106
      | 107
      | 108
      | 109
      | 110
      | 111
      | 112
      | 113
      | 114
      | 115
      | 116
      | 117
      | 118
      | 119
      | 120
      | 121
      | 122
      | 123
      | 124
      | 125
      | 126
      | 127
      | 128
      | 129
      | 130
      | 131
      | 132
      | 133
      | 134
      | 135
      | 136
      | 137
      | 138
      | 139
      | 140
      | 141
      | 142
      | 143
      | 144
      | 145
      | 146
    IMicheline: {
      type?: Components['schemas']['MichelineType']
    }
    /** @enum {integer} */
    MichelineType: 0 | 32 | 64 | 96 | 128
    IAnnotation: {
      type?: Components['schemas']['AnnotationType']
      value?: string | null
    }
    /** @enum {integer} */
    AnnotationType: 0 | 64 | 128 | 192
    BigMapKey: {
      /**
       * Format: int32
       * @description Internal Id, can be used for pagination
       */
      id?: number
      /** @description Bigmap key status (`true` - active, `false` - removed) */
      active?: boolean
      /** @description Key hash */
      hash?: string | null
      /** @description Key in JSON or Micheline format, depending on the `micheline` query parameter. */
      key?: unknown | null
      /**
       * @description Value in JSON or Micheline format, depending on the `micheline` query parameter.
       * Note, if the key is inactive (removed) it will contain the last non-null value.
       */
      value?: unknown | null
      /**
       * Format: int32
       * @description Level of the block where the bigmap key was seen first time
       */
      firstLevel?: number
      /**
       * Format: int32
       * @description Level of the block where the bigmap key was seen last time
       */
      lastLevel?: number
      /**
       * Format: int32
       * @description Total number of actions with the bigmap key
       */
      updates?: number
    }
    BigMapKeyUpdate: {
      /**
       * Format: int32
       * @description Internal Id, can be used for pagination
       */
      id?: number
      /**
       * Format: int32
       * @description Level of the block where the bigmap key was updated
       */
      level?: number
      /**
       * Format: date-time
       * @description Timestamp of the block where the bigmap key was updated
       */
      timestamp?: string
      /** @description Action with the key (`add_key`, `update_key`, `remove_key`) */
      action?: string | null
      /**
       * @description Value in JSON or Micheline format, depending on the `micheline` query parameter.
       * Note, if the action is `remove_key` it will contain the last non-null value.
       */
      value?: unknown | null
    }
    BigMapKeyHistorical: {
      /**
       * Format: int32
       * @description Internal Id, can be used for pagination
       */
      id?: number
      /** @description Bigmap key status (`true` - active, `false` - removed) */
      active?: boolean
      /** @description Key hash */
      hash?: string | null
      /** @description Key in JSON or Micheline format, depending on the `micheline` query parameter. */
      key?: unknown | null
      /**
       * @description Value in JSON or Micheline format, depending on the `micheline` query parameter.
       * Note, if the key is inactive (removed) it will contain the last non-null value.
       */
      value?: unknown | null
    }
    Block: {
      /**
       * Format: int32
       * @description Index of the cycle
       */
      cycle?: number
      /**
       * Format: int32
       * @description The height of the block from the genesis block
       */
      level?: number
      /** @description Block hash */
      hash?: string | null
      /**
       * Format: date-time
       * @description The datetime at which the block is claimed to have been created (ISO 8601, e.g. `2020-02-20T02:40:57Z`)
       */
      timestamp?: string
      /**
       * Format: int32
       * @description Protocol code, representing a number of protocol changes since genesis (mod 256, but `-1` for the genesis block)
       */
      proto?: number
      /**
       * Format: int32
       * @description The position in the priority list of delegates at which the block was baked
       */
      priority?: number
      /**
       * Format: int32
       * @description Number of endorsements, confirmed the block
       */
      validations?: number
      /**
       * Format: int64
       * @description Security deposit frozen on the baker's account for producing the block (micro tez)
       */
      deposit?: number
      /**
       * Format: int64
       * @description Reward of the baker for producing the block (micro tez)
       */
      reward?: number
      /**
       * Format: int64
       * @description Total fee paid by all operations, included in the block
       */
      fees?: number
      /**
       * @description Status of the seed nonce revelation
       * `true` - seed nonce revealed
       * `false` - there's no `seed_nonce_hash` in the block or seed nonce revelation has missed
       */
      nonceRevealed?: boolean
      /** @description Information about a delegate (baker), produced the block */
      baker?: Components['schemas']['Alias'] | null
      /** @description Information about baker's software */
      software?: Components['schemas']['SoftwareAlias'] | null
      /** @description Flag indicating that the baker has voted for disabling liquidity baking */
      lbEscapeVote?: boolean
      /**
       * Format: int32
       * @description Liquidity baking escape EMA value with precision of 1000 for integer computation
       */
      lbEscapeEma?: number
      /**
       * @description List of endorsement (is operation, which specifies the head of the chain as seen by the endorser of a given slot)
       * operations, included in the block
       */
      endorsements?: Components['schemas']['EndorsementOperation'][] | null
      /**
       * @description List of proposal (is used by bakers (delegates) to submit and/or upvote proposals to amend the protocol)
       * operations, included in the block
       */
      proposals?: Components['schemas']['ProposalOperation'][] | null
      /** @description List of ballot (is used to vote for a proposal in a given voting cycle) operations, included in the block */
      ballots?: Components['schemas']['BallotOperation'][] | null
      /**
       * @description List of activation (is used to activate accounts that were recommended allocations of
       * tezos tokens for donations to the Tezos Foundation’s fundraiser) operations, included in the block
       */
      activations?: Components['schemas']['ActivationOperation'][] | null
      /**
       * @description List of double baking evidence (is used by bakers to provide evidence of double baking (baking two different
       * blocks at the same height) by a baker) operations, included in the block
       */
      doubleBaking?: Components['schemas']['DoubleBakingOperation'][] | null
      /**
       * @description List of double endorsement evidence (is used by bakers to provide evidence of double endorsement
       * (endorsing two different blocks at the same block height) by a baker) operations, included in the block
       */
      doubleEndorsing?:
        | Components['schemas']['DoubleEndorsingOperation'][]
        | null
      /** @description List of nonce revelation (are used by the blockchain to create randomness) operations, included in the block */
      nonceRevelations?:
        | Components['schemas']['NonceRevelationOperation'][]
        | null
      /**
       * @description List of delegation (is used to delegate funds to a delegate (an implicit account registered as a baker))
       * operations, included in the block
       */
      delegations?: Components['schemas']['DelegationOperation'][] | null
      /** @description List of origination (deployment / contract creation ) operations, included in the block */
      originations?: Components['schemas']['OriginationOperation'][] | null
      /**
       * @description List of transaction (is a standard operation used to transfer tezos tokens to an account)
       * operations, included in the block
       */
      transactions?: Components['schemas']['TransactionOperation'][] | null
      /** @description List of reveal (is used to reveal the public key associated with an account) operations, included in the block */
      reveals?: Components['schemas']['RevealOperation'][] | null
      /** @description List of register global constant operations, included in the block */
      registerConstants?:
        | Components['schemas']['RegisterConstantOperation'][]
        | null
      /** @description List of migration operations, implicitly applied at the end of the block */
      migrations?: Components['schemas']['MigrationOperation'][] | null
      /** @description List of revelation penalty operations, implicitly applied at the end of the block */
      revelationPenalties?:
        | Components['schemas']['RevelationPenaltyOperation'][]
        | null
      /** @description Injected historical quote at the time of block */
      quote?: Components['schemas']['QuoteShort'] | null
    }
    RegisterConstantOperation: Components['schemas']['Operation'] & {
      /**
       * @description Type of the operation, `register_constant` - is used to register a global
       * constant - Micheline expression that can be reused by multiple smart contracts
       */
      type?: string | null
      /**
       * Format: int32
       * @description Unique ID of the operation, stored in the TzKT indexer database
       */
      id?: number
      /**
       * Format: int32
       * @description The height of the block from the genesis block, in which the operation was included
       */
      level?: number
      /**
       * Format: date-time
       * @description Datetime of the block, in which the operation was included (ISO 8601, e.g. `2020-02-20T02:40:57Z`)
       */
      timestamp?: string
      /** @description Hash of the block, in which the operation was included */
      block?: string | null
      /** @description Hash of the operation */
      hash?: string | null
      /** @description Information about the account who has sent the operation */
      sender?: Components['schemas']['Alias'] | null
      /**
       * Format: int32
       * @description An account nonce which is used to prevent operation replay
       */
      counter?: number
      /**
       * Format: int32
       * @description A cap on the amount of gas a given operation can consume
       */
      gasLimit?: number
      /**
       * Format: int32
       * @description Amount of gas, consumed by the operation
       */
      gasUsed?: number
      /**
       * Format: int32
       * @description A cap on the amount of storage a given operation can consume
       */
      storageLimit?: number
      /**
       * Format: int32
       * @description Amount of storage, consumed by the operation
       */
      storageUsed?: number
      /**
       * Format: int64
       * @description Fee to the baker, produced block, in which the operation was included (micro tez)
       */
      bakerFee?: number
      /**
       * Format: int64
       * @description The amount of funds burned from the sender account for used the blockchain storage (micro tez)
       */
      storageFee?: number
      /**
       * @description Operation status (`applied` - an operation applied by the node and successfully added to the blockchain,
       * `failed` - an operation which failed with some particular error (not enough balance, gas limit, etc),
       * `backtracked` - an operation which was successful but reverted due to one of the following operations in the same operation group was failed,
       * `skipped` - all operations after the failed one in an operation group)
       */
      status?: string | null
      /** @description Global address of the registered constant (null if the operation failed) */
      address?: string | null
      /** @description Constant value. Note: you can configure code format by setting `micheline` query parameter (`0 | 2` - raw micheline, `1 | 3` - raw micheline string). */
      value?: unknown | null
      /** @description List of errors provided by the node, injected the operation to the blockchain. `null` if there is no errors */
      errors?: Components['schemas']['OperationError'][] | null
      /** @description Injected historical quote at the time of operation */
      quote?: Components['schemas']['QuoteShort'] | null
    }
    Commitment: {
      /** @description Blinded address of the account */
      address?: string | null
      /**
       * Format: int64
       * @description Account balance to be activated
       */
      balance?: number
      /** @description Flag showing whether the account has been activated or not. */
      activated?: boolean
      /**
       * Format: int32
       * @description Level of the block at which the account has been activated. `null` if the account is not activated yet.
       */
      activationLevel?: number | null
      /**
       * Format: date-time
       * @description Datetime of the block at which the account has been activated (ISO 8601, e.g. `2020-02-20T02:40:57Z`). `null` if the account is not activated yet.
       */
      activationTime?: string | null
      /** @description Info about activated account. `null` if the account is not activated yet. */
      activatedAccount?: Components['schemas']['Alias'] | null
    }
    Int32NullParameter: {
      /**
       * Format: int32
       * @description **Equal** filter mode (optional, i.e. `param.eq=123` is the same as `param=123`). \
       * Specify an integer number to get items where the specified field is equal to the specified value.
       *
       * Example: `?balance=1234`.
       */
      eq?: number | null
      /**
       * Format: int32
       * @description **Not equal** filter mode. \
       * Specify an integer number to get items where the specified field is not equal to the specified value.
       *
       * Example: `?balance.ne=1234`.
       */
      ne?: number | null
      /**
       * Format: int32
       * @description **Greater than** filter mode. \
       * Specify an integer number to get items where the specified field is greater than the specified value.
       *
       * Example: `?balance.gt=1234`.
       */
      gt?: number | null
      /**
       * Format: int32
       * @description **Greater or equal** filter mode. \
       * Specify an integer number to get items where the specified field is greater than equal to the specified value.
       *
       * Example: `?balance.ge=1234`.
       */
      ge?: number | null
      /**
       * Format: int32
       * @description **Less than** filter mode. \
       * Specify an integer number to get items where the specified field is less than the specified value.
       *
       * Example: `?balance.lt=1234`.
       */
      lt?: number | null
      /**
       * Format: int32
       * @description **Less or equal** filter mode. \
       * Specify an integer number to get items where the specified field is less than or equal to the specified value.
       *
       * Example: `?balance.le=1234`.
       */
      le?: number | null
      /**
       * @description **In list** (any of) filter mode. \
       * Specify a comma-separated list of integers to get items where the specified field is equal to one of the specified values.
       *
       * Example: `?level.in=12,14,52,69`.
       */
      in?: number[] | null
      /**
       * @description **Not in list** (none of) filter mode. \
       * Specify a comma-separated list of integers to get items where the specified field is not equal to all the specified values.
       *
       * Example: `?level.ni=12,14,52,69`.
       */
      ni?: number[] | null
      /**
       * @description **Is null** filter mode. \
       * Use this mode to get items where the specified field is null or not.
       *
       * Example: `?nonce.null` or `?nonce.null=false`.
       */
      null?: boolean | null
    }
    Constant: {
      /** @description Global address (expression hash) */
      address?: string | null
      /** @description Constant value (either micheline, michelson or bytes, depending on the `format` parameter) */
      value?: unknown | null
      /**
       * Format: int32
       * @description Constant size in bytes
       */
      size?: number
      /**
       * Format: int32
       * @description Number of contracts referencing this constant
       */
      refs?: number
      /** @description Account registered this constant */
      creator?: Components['schemas']['Alias'] | null
      /**
       * Format: int32
       * @description Level of the first block baked with this software
       */
      creationLevel?: number
      /**
       * Format: date-time
       * @description Datetime of the first block baked with this software
       */
      creationTime?: string
      /** @description Offchain metadata */
      metadata?: Components['schemas']['RawJson'] | null
    }
    RawJson: { [key: string]: unknown }
    ExpressionParameter: {
      /**
       * @description **Equal** filter mode (optional, i.e. `param.eq=123` is the same as `param=123`). \
       * Specify an expression hash to get items where the specified field is equal to the specified value.
       *
       * Example: `?address=expr...`.
       */
      eq?: string | null
      /**
       * @description **Not equal** filter mode. \
       * Specify an expression hash to get items where the specified field is not equal to the specified value.
       *
       * Example: `?address.ne=expr...`.
       */
      ne?: string | null
      /**
       * @description **In list** (any of) filter mode. \
       * Specify a comma-separated list of expression hashes to get items where the specified field is equal to one of the specified values.
       *
       * Example: `?address.in=expr1,expr2`.
       */
      in?: string[] | null
      /**
       * @description **Not in list** (none of) filter mode. \
       * Specify a comma-separated list of expression hashes to get items where the specified field is not equal to all the specified values.
       *
       * Example: `?address.ni=expr1,expr2`.
       */
      ni?: string[] | null
    }
    ContractInterface: {
      /** @description JSON Schema of the contract storage in humanified format (as returned by API) */
      storageSchema?: Components['schemas']['RawJson'] | null
      /** @description List of terminal entrypoints */
      entrypoints?: Components['schemas']['EntrypointInterface'][] | null
      /** @description List of currently available Big_maps */
      bigMaps?: Components['schemas']['BigMapInterface'][] | null
    }
    EntrypointInterface: {
      /** @description Entrypoint name */
      name?: string | null
      /** @description JSON Schema of the entrypoint parameter in humanified format (as returned by API) */
      parameterSchema?: Components['schemas']['RawJson'] | null
    }
    BigMapInterface: {
      /** @description Full path to the Big_map in the contract storage */
      path?: string | null
      /** @description Big_map name, if exists (field annotation) */
      name?: string | null
      /** @description JSON Schema of the Big_map key in humanified format (as returned by API) */
      keySchema?: Components['schemas']['RawJson'] | null
      /** @description JSON Schema of the Big_map value in humanified format (as returned by API) */
      valueSchema?: Components['schemas']['RawJson'] | null
    }
    Entrypoint: {
      /** @description Entrypoint name */
      name?: string | null
      /** @description A kind of JSON schema, describing how parameters will look like in a human-readable JSON format */
      jsonParameters?: unknown | null
      /** @description Parameters schema in micheline format */
      michelineParameters?: Components['schemas']['IMicheline'] | null
      /** @description Parameters schema in michelson format */
      michelsonParameters?: string | null
      /**
       * @description Unused means that the entrypoint can be normalized to a more specific one.
       * For example here `(or %entry1 (unit %entry2) (nat %entry3))` the `%entry1` is unused entrypoint
       * because it can be normalized to `%entry2` or `%entry3`
       */
      unused?: boolean
    }
    ContractView: {
      /** @description Contract view name */
      name?: string | null
      /** @description Parameter type in human-readable JSON format */
      jsonParameterType?: unknown | null
      /** @description Return type in human-readable JSON format */
      jsonReturnType?: unknown | null
      /** @description Parameter type in micheline format */
      michelineParameterType?: Components['schemas']['IMicheline'] | null
      /** @description Return type in micheline format */
      michelineReturnType?: Components['schemas']['IMicheline'] | null
      /** @description Parameter type in michelson format */
      michelsonParameterType?: string | null
      /** @description Return type in michelson format */
      michelsonReturnType?: string | null
    }
    StorageRecord: {
      /**
       * Format: int32
       * @description Id of the record that can be used for pagination
       */
      id?: number
      /**
       * Format: int32
       * @description Level at which the storage value was taken
       */
      level?: number
      /**
       * Format: date-time
       * @description Timestamp at which the storage value was taken
       */
      timestamp?: string
      /** @description Operation that caused the storage change */
      operation?: Components['schemas']['SourceOperation'] | null
      /** @description New storage value */
      value?: unknown | null
    }
    SourceOperation: {
      /** @description Operation type */
      type?: string | null
      /** @description Operation hash */
      hash?: string | null
      /**
       * Format: int32
       * @description Operation counter (null in case of synthetic operations)
       */
      counter?: number | null
      /**
       * Format: int32
       * @description Operation nonce (null in case of non-internal or synthetic operations)
       */
      nonce?: number | null
      /** @description Transaction parameter, including called entrypoint and value passed to the entrypoint. */
      parameter?: Components['schemas']['TxParameter'] | null
    }
    Cycle: {
      /**
       * Format: int32
       * @description Cycle index starting from zero
       */
      index?: number
      /**
       * Format: int32
       * @description Level of the first block in the cycle
       */
      firstLevel?: number
      /**
       * Format: date-time
       * @description Timestamp of the first block in the cycle
       */
      startTime?: string
      /**
       * Format: int32
       * @description Level of the last block in the cycle
       */
      lastLevel?: number
      /**
       * Format: date-time
       * @description Timestamp of the last block in the cycle
       */
      endTime?: string
      /**
       * Format: int32
       * @description Index of the snapshot
       */
      snapshotIndex?: number
      /**
       * Format: int32
       * @description Height of the block where the snapshot was taken
       */
      snapshotLevel?: number
      /** @description Randomly generated seed used by the network for things like baking rights distribution etc. */
      randomSeed?: string | null
      /**
       * Format: int32
       * @description Total number of all active in this cycle bakers
       */
      totalBakers?: number
      /**
       * Format: int32
       * @description Total number of rolls involved in baking rights distribution
       */
      totalRolls?: number
      /**
       * Format: int64
       * @description Total staking balance of all active in this cycle bakers
       */
      totalStaking?: number
      /**
       * Format: int32
       * @description Total number of active bakers' delegators
       */
      totalDelegators?: number
      /**
       * Format: int64
       * @description Total balance delegated to active bakers
       */
      totalDelegated?: number
      /** @description Injected historical quote at the end of the cycle */
      quote?: Components['schemas']['QuoteShort'] | null
    }
    State: {
      /** @description Alias name of the chain (or "private" if it's not on the list of known chains) */
      chain?: string | null
      /** @description Unique identificator of the chain */
      chainId?: string | null
      /**
       * Format: int32
       * @description Current cycle
       */
      cycle?: number
      /**
       * Format: int32
       * @description The height of the last block from the genesis block
       */
      level?: number
      /** @description Block hash */
      hash?: string | null
      /** @description Current protocol hash */
      protocol?: string | null
      /** @description Next block protocol hash */
      nextProtocol?: string | null
      /**
       * Format: date-time
       * @description The datetime at which the last block is claimed to have been created (ISO 8601, e.g. `2020-02-20T02:40:57Z`)
       */
      timestamp?: string
      /**
       * Format: int32
       * @description Current voring epoch index, starting from zero
       */
      votingEpoch?: number
      /**
       * Format: int32
       * @description Current voting period index, starting from zero
       */
      votingPeriod?: number
      /**
       * Format: int32
       * @description The height of the last known block from the genesis block
       */
      knownLevel?: number
      /**
       * Format: date-time
       * @description The datetime of last TzKT indexer synchronization (ISO 8601, e.g. `2020-02-20T02:40:57Z`)
       */
      lastSync?: string
      /** @description State of TzKT indexer synchronization */
      synced?: boolean
      /**
       * Format: int32
       * @description The height of the block where quotes were updated last time
       */
      quoteLevel?: number
      /**
       * Format: double
       * @description Last known XTZ/BTC price
       */
      quoteBtc?: number
      /**
       * Format: double
       * @description Last known XTZ/EUR price
       */
      quoteEur?: number
      /**
       * Format: double
       * @description Last known XTZ/USD price
       */
      quoteUsd?: number
      /**
       * Format: double
       * @description Last known XTZ/CNY price
       */
      quoteCny?: number
      /**
       * Format: double
       * @description Last known XTZ/JPY price
       */
      quoteJpy?: number
      /**
       * Format: double
       * @description Last known XTZ/KRW price
       */
      quoteKrw?: number
      /**
       * Format: double
       * @description Last known XTZ/ETH price
       */
      quoteEth?: number
      /**
       * Format: double
       * @description Last known XTZ/GBP price
       */
      quoteGbp?: number
    }
    ProtocolParameter: {
      /**
       * @description **Equal** filter mode (optional, i.e. `param.eq=123` is the same as `param=123`). \
       * Specify a protocol hash to get items where the specified field is equal to the specified value.
       *
       * Example: `?protocol=PsCARTHAGaz...`.
       */
      eq?: string | null
      /**
       * @description **Not equal** filter mode. \
       * Specify a protocol hash to get items where the specified field is not equal to the specified value.
       *
       * Example: `?sender.ne=PsBabyM1eUX...`.
       */
      ne?: string | null
      /**
       * @description **In list** (any of) filter mode. \
       * Specify a comma-separated list of protocol hashes to get items where the specified field is equal to one of the specified values.
       *
       * Example: `?sender.in=PsCARTHAGaz,PsBabyM1eUX`.
       */
      in?: string[] | null
      /**
       * @description **Not in list** (none of) filter mode. \
       * Specify a comma-separated list of protocol hashes to get items where the specified field is not equal to all the specified values.
       *
       * Example: `?sender.ni=PsCARTHAGaz,PsBabyM1eUX`.
       */
      ni?: string[] | null
    }
    MigrationKindParameter: {
      /**
       * @description **Equal** filter mode (optional, i.e. `param.eq=123` is the same as `param=123`). \
       * Specify a migration kind to get items where the specified field is equal to the specified value.
       *
       * Example: `?kind=bootstrap`.
       */
      eq?: string | null
      /**
       * @description **Not equal** filter mode. \
       * Specify a migration kind to get items where the specified field is not equal to the specified value.
       *
       * Example: `?type.ne=proposal_invoice`.
       */
      ne?: string | null
      /**
       * @description **In list** (any of) filter mode. \
       * Specify a comma-separated list of migration kinds to get items where the specified field is equal to one of the specified values.
       *
       * Example: `?sender.in=bootstrap,proposal_invoice`.
       */
      in?: string[] | null
      /**
       * @description **Not in list** (none of) filter mode. \
       * Specify a comma-separated list of migration kinds to get items where the specified field is not equal to all the specified values.
       *
       * Example: `?sender.ni=airdrop,bootstrap`.
       */
      ni?: string[] | null
    }
    Protocol: {
      /**
       * Format: int32
       * @description Protocol code, representing a number of protocol changes since genesis (mod 256, but `-1` for the genesis block)
       */
      code?: number
      /** @description Hash of the protocol */
      hash?: string | null
      /**
       * Format: int32
       * @description Block height where the protocol was applied
       */
      firstLevel?: number
      /**
       * Format: int32
       * @description Index of the first cycle started with the protocol
       */
      firstCycle?: number
      /**
       * Format: int32
       * @description Level of the first block of the first cycle started with the protocol
       */
      firstCycleLevel?: number
      /**
       * Format: int32
       * @description Block height where the protocol ends. `null` if the protocol is active
       */
      lastLevel?: number | null
      /** @description Information about the protocol constants */
      constants?: Components['schemas']['ProtocolConstants'] | null
      /** @description Offchain metadata */
      metadata?: Components['schemas']['ProtocolMetadata'] | null
    }
    ProtocolConstants: {
      /**
       * Format: int32
       * @description The number of cycles where security deposit is ramping up
       */
      rampUpCycles?: number
      /**
       * Format: int32
       * @description The number of cycles with no baking rewards
       */
      noRewardCycles?: number
      /**
       * Format: int32
       * @description A number of cycles in which baker's security deposit and rewards are frozen
       */
      preservedCycles?: number
      /**
       * Format: int32
       * @description A number of blocks the cycle contains
       */
      blocksPerCycle?: number
      /**
       * Format: int32
       * @description A number of blocks that indicates how often seed nonce hash is included in a block. Seed nonce hash presents in only one out of `blocksPerCommitment`
       */
      blocksPerCommitment?: number
      /**
       * Format: int32
       * @description A number of blocks that indicates how often a snapshot (snapshots are records of the state of rolls distributions) is taken
       */
      blocksPerSnapshot?: number
      /**
       * Format: int32
       * @description A number of block that indicates how long a voting period takes
       */
      blocksPerVoting?: number
      /**
       * Format: int32
       * @description Minimum amount of seconds between blocks
       */
      timeBetweenBlocks?: number
      /**
       * Format: int32
       * @description Number of bakers that assigned to endorse a block
       */
      endorsersPerBlock?: number
      /**
       * Format: int32
       * @description Maximum amount of gas that one operation can consume
       */
      hardOperationGasLimit?: number
      /**
       * Format: int32
       * @description Maximum amount of storage that one operation can consume
       */
      hardOperationStorageLimit?: number
      /**
       * Format: int32
       * @description Maximum amount of total gas usage of a single block
       */
      hardBlockGasLimit?: number
      /**
       * Format: int64
       * @description Required number of tokens to get 1 roll (micro tez)
       */
      tokensPerRoll?: number
      /**
       * Format: int64
       * @description Reward for seed nonce revelation (micro tez)
       */
      revelationReward?: number
      /**
       * Format: int64
       * @description Security deposit for baking (producing) a block (micro tez)
       */
      blockDeposit?: number
      /** @description Reward for baking (producing) a block (micro tez) */
      blockReward?: number[] | null
      /**
       * Format: int64
       * @description Security deposit for sending an endorsement operation (micro tez)
       */
      endorsementDeposit?: number
      /** @description Reward for sending an endorsement operation (micro tez) */
      endorsementReward?: number[] | null
      /**
       * Format: int32
       * @description Initial storage size of an originated (created) account (bytes)
       */
      originationSize?: number
      /**
       * Format: int32
       * @description Cost of one storage byte in the blockchain (micro tez)
       */
      byteCost?: number
      /**
       * Format: double
       * @description Percentage of the total number of rolls required to select a proposal on the proposal period
       */
      proposalQuorum?: number
      /**
       * Format: double
       * @description The minimum value of quorum percentage on the exploration and promotion periods
       */
      ballotQuorumMin?: number
      /**
       * Format: double
       * @description The maximum value of quorum percentage on the exploration and promotion periods
       */
      ballotQuorumMax?: number
      /**
       * Format: int32
       * @description Liquidity baking subsidy is 1/16th of total rewards for a block of priority 0 with all endorsements
       */
      lbSubsidy?: number
      /**
       * Format: int32
       * @description Level after protocol activation when liquidity baking shuts off
       */
      lbSunsetLevel?: number
      /**
       * Format: int32
       * @description 1/2 window size of 2000 blocks with precision of 1000 for integer computation
       */
      lbEscapeThreshold?: number
    }
    ProtocolMetadata: {
      /** @description Protocol name */
      alias?: string | null
      /** @description Protocol hash */
      hash?: string | null
      /** @description Link to the documentation with explanation of the protocol and changes */
      docs?: string | null
    }
    Quote: {
      /**
       * Format: int32
       * @description The level of the block at which the quote has been saved
       */
      level?: number
      /**
       * Format: date-time
       * @description The datetime at which the quote has been saved (ISO 8601, e.g. `2020-02-20T02:40:57Z`)
       */
      timestamp?: string
      /**
       * Format: double
       * @description XTZ/BTC price
       */
      btc?: number
      /**
       * Format: double
       * @description XTZ/EUR price
       */
      eur?: number
      /**
       * Format: double
       * @description XTZ/USD price
       */
      usd?: number
      /**
       * Format: double
       * @description XTZ/CNY price
       */
      cny?: number
      /**
       * Format: double
       * @description XTZ/JPY price
       */
      jpy?: number
      /**
       * Format: double
       * @description XTZ/KRW price
       */
      krw?: number
      /**
       * Format: double
       * @description XTZ/ETH price
       */
      eth?: number
      /**
       * Format: double
       * @description XTZ/GBP price
       */
      gbp?: number
    }
    BakerRewards: {
      /**
       * Format: int32
       * @description Cycle in which rewards have been or will be earned.
       */
      cycle?: number
      /**
       * Format: int64
       * @description Staking balance of the baker at the snapshot time.
       */
      stakingBalance?: number
      /**
       * Format: int64
       * @description Balance delegated to the baker at the snapshot time (sum of delegators' balances).
       */
      delegatedBalance?: number
      /**
       * Format: int32
       * @description Number of delegators at the snapshot time.
       */
      numDelegators?: number
      /**
       * Format: double
       * @description Expected value of how many blocks baker should produce based on baker's rolls, total rolls and blocks per cycle.
       */
      expectedBlocks?: number
      /**
       * Format: double
       * @description Expected value of how many slots baker should validate based on baker's rolls, total rolls and endorsing slots per cycle.
       */
      expectedEndorsements?: number
      /**
       * Format: int32
       * @description Number of blocks which baker is allowed to produce in this cycle based on future baking rights.
       */
      futureBlocks?: number
      /**
       * Format: int64
       * @description Estimated value of future block rewards.
       */
      futureBlockRewards?: number
      /**
       * Format: int64
       * @description Estimated value of bonds which will be locked as security deposit for future blocks.
       */
      futureBlockDeposits?: number
      /**
       * Format: int32
       * @description Number of successfully baked blocks with priority `0`.
       */
      ownBlocks?: number
      /**
       * Format: int64
       * @description Rewards received for blocks baked with priority `0`.
       */
      ownBlockRewards?: number
      /**
       * Format: int32
       * @description Number of successfully baked blocks with priority `1+`.
       */
      extraBlocks?: number
      /**
       * Format: int64
       * @description Rewards received for blocks baked with priority `1+`.
       */
      extraBlockRewards?: number
      /**
       * Format: int32
       * @description Number of blocks which were missed at priority `0` for no apparent reason (usually due to issues with network or node).
       */
      missedOwnBlocks?: number
      /**
       * Format: int64
       * @description Rewards which were not received due to missing own blocks.
       */
      missedOwnBlockRewards?: number
      /**
       * Format: int32
       * @description Number of blocks which were missed at priority `1+` for no apparent reason (usually due to issues with network or node).
       */
      missedExtraBlocks?: number
      /**
       * Format: int64
       * @description Rewards which were not received due to missing extra blocks.
       */
      missedExtraBlockRewards?: number
      /**
       * Format: int32
       * @description Number of blocks which were missed at priority `0` due to lack of bonds (for example, when a baker is overdelegated).
       */
      uncoveredOwnBlocks?: number
      /**
       * Format: int64
       * @description Rewards which were not received due to missing own blocks due to lack of bonds.
       */
      uncoveredOwnBlockRewards?: number
      /**
       * Format: int32
       * @description Number of blocks which were missed at priority `1+` due to lack of bonds (for example, when a baker is overdelegated).
       */
      uncoveredExtraBlocks?: number
      /**
       * Format: int64
       * @description Rewards which were not received due to missing extra blocks due to lack of bonds.
       */
      uncoveredExtraBlockRewards?: number
      /**
       * Format: int64
       * @description Bonds which were locked as a security deposit for baking own and extra blocks.
       */
      blockDeposits?: number
      /**
       * Format: int32
       * @description Number of slots which baker is allowed to validate in this cycle based on future endorsing rights.
       */
      futureEndorsements?: number
      /**
       * Format: int64
       * @description Estimated value of future endorsing rewards.
       */
      futureEndorsementRewards?: number
      /**
       * Format: int64
       * @description Estimated value of bonds which will be locked as security deposit for future endorsements.
       */
      futureEndorsementDeposits?: number
      /**
       * Format: int32
       * @description Number of successfully endorsed slots.
       */
      endorsements?: number
      /**
       * Format: int64
       * @description Rewards received for endorsed slots.
       */
      endorsementRewards?: number
      /**
       * Format: int32
       * @description Number of endorsing slots which were missed for no apparent reason (usually due to issues with network or node).
       */
      missedEndorsements?: number
      /**
       * Format: int64
       * @description Rewards which were not received due to missing endorsements.
       */
      missedEndorsementRewards?: number
      /**
       * Format: int32
       * @description Number of endorsing slots which were missed due to lack of bonds (for example, when a baker is overdelegated).
       */
      uncoveredEndorsements?: number
      /**
       * Format: int64
       * @description Rewards which were not received due to missing endorsements due to lack of bonds.
       */
      uncoveredEndorsementRewards?: number
      /**
       * Format: int64
       * @description Bonds which were locked as a security deposit for endorsed slots.
       */
      endorsementDeposits?: number
      /**
       * Format: int64
       * @description Operation fees which were harvested from successfully baked blocks with priority `0`.
       */
      ownBlockFees?: number
      /**
       * Format: int64
       * @description Operation fees which were harvested from successfully baked blocks with priority `1+`.
       */
      extraBlockFees?: number
      /**
       * Format: int64
       * @description Operation fees which were not received due to missing own blocks.
       */
      missedOwnBlockFees?: number
      /**
       * Format: int64
       * @description Operation fees which were not received due to missing extra blocks.
       */
      missedExtraBlockFees?: number
      /**
       * Format: int64
       * @description Operation fees which were not received due to missing own blocks (due to lack of bonds).
       */
      uncoveredOwnBlockFees?: number
      /**
       * Format: int64
       * @description Operation fees which were not received due to missing extra blocks (due to lack of bonds).
       */
      uncoveredExtraBlockFees?: number
      /**
       * Format: int64
       * @description Rewards for detecting double baking (accusing someone of producing two different blocks at the same level).
       */
      doubleBakingRewards?: number
      /**
       * Format: int64
       * @description Bonds lost due to double baking
       */
      doubleBakingLostDeposits?: number
      /**
       * Format: int64
       * @description Rewards lost due to double baking
       */
      doubleBakingLostRewards?: number
      /**
       * Format: int64
       * @description Fees lost due to double baking
       */
      doubleBakingLostFees?: number
      /**
       * Format: int64
       * @description Rewards for detecting double endorsing (accusing someone of validating two different blocks at the same level).
       */
      doubleEndorsingRewards?: number
      /**
       * Format: int64
       * @description Bonds lost due to double endorsing
       */
      doubleEndorsingLostDeposits?: number
      /**
       * Format: int64
       * @description Rewards lost due to double endorsing
       */
      doubleEndorsingLostRewards?: number
      /**
       * Format: int64
       * @description Fees lost due to double endorsing
       */
      doubleEndorsingLostFees?: number
      /**
       * Format: int64
       * @description Rewards for including into a block seed nonce revelation operations.
       */
      revelationRewards?: number
      /**
       * Format: int64
       * @description Rewards lost due to missing seed nonce revelation.
       */
      revelationLostRewards?: number
      /**
       * Format: int64
       * @description Fees lost due to missing seed nonce revelation.
       */
      revelationLostFees?: number
      /** @description Injected historical quote at the end of the cycle */
      quote?: Components['schemas']['QuoteShort'] | null
    }
    DelegatorRewards: {
      /**
       * Format: int32
       * @description Cycle in which rewards have been or will be earned.
       */
      cycle?: number
      /**
       * Format: int64
       * @description Delegator balance at the snapshot time.
       */
      balance?: number
      /** @description Baker at the snapshot time. */
      baker?: Components['schemas']['Alias'] | null
      /**
       * Format: int64
       * @description Staking balance of the baker at the snapshot time.
       */
      stakingBalance?: number
      /**
       * Format: double
       * @description Expected value of how many blocks baker should produce based on baker's rolls, total rolls and blocks per cycle.
       */
      expectedBlocks?: number
      /**
       * Format: double
       * @description Expected value of how many slots baker should validate based on baker's rolls, total rolls and endorsing slots per cycle.
       */
      expectedEndorsements?: number
      /**
       * Format: int32
       * @description Number of blocks which baker is allowed to produce in this cycle based on future baking rights.
       */
      futureBlocks?: number
      /**
       * Format: int64
       * @description Estimated value of future block rewards.
       */
      futureBlockRewards?: number
      /**
       * Format: int32
       * @description Number of successfully baked blocks with priority `0`.
       */
      ownBlocks?: number
      /**
       * Format: int64
       * @description Rewards received for blocks baked with priority `0`.
       */
      ownBlockRewards?: number
      /**
       * Format: int32
       * @description Number of successfully baked blocks with priority `1+`.
       */
      extraBlocks?: number
      /**
       * Format: int64
       * @description Rewards received for blocks baked with priority `1+`.
       */
      extraBlockRewards?: number
      /**
       * Format: int32
       * @description Number of blocks which were missed at priority `0` for no apparent reason (usually due to issues with network or node).
       */
      missedOwnBlocks?: number
      /**
       * Format: int64
       * @description Rewards which were not received due to missing own blocks.
       */
      missedOwnBlockRewards?: number
      /**
       * Format: int32
       * @description Number of blocks which were missed at priority `1+` for no apparent reason (usually due to issues with network or node).
       */
      missedExtraBlocks?: number
      /**
       * Format: int64
       * @description Rewards which were not received due to missing extra blocks.
       */
      missedExtraBlockRewards?: number
      /**
       * Format: int32
       * @description Number of blocks which were missed at priority `0` due to lack of bonds (for example, when a baker is overdelegated).
       */
      uncoveredOwnBlocks?: number
      /**
       * Format: int64
       * @description Rewards which were not received due to missing own blocks due to lack of bonds.
       */
      uncoveredOwnBlockRewards?: number
      /**
       * Format: int32
       * @description Number of blocks which were missed at priority `1+` due to lack of bonds (for example, when a baker is overdelegated).
       */
      uncoveredExtraBlocks?: number
      /**
       * Format: int64
       * @description Rewards which were not received due to missing extra blocks due to lack of bonds.
       */
      uncoveredExtraBlockRewards?: number
      /**
       * Format: int32
       * @description Number of slots which baker is allowed to validate in this cycle based on future endorsing rights.
       */
      futureEndorsements?: number
      /**
       * Format: int64
       * @description Estimated value of future endorsing rewards.
       */
      futureEndorsementRewards?: number
      /**
       * Format: int32
       * @description Number of successfully endorsed slots.
       */
      endorsements?: number
      /**
       * Format: int64
       * @description Rewards received for endorsed slots.
       */
      endorsementRewards?: number
      /**
       * Format: int32
       * @description Number of endorsing slots which were missed for no apparent reason (usually due to issues with network or node).
       */
      missedEndorsements?: number
      /**
       * Format: int64
       * @description Rewards which were not received due to missing endorsements.
       */
      missedEndorsementRewards?: number
      /**
       * Format: int32
       * @description Number of endorsing slots which were missed due to lack of bonds (for example, when a baker is overdelegated).
       */
      uncoveredEndorsements?: number
      /**
       * Format: int64
       * @description Rewards which were not received due to missing endorsements due to lack of bonds.
       */
      uncoveredEndorsementRewards?: number
      /**
       * Format: int64
       * @description Operation fees which were harvested from successfully baked blocks with priority `0`.
       */
      ownBlockFees?: number
      /**
       * Format: int64
       * @description Operation fees which were harvested from successfully baked blocks with priority `1+`.
       */
      extraBlockFees?: number
      /**
       * Format: int64
       * @description Operation fees which were not received due to missing own blocks.
       */
      missedOwnBlockFees?: number
      /**
       * Format: int64
       * @description Operation fees which were not received due to missing extra blocks.
       */
      missedExtraBlockFees?: number
      /**
       * Format: int64
       * @description Operation fees which were not received due to missing own blocks (due to lack of bonds).
       */
      uncoveredOwnBlockFees?: number
      /**
       * Format: int64
       * @description Operation fees which were not received due to missing extra blocks (due to lack of bonds).
       */
      uncoveredExtraBlockFees?: number
      /**
       * Format: int64
       * @description Rewards for detecting double baking (accusing someone of producing two different blocks at the same level).
       */
      doubleBakingRewards?: number
      /**
       * Format: int64
       * @description Bonds lost due to double baking
       */
      doubleBakingLostDeposits?: number
      /**
       * Format: int64
       * @description Rewards lost due to double baking
       */
      doubleBakingLostRewards?: number
      /**
       * Format: int64
       * @description Fees lost due to double baking
       */
      doubleBakingLostFees?: number
      /**
       * Format: int64
       * @description Rewards for detecting double endorsing (accusing someone of validating two different blocks at the same level).
       */
      doubleEndorsingRewards?: number
      /**
       * Format: int64
       * @description Bonds lost due to double endorsing
       */
      doubleEndorsingLostDeposits?: number
      /**
       * Format: int64
       * @description Rewards lost due to double endorsing
       */
      doubleEndorsingLostRewards?: number
      /**
       * Format: int64
       * @description Fees lost due to double endorsing
       */
      doubleEndorsingLostFees?: number
      /**
       * Format: int64
       * @description Rewards for including into a block seed nonce revelation operations.
       */
      revelationRewards?: number
      /**
       * Format: int64
       * @description Rewards lost due to missing seed nonce revelation.
       */
      revelationLostRewards?: number
      /**
       * Format: int64
       * @description Fees lost due to missing seed nonce revelation.
       */
      revelationLostFees?: number
      /** @description Injected historical quote at the end of the cycle */
      quote?: Components['schemas']['QuoteShort'] | null
    }
    RewardSplit: {
      /**
       * Format: int32
       * @description Cycle in which rewards have been or will be earned.
       */
      cycle?: number
      /**
       * Format: int64
       * @description Staking balance of the baker at the snapshot time.
       */
      stakingBalance?: number
      /**
       * Format: int64
       * @description Balance delegated to the baker at the snapshot time (sum of delegators' balances).
       */
      delegatedBalance?: number
      /**
       * Format: int32
       * @description Number of delegators at the snapshot time.
       */
      numDelegators?: number
      /**
       * Format: double
       * @description Expected value of how many blocks baker should produce based on baker's rolls, total rolls and blocks per cycle.
       */
      expectedBlocks?: number
      /**
       * Format: double
       * @description Expected value of how many slots baker should validate based on baker's rolls, total rolls and endorsing slots per cycle.
       */
      expectedEndorsements?: number
      /**
       * Format: int32
       * @description Number of blocks which baker is allowed to produce in this cycle based on future baking rights.
       */
      futureBlocks?: number
      /**
       * Format: int64
       * @description Estimated value of future block rewards.
       */
      futureBlockRewards?: number
      /**
       * Format: int64
       * @description Estimated value of bonds which will be locked as security deposit for future blocks.
       */
      futureBlockDeposits?: number
      /**
       * Format: int32
       * @description Number of successfully baked blocks with priority `0`.
       */
      ownBlocks?: number
      /**
       * Format: int64
       * @description Rewards received for blocks baked with priority `0`.
       */
      ownBlockRewards?: number
      /**
       * Format: int32
       * @description Number of successfully baked blocks with priority `1+`.
       */
      extraBlocks?: number
      /**
       * Format: int64
       * @description Rewards received for blocks baked with priority `1+`.
       */
      extraBlockRewards?: number
      /**
       * Format: int32
       * @description Number of blocks which were missed at priority `0` for no apparent reason (usually due to issues with network or node).
       */
      missedOwnBlocks?: number
      /**
       * Format: int64
       * @description Rewards which were not received due to missing own blocks.
       */
      missedOwnBlockRewards?: number
      /**
       * Format: int32
       * @description Number of blocks which were missed at priority `1+` for no apparent reason (usually due to issues with network or node).
       */
      missedExtraBlocks?: number
      /**
       * Format: int64
       * @description Rewards which were not received due to missing extra blocks.
       */
      missedExtraBlockRewards?: number
      /**
       * Format: int32
       * @description Number of blocks which were missed at priority `0` due to lack of bonds (for example, when a baker is overdelegated).
       */
      uncoveredOwnBlocks?: number
      /**
       * Format: int64
       * @description Rewards which were not received due to missing own blocks due to lack of bonds.
       */
      uncoveredOwnBlockRewards?: number
      /**
       * Format: int32
       * @description Number of blocks which were missed at priority `1+` due to lack of bonds (for example, when a baker is overdelegated).
       */
      uncoveredExtraBlocks?: number
      /**
       * Format: int64
       * @description Rewards which were not received due to missing extra blocks due to lack of bonds.
       */
      uncoveredExtraBlockRewards?: number
      /**
       * Format: int64
       * @description Bonds which were locked as a security deposit for baking own and extra blocks.
       */
      blockDeposits?: number
      /**
       * Format: int32
       * @description Number of slots which baker is allowed to validate in this cycle based on future endorsing rights.
       */
      futureEndorsements?: number
      /**
       * Format: int64
       * @description Estimated value of future endorsing rewards.
       */
      futureEndorsementRewards?: number
      /**
       * Format: int64
       * @description Estimated value of bonds which will be locked as security deposit for future endorsements.
       */
      futureEndorsementDeposits?: number
      /**
       * Format: int32
       * @description Number of successfully endorsed slots.
       */
      endorsements?: number
      /**
       * Format: int64
       * @description Rewards received for endorsed slots.
       */
      endorsementRewards?: number
      /**
       * Format: int32
       * @description Number of endorsing slots which were missed for no apparent reason (usually due to issues with network or node).
       */
      missedEndorsements?: number
      /**
       * Format: int64
       * @description Rewards which were not received due to missing endorsements.
       */
      missedEndorsementRewards?: number
      /**
       * Format: int32
       * @description Number of endorsing slots which were missed due to lack of bonds (for example, when a baker is overdelegated).
       */
      uncoveredEndorsements?: number
      /**
       * Format: int64
       * @description Rewards which were not received due to missing endorsements due to lack of bonds.
       */
      uncoveredEndorsementRewards?: number
      /**
       * Format: int64
       * @description Bonds which were locked as a security deposit for endorsed slots.
       */
      endorsementDeposits?: number
      /**
       * Format: int64
       * @description Operation fees which were harvested from successfully baked blocks with priority `0`.
       */
      ownBlockFees?: number
      /**
       * Format: int64
       * @description Operation fees which were harvested from successfully baked blocks with priority `1+`.
       */
      extraBlockFees?: number
      /**
       * Format: int64
       * @description Operation fees which were not received due to missing own blocks.
       */
      missedOwnBlockFees?: number
      /**
       * Format: int64
       * @description Operation fees which were not received due to missing extra blocks.
       */
      missedExtraBlockFees?: number
      /**
       * Format: int64
       * @description Operation fees which were not received due to missing own blocks (due to lack of bonds).
       */
      uncoveredOwnBlockFees?: number
      /**
       * Format: int64
       * @description Operation fees which were not received due to missing extra blocks (due to lack of bonds).
       */
      uncoveredExtraBlockFees?: number
      /**
       * Format: int64
       * @description Rewards for detecting double baking (accusing someone of producing two different blocks at the same level).
       */
      doubleBakingRewards?: number
      /**
       * Format: int64
       * @description Bonds lost due to double baking
       */
      doubleBakingLostDeposits?: number
      /**
       * Format: int64
       * @description Rewards lost due to double baking
       */
      doubleBakingLostRewards?: number
      /**
       * Format: int64
       * @description Fees lost due to double baking
       */
      doubleBakingLostFees?: number
      /**
       * Format: int64
       * @description Rewards for detecting double endorsing (accusing someone of validating two different blocks at the same level).
       */
      doubleEndorsingRewards?: number
      /**
       * Format: int64
       * @description Bonds lost due to double endorsing
       */
      doubleEndorsingLostDeposits?: number
      /**
       * Format: int64
       * @description Rewards lost due to double endorsing
       */
      doubleEndorsingLostRewards?: number
      /**
       * Format: int64
       * @description Fees lost due to double endorsing
       */
      doubleEndorsingLostFees?: number
      /**
       * Format: int64
       * @description Rewards for including into a block seed nonce revelation operations.
       */
      revelationRewards?: number
      /**
       * Format: int64
       * @description Rewards lost due to missing seed nonce revelation.
       */
      revelationLostRewards?: number
      /**
       * Format: int64
       * @description Fees lost due to missing seed nonce revelation.
       */
      revelationLostFees?: number
      /** @description List of delegators at the snapshot time */
      delegators?: Components['schemas']['SplitDelegator'][] | null
    }
    SplitDelegator: {
      /** @description Address of the delegator */
      address?: string | null
      /**
       * Format: int64
       * @description Balance of the delegator at the snapshot time
       */
      balance?: number
      /**
       * Format: int64
       * @description Balance of the delegator at the moment
       */
      currentBalance?: number
      /**
       * @description Indicates whether the delegator is emptied (at the moment, not at the snapshot time).
       * Emptied accounts (users with zero balance) should be re-allocated, so if you make payment to emptied account you will pay (burn) `0.257 tez` allocation fee.
       */
      emptied?: boolean
    }
    BakingRightTypeParameter: {
      /**
       * @description **Equal** filter mode (optional, i.e. `param.eq=123` is the same as `param=123`). \
       * Specify baking right type to get items where the specified field is equal to the specified value.
       *
       * Example: `?type=baking`.
       */
      eq?: string | null
      /**
       * @description **Not equal** filter mode. \
       * Specify baking right type to get items where the specified field is not equal to the specified value.
       *
       * Example: `?type.ne=endorsing`.
       */
      ne?: string | null
    }
    BakingRightStatusParameter: {
      /**
       * @description **Equal** filter mode (optional, i.e. `param.eq=123` is the same as `param=123`). \
       * Specify baking right status to get items where the specified field is equal to the specified value.
       *
       * Example: `?type=future`.
       */
      eq?: string | null
      /**
       * @description **Not equal** filter mode. \
       * Specify baking right status to get items where the specified field is not equal to the specified value.
       *
       * Example: `?type.ne=missed`.
       */
      ne?: string | null
    }
    BakingRight: {
      /**
       * @description Type of the right:
       * - `baking` - right to bake (produce) a block;
       * - `endorsing` - right to endorse (validate) a block.
       */
      type?: string | null
      /**
       * Format: int32
       * @description Cycle on which the right can be realized.
       */
      cycle?: number
      /**
       * Format: int32
       * @description Level at which a block must be baked or an endorsement must be sent.
       */
      level?: number
      /**
       * Format: date-time
       * @description Time (estimated, in case of future rights) when a block must be baked or an endorsement must be sent.
       */
      timestamp?: string
      /**
       * Format: int32
       * @description Priority (0 - ∞) with which baker can produce a block.
       * If a baker with priority `0` doesn't produce a block within a given time interval, then the right goes to a baker with priority` 1`, etc.
       * For `endorsing` rights this field is always `null`.
       */
      priority?: number | null
      /**
       * Format: int32
       * @description Number of slots (1 - 32) to be endorsed. For `baking` rights this field is always `null`.
       */
      slots?: number | null
      /** @description Baker to which baking or endorsing right has been given. */
      baker?: Components['schemas']['Alias'] | null
      /**
       * @description Status of the baking or endorsing right:
       * - `future` - the right is not realized yet;
       * - `realized` - the right was successfully realized;
       * - `uncovered` - the right was not realized due to lack of bonds (for example, when a baker is overdelegated);
       * - `missed` - the right was not realized for no apparent reason (usually due to issues with network or node).
       */
      status?: string | null
    }
    Software: {
      /** @description Software ID (short commit hash) */
      shortHash?: string | null
      /**
       * Format: int32
       * @description Level of the first block baked with this software
       */
      firstLevel?: number
      /**
       * Format: date-time
       * @description Datetime of the first block baked with this software
       */
      firstTime?: string
      /**
       * Format: int32
       * @description Level of the last block baked with this software
       */
      lastLevel?: number
      /**
       * Format: date-time
       * @description Datetime of the last block baked with this software
       */
      lastTime?: string
      /**
       * Format: int32
       * @description Total number of blocks baked with this software
       */
      blocksCount?: number
      /** @description Offchain metadata */
      metadata?: Components['schemas']['RawJson'] | null
    }
    Statistics: {
      /**
       * Format: int32
       * @description Cycle at the end of which the statistics has been calculated. This field is only present in cyclic statistics.
       */
      cycle?: number | null
      /**
       * Format: date-time
       * @description Day at the end of which the statistics has been calculated. This field is only present in daily statistics.
       */
      date?: string | null
      /**
       * Format: int32
       * @description Level of the block at which the statistics has been calculated
       */
      level?: number
      /**
       * Format: date-time
       * @description Timestamp of the block at which the statistics has been calculated (ISO 8601, e.g. `2020-02-20T02:40:57Z`)
       */
      timestamp?: string
      /**
       * Format: int64
       * @description Total supply - all existing tokens (including locked vested funds and frozen funds) plus not yet activated fundraiser tokens
       */
      totalSupply?: number
      /**
       * Format: int64
       * @description Circulating supply - all active tokens which can affect supply and demand (can be spent/transferred)
       */
      circulatingSupply?: number
      /**
       * Format: int64
       * @description Total amount of tokens initially created when starting the blockchain
       */
      totalBootstrapped?: number
      /**
       * Format: int64
       * @description Total commitment amount (tokens to be activated by fundraisers)
       */
      totalCommitments?: number
      /**
       * Format: int64
       * @description Total amount of tokens activated by fundraisers
       */
      totalActivated?: number
      /**
       * Format: int64
       * @description Total amount of created/issued tokens
       */
      totalCreated?: number
      /**
       * Format: int64
       * @description Total amount of burned tokens
       */
      totalBurned?: number
      /**
       * Format: int64
       * @description Total amount of tokens sent to the null-address, which is equivalent to burning
       */
      totalBanished?: number
      /**
       * Format: int64
       * @description Total amount of tokens locked on vested contracts
       */
      totalVested?: number
      /**
       * Format: int64
       * @description Total amount of frozen tokens (frozen security deposits, frozen rewards and frozen fees)
       */
      totalFrozen?: number
      /** @description Injected historical quote at the time of the block at which the statistics has been calculated */
      quote?: Components['schemas']['QuoteShort'] | null
    }
    NatParameter: {
      /**
       * @description **Equal** filter mode (optional, i.e. `param.eq=123` is the same as `param=123`). \
       * Specify a `nat` value to get items where the specified field is equal to the specified value.
       *
       * Example: `?balance=1234`.
       */
      eq?: string | null
      /**
       * @description **Not equal** filter mode. \
       * Specify a `nat` value to get items where the specified field is not equal to the specified value.
       *
       * Example: `?balance.ne=1234`.
       */
      ne?: string | null
      /**
       * @description **Greater than** filter mode. \
       * Specify a `nat` value to get items where the specified field is greater than the specified value.
       *
       * Example: `?balance.gt=1234`.
       */
      gt?: string | null
      /**
       * @description **Greater or equal** filter mode. \
       * Specify a `nat` value to get items where the specified field is greater than equal to the specified value.
       *
       * Example: `?balance.ge=1234`.
       */
      ge?: string | null
      /**
       * @description **Less than** filter mode. \
       * Specify a `nat` value to get items where the specified field is less than the specified value.
       *
       * Example: `?balance.lt=1234`.
       */
      lt?: string | null
      /**
       * @description **Less or equal** filter mode. \
       * Specify a `nat` value to get items where the specified field is less than or equal to the specified value.
       *
       * Example: `?balance.le=1234`.
       */
      le?: string | null
      /**
       * @description **In list** (any of) filter mode. \
       * Specify a comma-separated list of `nat` values to get items where the specified field is equal to one of the specified values.
       *
       * Example: `?level.in=12,14,52,69`.
       */
      in?: string[] | null
      /**
       * @description **Not in list** (none of) filter mode. \
       * Specify a comma-separated list of `nat` values to get items where the specified field is not equal to all the specified values.
       *
       * Example: `?level.ni=12,14,52,69`.
       */
      ni?: string[] | null
    }
    TokenStandardParameter: {
      /**
       * @description **Equal** filter mode (optional, i.e. `param.eq=123` is the same as `param=123`). \
       * Specify token standard (`fa1.2` or `fa2`) to get items where the specified field is equal to the specified value.
       *
       * Example: `?type=fa2`.
       */
      eq?: string | null
      /**
       * @description **Not equal** filter mode. \
       * Specify token standard (`fa1.2` or `fa2`) to get items where the specified field is not equal to the specified value.
       *
       * Example: `?type.ne=fa1.2`.
       */
      ne?: string | null
    }
    Token: {
      /**
       * Format: int32
       * @description Internal TzKT id (not the same as `tokenId`).
       * **[sortable]**
       */
      id?: number
      /** @description Contract, created the token. */
      contract?: Components['schemas']['Alias'] | null
      /**
       * @description Token id, unique within the contract.
       * **[sortable]**
       */
      tokenId?: string | null
      /** @description Token standard (`fa1.2` or `fa2`). */
      standard?: string | null
      /**
       * Format: int32
       * @description Level of the block where the token was first seen.
       * **[sortable]**
       */
      firstLevel?: number
      /**
       * Format: date-time
       * @description Timestamp of the block where the token was first seen.
       */
      firstTime?: string
      /**
       * Format: int32
       * @description Level of the block where the token was last seen.
       * **[sortable]**
       */
      lastLevel?: number
      /**
       * Format: date-time
       * @description Timestamp of the block where the token was last seen.
       */
      lastTime?: string
      /**
       * Format: int32
       * @description Total number of transfers.
       * **[sortable]**
       */
      transfersCount?: number
      /**
       * Format: int32
       * @description Total number of holders ever seen.
       * **[sortable]**
       */
      balancesCount?: number
      /**
       * Format: int32
       * @description Total number of current holders.
       * **[sortable]**
       */
      holdersCount?: number
      /** @description Total number of minted tokens (raw value, not divided by `decimals`). */
      totalMinted?: string | null
      /** @description Total number of burned tokens (raw value, not divided by `decimals`). */
      totalBurned?: string | null
      /** @description Total number of existing tokens (raw value, not divided by `decimals`). */
      totalSupply?: string | null
      /**
       * @description Token metadata.
       * **[sortable]**
       */
      metadata?: unknown | null
    }
    SelectionParameter: {
      /**
       * @description **Fields** selection mode (optional, i.e. `select.fields=balance` is the same as `select=balance`). \
       * Specify a comma-separated list of fields to include into response.
       *
       * Example:
       * `?select=address,balance as b,metadata.name as meta_name` will result in
       * `[ { "address": "asd", "b": 10, "meta_name": "qwe" } ]`.
       */
      fields?: string[] | null
      /**
       * @description **Values** selection mode. \
       * Specify a comma-separated list of fields to include their values into response.
       *
       * Example:
       * `?select.values=address,balance,metadata.name`  will result in
       * `[ [ "asd", 10, "qwe" ] ]`.
       */
      values?: string[] | null
    }
    TokenBalance: {
      /**
       * Format: int32
       * @description Internal TzKT id.
       * **[sortable]**
       */
      id?: number
      /**
       * @description Owner account.
       * Click on the field to expand more details.
       */
      account?: Components['schemas']['Alias'] | null
      /**
       * @description Token info.
       * Click on the field to expand more details.
       */
      token?: Components['schemas']['TokenInfo'] | null
      /**
       * @description Balance (raw value, not divided by `decimals`).
       * **[sortable]**
       */
      balance?: string | null
      /**
       * Format: int32
       * @description Total number of transfers, affecting the token balance.
       * **[sortable]**
       */
      transfersCount?: number
      /**
       * Format: int32
       * @description Level of the block where the token balance was first changed.
       * **[sortable]**
       */
      firstLevel?: number
      /**
       * Format: date-time
       * @description Timestamp of the block where the token balance was first changed.
       */
      firstTime?: string
      /**
       * Format: int32
       * @description Level of the block where the token balance was last changed.
       * **[sortable]**
       */
      lastLevel?: number
      /**
       * Format: date-time
       * @description Timestamp of the block where the token balance was last changed.
       */
      lastTime?: string
    }
    TokenInfo: {
      /**
       * Format: int32
       * @description Internal TzKT id (not the same as `tokenId`).
       */
      id?: number
      /** @description Contract, created the token. */
      contract?: Components['schemas']['Alias'] | null
      /** @description Token id, unique within the contract. */
      tokenId?: string | null
      /** @description Token standard (either `fa1.2` or `fa2`). */
      standard?: string | null
      /**
       * @description Token metadata.
       * **[sortable]**
       */
      metadata?: unknown | null
    }
    TokenTransfer: {
      /**
       * Format: int32
       * @description Internal TzKT id.
       * **[sortable]**
       */
      id?: number
      /**
       * Format: int32
       * @description Level of the block, at which the token transfer was made.
       * **[sortable]**
       */
      level?: number
      /**
       * Format: date-time
       * @description Timestamp of the block, at which the token transfer was made.
       */
      timestamp?: string
      /**
       * @description Token info.
       * Click on the field to expand more details.
       */
      token?: Components['schemas']['TokenInfo'] | null
      /**
       * @description Sender account.
       * Click on the field to expand more details.
       */
      from?: Components['schemas']['Alias'] | null
      /**
       * @description Target account.
       * Click on the field to expand more details.
       */
      to?: Components['schemas']['Alias'] | null
      /**
       * @description Amount of tokens transferred (raw value, not divided by `decimals`).
       * **[sortable]**
       */
      amount?: string | null
      /**
       * Format: int32
       * @description Internal TzKT id of the transaction operation, caused the token transfer.
       */
      transactionId?: number | null
      /**
       * Format: int32
       * @description Internal TzKT id of the origination operation, caused the token transfer.
       */
      originationId?: number | null
      /**
       * Format: int32
       * @description Internal TzKT id of the migration operation, caused the token transfer.
       */
      migrationId?: number | null
    }
    TokenBalanceShort: {
      /**
       * @description Owner account.
       * Click on the field to expand more details.
       */
      account?: Components['schemas']['Alias'] | null
      /**
       * @description Token info.
       * Click on the field to expand more details.
       */
      token?: Components['schemas']['TokenInfo'] | null
      /**
       * @description Balance (raw value, not divided by `decimals`).
       * **[sortable]**
       */
      balance?: string | null
    }
    Proposal: {
      /** @description Hash of the proposal, which representing a tarball of concatenated .ml/.mli source files */
      hash?: string | null
      /** @description Information about the baker (delegate) submitted the proposal */
      initiator?: Components['schemas']['Alias'] | null
      /**
       * Format: int32
       * @description The first voting period where the proposal was active
       */
      firstPeriod?: number
      /**
       * Format: int32
       * @description The last voting period where the proposal was active
       */
      lastPeriod?: number
      /**
       * Format: int32
       * @description The voting epoch where the proposal was active
       */
      epoch?: number
      /**
       * Format: int32
       * @description The total number of upvotes (proposal operations)
       */
      upvotes?: number
      /**
       * Format: int32
       * @description The total number of rolls, upvoted the proposal
       */
      rolls?: number
      /**
       * @description Status of the proposal
       * `active` - the proposal in the active state
       * `accepted` - the proposal was accepted
       * `rejected` - the proposal was rejected due to too many "nay" ballots
       * `skipped` - the proposal was skipped due to the quorum was not reached
       */
      status?: string | null
      /** @description Offchain metadata */
      metadata?: Components['schemas']['ProposalMetadata'] | null
    }
    ProposalMetadata: {
      /** @description Alias name of the proposal */
      alias?: string | null
      /** @description Hash of the proposal, which representing a tarball of concatenated .ml/.mli source files */
      hash?: string | null
      /** @description Link to the proposal on Tezos Agora portall with full details */
      agora?: string | null
      /**
       * Format: int64
       * @description Reward for the proposal developers, that will be generated if the proposal is accepted
       */
      invoice?: number
    }
    VotingPeriod: {
      /**
       * Format: int32
       * @description Index of the voting period, starting from zero
       */
      index?: number
      /**
       * Format: int32
       * @description Index of the voting epoch, starting from zero
       */
      epoch?: number
      /**
       * Format: int32
       * @description The height of the block in which the period starts
       */
      firstLevel?: number
      /**
       * Format: date-time
       * @description The timestamp of the block in which the period starts
       */
      startTime?: string
      /**
       * Format: int32
       * @description The height of the block in which the period ends
       */
      lastLevel?: number
      /**
       * Format: date-time
       * @description The timestamp of the block in which the period ends
       */
      endTime?: string
      /**
       * @description Kind of the voting period:
       * `proposal` - delegates can submit protocol amendment proposals using the proposal operation
       * `exploration` -  bakers (delegates) may vote on the top-ranked proposal from the previous Proposal Period using the ballot operation
       * `testing` - If the proposal is approved in the Exploration Period, the testing (or 'cooldown') period begins and bakers start testing the new protocol
       * `promotion` - delegates can cast one vote to promote or not the tested proposal using the ballot operation
       * `adoption` - after the proposal is actually accepted, the ecosystem has some time to prepare to the upgrade
       * Learn more: https://tezos.gitlab.io/whitedoc/voting.html
       */
      kind?: string | null
      /**
       * @description Status of the voting period:
       * `active` - means that the voting period is in progress
       * `no_proposals` - means that there were no proposals during the voting period
       * `no_quorum` - means that there was a voting but the quorum was not reached
       * `no_supermajority` - means that there was a voting but the supermajority was not reached
       * `success` - means that the period was finished with positive voting result
       */
      status?: string | null
      /**
       * Format: int32
       * @description The number of bakers on the voters list
       */
      totalBakers?: number | null
      /**
       * Format: int32
       * @description The number of rolls of bakers on the voters list
       */
      totalRolls?: number | null
      /**
       * Format: double
       * @description Upvotes quorum percentage (only for proposal period)
       */
      upvotesQuorum?: number | null
      /**
       * Format: int32
       * @description The number of proposals injected during the voting period (only for proposal period)
       */
      proposalsCount?: number | null
      /**
       * Format: int32
       * @description This is how many upvotes (proposal operations) the most upvoted proposal has (only for proposal period)
       */
      topUpvotes?: number | null
      /**
       * Format: int32
       * @description This is how many rolls the most upvoted proposal has (only for proposal period)
       */
      topRolls?: number | null
      /**
       * Format: double
       * @description Ballots quorum percentage (only for exploration and promotion periods)
       */
      ballotsQuorum?: number | null
      /**
       * Format: double
       * @description Supermajority percentage (only for exploration and promotion periods)
       */
      supermajority?: number | null
      /**
       * Format: int32
       * @description The number of the ballots with "yay" vote (only for exploration and promotion periods)
       */
      yayBallots?: number | null
      /**
       * Format: int32
       * @description Total rolls of the ballots with "yay" vote (only for exploration and promotion periods)
       */
      yayRolls?: number | null
      /**
       * Format: int32
       * @description The number of the ballots with "nay" vote (only for exploration and promotion periods)
       */
      nayBallots?: number | null
      /**
       * Format: int32
       * @description Total rolls of the ballots with "nay" vote (only for exploration and promotion periods)
       */
      nayRolls?: number | null
      /**
       * Format: int32
       * @description The number of the ballots with "pass" vote (only for exploration and promotion periods)
       */
      passBallots?: number | null
      /**
       * Format: int32
       * @description Total rolls of the ballots with "pass" vote (only for exploration and promotion periods)
       */
      passRolls?: number | null
    }
    VoterSnapshot: {
      /** @description Voter identity */
      delegate?: Components['schemas']['Alias'] | null
      /**
       * Format: int32
       * @description Voter's rolls snapshot (aka voting power)
       */
      rolls?: number
      /**
       * @description Voter's status:
       * `none` - the voter did nothing
       * `upvoted` - the voter upvoted at least one proposal
       * `voted_yay` - the voter voted "yay"
       * `voted_nay` - the voter voted "nay"
       * `voted_pass` - the voter voted "pass"
       */
      status?: string | null
    }
    VoterStatusParameter: {
      /**
       * @description **Equal** filter mode (optional, i.e. `param.eq=123` is the same as `param=123`). \
       * Specify a voter status to get items where the specified field is equal to the specified value.
       *
       * Example: `?status=none`.
       */
      eq?: string | null
      /**
       * @description **Not equal** filter mode. \
       * Specify a voter status to get items where the specified field is not equal to the specified value.
       *
       * Example: `?status.ne=none`.
       */
      ne?: string | null
      /**
       * @description **In list** (any of) filter mode. \
       * Specify a comma-separated list of voter statuses to get items where the specified field is equal to one of the specified values.
       *
       * Example: `?status.in=voted_yay,voted_nay`.
       */
      in?: string[] | null
      /**
       * @description **Not in list** (none of) filter mode. \
       * Specify a comma-separated list of voter statuses to get items where the specified field is not equal to all the specified values.
       *
       * Example: `?status.ni=none,upvoted`.
       */
      ni?: string[] | null
    }
    VotingEpoch: {
      /**
       * Format: int32
       * @description Index of the voting epoch, starting from zero
       */
      index?: number
      /**
       * Format: int32
       * @description The height of the block in which the epoch starts
       */
      firstLevel?: number
      /**
       * Format: date-time
       * @description The timestamp of the block in which the epoch starts
       */
      startTime?: string
      /**
       * Format: int32
       * @description The height of the block in which the epoch ends
       */
      lastLevel?: number
      /**
       * Format: date-time
       * @description The timestamp of the block in which the epoch ends
       */
      endTime?: string
      /**
       * @description Status of the voting epoch:
       * `no_proposals` - there were no proposals proposed
       * `voting` - there was at least one proposal and the voting is in progress
       * `completed` - voting successfully completed and the proposal was accepted
       * `failed` - voting was not completed due to either quorum or supermajority was not reached
       */
      status?: string | null
      /** @description Voting periods in the epoch */
      periods?: Components['schemas']['VotingPeriod'][] | null
      /** @description Proposals pushed during the voting epoch (null, if there were no proposals). */
      proposals?: Components['schemas']['Proposal'][] | null
    }
  }
}

export interface operations {
  /** Returns a list of accounts. */
  Accounts_Get: {
    parameters: {
      query: {
        /** Filters accounts by type (`user`, `delegate`, `contract`, `ghost`). */
        type?: Components['schemas']['AccountTypeParameter'] | null
        /** Filters accounts by contract kind (`delegator_contract` or `smart_contract`) */
        kind?: Components['schemas']['ContractKindParameter'] | null
        /** Filters accounts by delegate. Allowed fields for `.eqx` mode: none. */
        delegate?: Components['schemas']['AccountParameter'] | null
        /** Filters accounts by balance */
        balance?: Components['schemas']['Int64Parameter'] | null
        /** Filters accounts by participation in staking */
        staked?: Components['schemas']['BoolParameter'] | null
        /** Filters accounts by last activity level (where the account was updated) */
        lastActivity?: Components['schemas']['Int32Parameter'] | null
        /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. */
        select?: Components['schemas']['SelectParameter'] | null
        /** Sorts delegators by specified field. Supported fields: `id` (default), `balance`, `firstActivity`, `lastActivity`, `numTransactions`, `numContracts`. */
        sort?: Components['schemas']['SortParameter'] | null
        /** Specifies which or how many items should be skipped */
        offset?: Components['schemas']['OffsetParameter'] | null
        /** Maximum number of items to return */
        limit?: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['Account'][]
        }
      }
    }
  }
  /** Returns a number of accounts. */
  Accounts_GetCount: {
    parameters: {
      query: {
        /** Filters accounts by type (`user`, `delegate`, `contract`, `ghost`). */
        type?: Components['schemas']['AccountTypeParameter'] | null
        /** Filters accounts by contract kind (`delegator_contract` or `smart_contract`) */
        kind?: Components['schemas']['ContractKindParameter'] | null
        /** Filters accounts by balance */
        balance?: Components['schemas']['Int64Parameter'] | null
        /** Filters accounts by participation in staking */
        staked?: Components['schemas']['BoolParameter'] | null
      }
    }
    responses: {
      200: {
        content: {
          'application/json': number
        }
      }
    }
  }
  /** Returns an account with the specified address. */
  Accounts_GetByAddress: {
    parameters: {
      path: {
        /** Account address (starting with tz or KT) */
        address: string | undefined
      }
      query: {
        /** Include or not account metadata */
        metadata?: boolean
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['Account']
        }
      }
    }
  }
  /** Returns a list of contracts created by (or related to) the specified account. */
  Accounts_GetContracts: {
    parameters: {
      path: {
        /** Account address (starting with tz or KT) */
        address: string | null
      }
      query: {
        /** Sorts contracts by specified field. Supported fields: `id` (default, desc), `balance`, `creationLevel`. */
        sort?: Components['schemas']['SortParameter'] | null
        /** Specifies which or how many items should be skipped */
        offset?: Components['schemas']['OffsetParameter'] | null
        /** Maximum number of items to return */
        limit?: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['RelatedContract'][]
        }
      }
    }
  }
  /** Returns a list of accounts delegated to the specified account. */
  Accounts_GetDelegators: {
    parameters: {
      path: {
        /** Account address (starting with tz) */
        address: string | null
      }
      query: {
        /** Filters delegators by type (`user`, `delegate`, `contract`, `ghost`). */
        type?: Components['schemas']['AccountTypeParameter'] | null
        /** Filters delegators by balance. */
        balance?: Components['schemas']['Int64Parameter'] | null
        /** Number of items to skip */
        delegationLevel?: Components['schemas']['Int32Parameter'] | null
        /** Sorts delegators by specified field. Supported fields: `delegationLevel` (default, desc), `balance`. */
        sort?: Components['schemas']['SortParameter'] | null
        /** Specifies which or how many items should be skipped */
        offset?: Components['schemas']['OffsetParameter'] | null
        /** Maximum number of items to return */
        limit?: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['Delegator'][]
        }
      }
    }
  }
  /**
   * Returns a list of operations related to the specified account.
   * Note: for better flexibility this endpoint accumulates query parameters (filters) of each `/operations/{type}` endpoint,
   * so a particular filter may affect several operation types containing this filter.
   * For example, if you specify an `initiator` it will affect all transactions, delegations and originations,
   * because all these types have an `initiator` field.
   */
  Accounts_GetOperations: {
    parameters: {
      path: {
        /** Account address (starting with tz or KT) */
        address: string | null
      }
      query: {
        /** Comma separated list of operation types to return (`endorsement`, `ballot`, `proposal`, `activation`, `double_baking`, `double_endorsing`, `nonce_revelation`, `delegation`, `origination`, `transaction`, `reveal`, `migration`, `revelation_penalty`, `baking`). If not specified then all operation types except `endorsement` and `baking` will be returned. */
        type?: string | null
        /** Filters transactions, delegations and originations by initiator. Allowed fields for `.eqx` mode: none. */
        initiator?: Components['schemas']['AccountParameter'] | null
        /** Filters transactions, delegations, originations, reveals and seed nonce revelations by sender. Allowed fields for `.eqx` mode: none. */
        sender?: Components['schemas']['AccountParameter'] | null
        /** Filters transactions by target. Allowed fields for `.eqx` mode: none. */
        target?: Components['schemas']['AccountParameter'] | null
        /** Filters delegations by prev delegate. Allowed fields for `.eqx` mode: none. */
        prevDelegate?: Components['schemas']['AccountParameter'] | null
        /** Filters delegations by new delegate. Allowed fields for `.eqx` mode: none. */
        newDelegate?: Components['schemas']['AccountParameter'] | null
        /** Filters origination operations by manager. Allowed fields for `.eqx` mode: none. */
        contractManager?: Components['schemas']['AccountParameter'] | null
        /** Filters origination operations by delegate. Allowed fields for `.eqx` mode: none. */
        contractDelegate?: Components['schemas']['AccountParameter'] | null
        /** Filters origination operations by originated contract. Allowed fields for `.eqx` mode: none. */
        originatedContract?: Components['schemas']['AccountParameter'] | null
        /** Filters double baking and double endorsing by accuser. Allowed fields for `.eqx` mode: none. */
        accuser?: Components['schemas']['AccountParameter'] | null
        /** Filters double baking and double endorsing by offender. Allowed fields for `.eqx` mode: none. */
        offender?: Components['schemas']['AccountParameter'] | null
        /** Filters seed nonce revelation operations by baker. Allowed fields for `.eqx` mode: none. */
        baker?: Components['schemas']['AccountParameter'] | null
        /** Filters operations by level. */
        level?: Components['schemas']['Int32Parameter'] | null
        /** Filters operations by timestamp. */
        timestamp?: Components['schemas']['DateTimeParameter'] | null
        /** Filters transactions by entrypoint called on the target contract. */
        entrypoint?: Components['schemas']['StringParameter'] | null
        /**
         * Filters transactions by parameter value. Note, this query parameter supports the following format: `?parameter{.path?}{.mode?}=...`,
         *             so you can specify a path to a particular field to filter by, for example: `?parameter.token_id=...` or `?parameter.sigs.0.ne=...`.
         */
        parameter?: Components['schemas']['JsonParameter'] | null
        /** Filters transactions by presence of internal operations. */
        hasInternals?: Components['schemas']['BoolParameter'] | null
        /** Filters transactions, delegations, originations and reveals by operation status (`applied`, `failed`, `backtracked`, `skipped`). */
        status?: Components['schemas']['OperationStatusParameter'] | null
        /** Sort mode (0 - ascending, 1 - descending), operations of different types can only be sorted by ID. */
        sort?: Components['schemas']['SortMode']
        /** Id of the last operation received, which is used as an offset for pagination */
        lastId?: number | null
        /** Number of items to return */
        limit?: number
        /** Format of the parameters, storage and diffs: `0` - JSON, `1` - JSON string, `2` - raw micheline, `3` - raw micheline string */
        micheline?: Components['schemas']['MichelineFormat']
        /** Comma-separated list of ticker symbols to inject historical prices into response */
        quote?: Components['schemas']['Symbols']
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['Operation'][]
        }
      }
    }
  }
  /** Returns metadata of the specified account (alias, logo, website, contacts, etc). */
  Accounts_GetMetadata: {
    parameters: {
      path: {
        /** Account address (starting with tz or KT) */
        address: string | null
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['ProfileMetadata']
        }
      }
    }
  }
  /** Returns account counter */
  Accounts_GetCounter: {
    parameters: {
      path: {
        /** Account address (starting with tz or KT) */
        address: string | null
      }
    }
    responses: {
      200: {
        content: {
          'application/json': number
        }
      }
    }
  }
  /** Returns account balance */
  Accounts_GetBalance: {
    parameters: {
      path: {
        /** Account address (starting with tz or KT) */
        address: string | null
      }
    }
    responses: {
      200: {
        content: {
          'application/json': number
        }
      }
    }
  }
  /** Returns account balance at the specified block */
  Accounts_GetBalanceAtLevel: {
    parameters: {
      path: {
        /** Account address (starting with tz or KT) */
        address: string | null
        /** Block height at which you want to know account balance */
        level: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': number
        }
      }
    }
  }
  /** Returns account balance at the specified datetime */
  Accounts_GetBalanceAtDate: {
    parameters: {
      path: {
        /** Account address (starting with tz or KT) */
        address: string | null
        /** Datetime at which you want to know account balance (e.g. `2020-01-01`, or `2019-12-30T23:42:59Z`) */
        datetime: string
      }
    }
    responses: {
      200: {
        content: {
          'application/json': number
        }
      }
    }
  }
  /** Returns time series with historical balances (only changes, without duplicates). */
  Accounts_GetBalanceHistory: {
    parameters: {
      path: {
        /** Account address (starting with tz or KT) */
        address: string | undefined
      }
      query: {
        /** Step of the time series, for example if `step = 1000` you will get balances at blocks `1000, 2000, 3000, ...`. */
        step?: number | null
        /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. */
        select?: Components['schemas']['SelectParameter'] | null
        /** Sorts historical balances by specified field. Supported fields: `level`. */
        sort?: Components['schemas']['SortParameter'] | null
        /** Specifies which or how many items should be skipped */
        offset?: number
        /** Maximum number of items to return */
        limit?: number
        /** Comma-separated list of ticker symbols to inject historical prices into response */
        quote?: Components['schemas']['Symbols']
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['HistoricalBalance'][]
        }
      }
    }
  }
  /** Exports account balance report in .csv format */
  Accounts_GetBalanceReport: {
    parameters: {
      path: {
        /** Account address (starting with tz or KT) */
        address: string | null
      }
      query: {
        /** Start of the datetime range to filter by (ISO 8601, e.g. 2019-11-31) */
        from?: string | null
        /** End of the datetime range to filter by (ISO 8601, e.g. 2019-12-31) */
        to?: string | null
        /** Currency to convert amounts to (`btc`, `eur`, `usd`, `cny`, `jpy`, `krw`, `eth`, `gbp`) */
        currency?: string | null
        /** `true` if you want to use historical prices, `false` to use current price */
        historical?: boolean
        /** Column delimiter (`comma`, `semicolon`) */
        delimiter?: string | null
        /** Decimal separator (`comma`, `point`) */
        separator?: string | null
      }
    }
    responses: {
      200: {
        content: {
          'application/octet-stream': string
        }
      }
    }
  }
  /** Returns the total number of bigmaps. */
  BigMaps_GetBigMapsCount: {
    responses: {
      200: {
        content: {
          'application/json': number
        }
      }
    }
  }
  /** Returns a list of bigmaps. */
  BigMaps_GetBigMaps: {
    parameters: {
      query: {
        /** Filters bigmaps by smart contract address. */
        contract?: Components['schemas']['AccountParameter'] | null
        /** Filters bigmaps by path in the contract storage. */
        path?: Components['schemas']['StringParameter'] | null
        /** Filters bigmaps by tags: `token_metadata` - tzip-12, `metadata` - tzip-16. */
        tags?: Components['schemas']['BigMapTagsParameter'] | null
        /** Filters bigmaps by status: `true` - active, `false` - removed. */
        active?: boolean | null
        /** Filters bigmaps by the last update level. */
        lastLevel?: Components['schemas']['Int32Parameter'] | null
        /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. */
        select?: Components['schemas']['SelectParameter'] | null
        /** Sorts bigmaps by specified field. Supported fields: `id` (default), `ptr`, `firstLevel`, `lastLevel`, `totalKeys`, `activeKeys`, `updates`. */
        sort?: Components['schemas']['SortParameter'] | null
        /** Specifies which or how many items should be skipped */
        offset?: Components['schemas']['OffsetParameter'] | null
        /** Maximum number of items to return */
        limit?: number
        /** Format of the bigmap key and value type: `0` - JSON, `2` - Micheline */
        micheline?: Components['schemas']['MichelineFormat']
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['BigMap'][]
        }
      }
    }
  }
  /** Returns a list of all bigmap updates. */
  BigMaps_GetBigMapUpdates: {
    parameters: {
      query: {
        /** Filters updates by bigmap ptr */
        bigmap?: Components['schemas']['Int32Parameter'] | null
        /** Filters updates by bigmap path */
        path?: Components['schemas']['StringParameter'] | null
        /** Filters updates by bigmap contract */
        contract?: Components['schemas']['AccountParameter'] | null
        /** Filters updates by bigmap tags: `token_metadata` - tzip-12, `metadata` - tzip-16 */
        tags?: Components['schemas']['BigMapTagsParameter'] | null
        /** Filters updates by action */
        action?: Components['schemas']['BigMapActionParameter'] | null
        /**
         * Filters updates by JSON value. Note, this query parameter supports the following format: `?value{.path?}{.mode?}=...`,
         *             so you can specify a path to a particular field to filter by, for example: `?value.balance.gt=...`.
         */
        value?: Components['schemas']['JsonParameter'] | null
        /** Filters updates by level */
        level?: Components['schemas']['Int32Parameter'] | null
        /** Filters updates by timestamp. */
        timestamp?: Components['schemas']['TimestampParameter'] | null
        /** Sorts bigmaps by specified field. Supported fields: `id` (default), `ptr`, `firstLevel`, `lastLevel`, `totalKeys`, `activeKeys`, `updates`. */
        sort?: Components['schemas']['SortParameter'] | null
        /** Specifies which or how many items should be skipped */
        offset?: Components['schemas']['OffsetParameter'] | null
        /** Maximum number of items to return */
        limit?: number
        /** Format of the bigmap key and value type: `0` - JSON, `2` - Micheline */
        micheline?: Components['schemas']['MichelineFormat']
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['BigMapUpdate'][]
        }
      }
    }
  }
  /** Returns a bigmap with the specified Id. */
  BigMaps_GetBigMapById: {
    parameters: {
      path: {
        /** Bigmap Id */
        id: number
      }
      query: {
        /** Format of the bigmap key and value type: `0` - JSON, `2` - Micheline */
        micheline?: Components['schemas']['MichelineFormat']
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['BigMap']
        }
      }
    }
  }
  /** Returns a type of the bigmap with the specified Id in Micheline format (with annotations). */
  BigMaps_GetBigMapType: {
    parameters: {
      path: {
        /** Bigmap Id */
        id: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['MichelinePrim']
        }
      }
    }
  }
  /** Returns a list of bigmap keys. */
  BigMaps_GetKeys: {
    parameters: {
      path: {
        /** Bigmap Id */
        id: number
      }
      query: {
        /** Filters keys by status: `true` - active, `false` - removed. */
        active?: boolean | null
        /**
         * Filters keys by JSON key. Note, this query parameter supports the following format: `?key{.path?}{.mode?}=...`,
         *             so you can specify a path to a particular field to filter by, for example: `?key.token_id=...`.
         */
        key?: Components['schemas']['JsonParameter'] | null
        /**
         * Filters keys by JSON value. Note, this query parameter supports the following format: `?value{.path?}{.mode?}=...`,
         *             so you can specify a path to a particular field to filter by, for example: `?value.balance.gt=...`.
         */
        value?: Components['schemas']['JsonParameter'] | null
        /** Filters bigmap keys by the last update level. */
        lastLevel?: Components['schemas']['Int32Parameter'] | null
        /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. */
        select?: Components['schemas']['SelectParameter'] | null
        /** Sorts bigmap keys by specified field. Supported fields: `id` (default), `firstLevel`, `lastLevel`, `updates`. */
        sort?: Components['schemas']['SortParameter'] | null
        /** Specifies which or how many items should be skipped */
        offset?: Components['schemas']['OffsetParameter'] | null
        /** Maximum number of items to return */
        limit?: number
        /** Format of the bigmap key and value: `0` - JSON, `1` - JSON string, `2` - Micheline, `3` - Micheline string */
        micheline?: Components['schemas']['MichelineFormat']
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['BigMapKey'][]
        }
      }
    }
  }
  /** Returns the specified bigmap key. */
  BigMaps_GetKey: {
    parameters: {
      path: {
        /** Bigmap Id */
        id: number
        /**
         * Either a key hash (`expr123...`) or a plain value (`abcde...`).
         *             Even if the key is complex (an object or an array), you can specify it as is, for example, `/keys/{"address":"tz123","nat":"123"}`.
         */
        key: string | null
      }
      query: {
        /** Format of the bigmap key and value: `0` - JSON, `1` - JSON string, `2` - Micheline, `3` - Micheline string */
        micheline?: Components['schemas']['MichelineFormat']
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['BigMapKey']
        }
      }
    }
  }
  /** Returns updates history for the specified bigmap key. */
  BigMaps_GetKeyUpdates: {
    parameters: {
      path: {
        /** Bigmap Id */
        id: number
        /**
         * Either a key hash (`expr123...`) or a plain value (`abcde...`).
         *             Even if the key is complex (an object or an array), you can specify it as is, for example, `/keys/{"address":"tz123","nat":"123"}`.
         */
        key: string | null
      }
      query: {
        /** Sorts bigmap updates by specified field. Supported fields: `id` (default). */
        sort?: Components['schemas']['SortParameter'] | null
        /** Specifies which or how many items should be skipped */
        offset?: Components['schemas']['OffsetParameter'] | null
        /** Maximum number of items to return */
        limit?: number
        /** Format of the key value: `0` - JSON, `1` - JSON string, `2` - Micheline, `3` - Micheline string */
        micheline?: Components['schemas']['MichelineFormat']
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['BigMapKeyUpdate'][]
        }
      }
    }
  }
  /** Returns a list of bigmap keys at the specific block. */
  BigMaps_GetHistoricalKeys: {
    parameters: {
      path: {
        /** Bigmap Id */
        id: number
        /** Level of the block at which you want to get bigmap keys */
        level: number
      }
      query: {
        /** Filters keys by status: `true` - active, `false` - removed. */
        active?: boolean | null
        /**
         * Filters keys by JSON key. Note, this query parameter supports the following format: `?key{.path?}{.mode?}=...`,
         *             so you can specify a path to a particular field to filter by, for example: `?key.token_id=...`.
         */
        key?: Components['schemas']['JsonParameter'] | null
        /**
         * Filters keys by JSON value. Note, this query parameter supports the following format: `?value{.path?}{.mode?}=...`,
         *             so you can specify a path to a particular field to filter by, for example: `?value.balance.gt=...`.
         */
        value?: Components['schemas']['JsonParameter'] | null
        /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. */
        select?: Components['schemas']['SelectParameter'] | null
        /** Sorts bigmap keys by specified field. Supported fields: `id` (default). */
        sort?: Components['schemas']['SortParameter'] | null
        /** Specifies which or how many items should be skipped */
        offset?: Components['schemas']['OffsetParameter'] | null
        /** Maximum number of items to return */
        limit?: number
        /** Format of the bigmap key and value: `0` - JSON, `1` - JSON string, `2` - Micheline, `3` - Micheline string */
        micheline?: Components['schemas']['MichelineFormat']
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['BigMapKeyHistorical'][]
        }
      }
    }
  }
  /** Returns the specified bigmap key at the specific block. */
  BigMaps_GetKey2: {
    parameters: {
      path: {
        /** Bigmap Id */
        id: number
        /** Level of the block at which you want to get bigmap key */
        level: number
        /**
         * Either a key hash (`expr123...`) or a plain value (`abcde...`).
         *             Even if the key is complex (an object or an array), you can specify it as is, for example, `/keys/{"address":"tz123","nat":"123"}`.
         */
        key: string | null
      }
      query: {
        /** Format of the bigmap key and value: `0` - JSON, `1` - JSON string, `2` - Micheline, `3` - Micheline string */
        micheline?: Components['schemas']['MichelineFormat']
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['BigMapKeyHistorical']
        }
      }
    }
  }
  /** Returns the total number of blocks. */
  Blocks_GetCount: {
    responses: {
      200: {
        content: {
          'application/json': number
        }
      }
    }
  }
  /** Returns a list of blocks. */
  Blocks_Get: {
    parameters: {
      query: {
        /** Filters blocks by baker. Allowed fields for `.eqx` mode: none. */
        baker?: Components['schemas']['AccountParameter'] | null
        /** Filters blocks by level. */
        level?: Components['schemas']['Int32Parameter'] | null
        /** Filters blocks by timestamp. */
        timestamp?: Components['schemas']['DateTimeParameter'] | null
        /** Filters blocks by priority. */
        priority?: Components['schemas']['Int32Parameter'] | null
        /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. */
        select?: Components['schemas']['SelectParameter'] | null
        /** Sorts blocks by specified field. Supported fields: `id` (default), `level`, `priority`, `validations`, `reward`, `fees`. */
        sort?: Components['schemas']['SortParameter'] | null
        /** Specifies which or how many items should be skipped */
        offset?: Components['schemas']['OffsetParameter'] | null
        /** Maximum number of items to return */
        limit?: number
        /** Comma-separated list of ticker symbols to inject historical prices into response */
        quote?: Components['schemas']['Symbols']
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['Block'][]
        }
      }
    }
  }
  /** Returns a block with the specified hash. */
  Blocks_GetByHash: {
    parameters: {
      path: {
        /** Block hash */
        hash: string | null
      }
      query: {
        /** Flag indicating whether to include block operations into returned object or not */
        operations?: boolean
        /** Format of the parameters, storage and diffs: `0` - JSON, `1` - JSON string, `2` - raw micheline, `3` - raw micheline string */
        micheline?: Components['schemas']['MichelineFormat']
        /** Comma-separated list of ticker symbols to inject historical prices into response */
        quote?: Components['schemas']['Symbols']
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['Block']
        }
      }
    }
  }
  /** Returns a block at the specified level. */
  Blocks_GetByLevel: {
    parameters: {
      path: {
        /** Block level */
        level: number
      }
      query: {
        /** Flag indicating whether to include block operations into returned object or not */
        operations?: boolean
        /** Format of the parameters, storage and diffs: `0` - JSON, `1` - JSON string, `2` - raw micheline, `3` - raw micheline string */
        micheline?: Components['schemas']['MichelineFormat']
        /** Comma-separated list of ticker symbols to inject historical prices into response */
        quote?: Components['schemas']['Symbols']
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['Block']
        }
      }
    }
  }
  /** Returns a commitment with the specified blinded address. */
  Commitments_Get: {
    parameters: {
      path: {
        /** Blinded address (starting with btz) */
        address: string | null
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['Commitment']
        }
      }
    }
  }
  /** Returns a list of commitments. */
  Commitments_GetAll: {
    parameters: {
      query: {
        /** Filters commitments by activation status */
        activated?: boolean | null
        /** Filters commitments by activation level */
        activationLevel?: Components['schemas']['Int32NullParameter'] | null
        /** Filters commitments by activated balance */
        balance?: Components['schemas']['Int64Parameter'] | null
        /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. */
        select?: Components['schemas']['SelectParameter'] | null
        /** Sorts delegators by specified field. Supported fields: `id` (default), `balance`, `activationLevel`. */
        sort?: Components['schemas']['SortParameter'] | null
        /** Specifies which or how many items should be skipped */
        offset?: Components['schemas']['OffsetParameter'] | null
        /** Maximum number of items to return */
        limit?: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['Commitment'][]
        }
      }
    }
  }
  /** Returns a number of commitments. */
  Commitments_GetCount: {
    parameters: {
      query: {
        /** Filters commitments by activation status */
        activated?: boolean | null
        /** Filters commitments by activated balance */
        balance?: Components['schemas']['Int64Parameter'] | null
      }
    }
    responses: {
      200: {
        content: {
          'application/json': number
        }
      }
    }
  }
  /** Returns a list of global constants. */
  Constants_Get: {
    parameters: {
      query: {
        /** Filters constants by global address (starts with `expr..`). */
        address?: Components['schemas']['ExpressionParameter'] | null
        /** Filters constants by creation level. */
        creationLevel?: Components['schemas']['Int32Parameter'] | null
        /** Filters constants by creation time. */
        creationTime?: Components['schemas']['TimestampParameter'] | null
        /** Filters constants by creator. */
        creator?: Components['schemas']['AccountParameter'] | null
        /** Filters constants by number of refs. */
        refs?: Components['schemas']['Int32Parameter'] | null
        /** Filters constants by size in bytes. */
        size?: Components['schemas']['Int32Parameter'] | null
        /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. */
        select?: Components['schemas']['SelectParameter'] | null
        /** Sorts delegators by specified field. Supported fields: `id` (default), `creationLevel`, `size`, `refs`. */
        sort?: Components['schemas']['SortParameter'] | null
        /** Specifies which or how many items should be skipped */
        offset?: Components['schemas']['OffsetParameter'] | null
        /** Maximum number of items to return */
        limit?: number
        /** Constant value format (`0` - micheline, `1` - michelson, `2` - bytes (base64)) */
        format?: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['Constant'][]
        }
      }
    }
  }
  /** Returns global constant with specified address (expression hash). */
  Constants_GetByAddress: {
    parameters: {
      path: {
        /** Global address (starts with `expr..`) */
        address: string | null
      }
      query: {
        /** Constant value format (`0` - micheline, `1` - michelson, `2` - bytes (base64)) */
        format?: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['Constant']
        }
      }
    }
  }
  /** Returns a number of global constants. */
  Constants_GetCount: {
    parameters: {
      query: {
        /** Filters constants by number of refs. */
        refs?: Components['schemas']['Int32Parameter'] | null
      }
    }
    responses: {
      200: {
        content: {
          'application/json': number
        }
      }
    }
  }
  /** Returns a list of contract accounts. */
  Contracts_Get: {
    parameters: {
      query: {
        /** Contract kind to filter by (`delegator_contract` or `smart_contract`) */
        kind?: Components['schemas']['ContractKindParameter'] | null
        /** Filters contracts by creator. Allowed fields for `.eqx` mode: `manager`, `delegate`. */
        creator?: Components['schemas']['AccountParameter'] | null
        /** Filters contracts by manager. Allowed fields for `.eqx` mode: `creator`, `delegate`. */
        manager?: Components['schemas']['AccountParameter'] | null
        /** Filters contracts by delegate. Allowed fields for `.eqx` mode: `manager`, `creator`. */
        delegate?: Components['schemas']['AccountParameter'] | null
        /** Filters contracts by balance */
        balance?: Components['schemas']['Int64Parameter'] | null
        /** Filters contracts by last activity level (where the contract was updated) */
        lastActivity?: Components['schemas']['Int32Parameter'] | null
        /** Filters contracts by 32-bit hash of contract parameter and storage types (helpful for searching similar contracts) */
        typeHash?: Components['schemas']['Int32Parameter'] | null
        /** Filters contracts by 32-bit hash of contract code (helpful for searching same contracts) */
        codeHash?: Components['schemas']['Int32Parameter'] | null
        /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. */
        select?: Components['schemas']['SelectParameter'] | null
        /** Sorts contracts by specified field. Supported fields: `id` (default), `balance`, `firstActivity`, `lastActivity`, `numTransactions`. */
        sort?: Components['schemas']['SortParameter'] | null
        /** Specifies which or how many items should be skipped */
        offset?: Components['schemas']['OffsetParameter'] | null
        /** Maximum number of items to return */
        limit?: number
        /** Specifies whether to include contract storage value in response. */
        includeStorage?: boolean
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['Contract'][]
        }
      }
    }
  }
  /** Returns a number of contract accounts. */
  Contracts_GetCount: {
    parameters: {
      query: {
        /** Contract kind to filter by (`delegator_contract` or `smart_contract`) */
        kind?: Components['schemas']['ContractKindParameter'] | null
      }
    }
    responses: {
      200: {
        content: {
          'application/json': number
        }
      }
    }
  }
  /** Returns a contract account with the specified address. */
  Contracts_GetByAddress: {
    parameters: {
      path: {
        /** Contract address (starting with KT) */
        address: string | null
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['Contract']
        }
      }
    }
  }
  /**
   * Returns contracts which have the same script as the specified one.
   * Note, contract scripts are compared by 32-bit hash, so in very rare cases there may be collisions.
   */
  Contracts_GetSame: {
    parameters: {
      path: {
        /** Contract address (starting with KT) */
        address: string | null
      }
      query: {
        /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. */
        select?: Components['schemas']['SelectParameter'] | null
        /** Sorts contracts by specified field. Supported fields: `id` (default), `balance`, `firstActivity`, `lastActivity`, `numTransactions`. */
        sort?: Components['schemas']['SortParameter'] | null
        /** Specifies which or how many items should be skipped */
        offset?: Components['schemas']['OffsetParameter'] | null
        /** Maximum number of items to return */
        limit?: number
        /** Specifies whether to include contract storage value in response. */
        includeStorage?: boolean
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['Contract'][]
        }
      }
    }
  }
  /**
   * Returns contracts which have the same interface (parameter and storage types) as the specified one.
   * Note, contract parameter and storage types are compared by 32-bit hash, so in very rare cases there may be collisions.
   */
  Contracts_GetSimilar: {
    parameters: {
      path: {
        /** Contract address (starting with KT) */
        address: string | null
      }
      query: {
        /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. */
        select?: Components['schemas']['SelectParameter'] | null
        /** Sorts contracts by specified field. Supported fields: `id` (default), `balance`, `firstActivity`, `lastActivity`, `numTransactions`. */
        sort?: Components['schemas']['SortParameter'] | null
        /** Specifies which or how many items should be skipped */
        offset?: Components['schemas']['OffsetParameter'] | null
        /** Maximum number of items to return */
        limit?: number
        /** Specifies whether to include contract storage value in response. */
        includeStorage?: boolean
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['Contract'][]
        }
      }
    }
  }
  /** Returns a code of the specified contract. */
  Contracts_GetCode: {
    parameters: {
      path: {
        /** Contract address (starting with KT) */
        address: string | null
      }
      query: {
        /** Level at which contract code should be taken. If `0` or not specified, the current value will be returned. */
        level?: number
        /** Code format (`0` - micheline, `1` - michelson, `2` - bytes (base64)) */
        format?: number
      }
    }
    responses: {
      200: {
        content: {
          'application/octet-stream': string
        }
      }
    }
  }
  /** Returns standard JSON Schema for contract storage, entrypoints, and Big_map entries. */
  Contracts_GetInterface: {
    parameters: {
      path: {
        /** Contract address */
        address: string | null
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['ContractInterface']
        }
      }
    }
  }
  /** Returns entrypoints of the specified contract. */
  Contracts_GetEntrypoints: {
    parameters: {
      path: {
        /** Contract address (starting with KT) */
        address: string | null
      }
      query: {
        /**
         * If true, returns all entrypoints, including unused ones.
         *             Unused means that the entrypoint can be normalized to a more specific one.
         *             For example here `(or %entry1 (unit %entry2) (nat %entry3))` the `%entry1` is unused entrypoint
         *             because it can be normalized to `%entry2` or `%entry3`
         */
        all?: boolean
        /** Include parameters schema in human-readable JSON format */
        json?: boolean
        /** Include parameters schema in micheline format */
        micheline?: boolean
        /** Include parameters schema in michelson format */
        michelson?: boolean
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['Entrypoint'][]
        }
      }
    }
  }
  /** Returns contract's entrypoint with specified name. */
  Contracts_GetEntrypointByName: {
    parameters: {
      path: {
        /** Contract address (starting with KT) */
        address: string | null
        /** Entrypoint name */
        name: string | null
      }
      query: {
        /** Include parameters schema in human-readable JSON format */
        json?: boolean
        /** Include parameters schema in micheline format */
        micheline?: boolean
        /** Include parameters schema in michelson format */
        michelson?: boolean
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['Entrypoint']
        }
      }
    }
  }
  /** Returns all views of the specified contract. */
  Contracts_GetContractViews: {
    parameters: {
      path: {
        /** Contract address (starting with KT) */
        address: string | null
      }
      query: {
        /** Include parameter and return types in human-readable JSON format */
        json?: boolean
        /** Include parameter and return types in micheline format */
        micheline?: boolean
        /** Include parameter and return types in michelson format */
        michelson?: boolean
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['ContractView'][]
        }
      }
    }
  }
  /** Returns contract view with specified name. */
  Contracts_GetContractViewByName: {
    parameters: {
      path: {
        /** Contract address (starting with KT) */
        address: string | null
        /** View name */
        name: string | null
      }
      query: {
        /** Include parameter and return types in human-readable JSON format */
        json?: boolean
        /** Include parameter and return types in micheline format */
        micheline?: boolean
        /** Include parameter and return types in michelson format */
        michelson?: boolean
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['ContractView']
        }
      }
    }
  }
  /** Returns micheline parameters converted from its JSON representation. */
  Contracts_BuildEntrypointParametersGET: {
    parameters: {
      path: {
        /** Contract address */
        address: string | null
        /** Entrypoint name */
        name: string | null
      }
      query: {
        /** Json parameters */
        value?: string | null
      }
    }
    responses: {
      200: {
        content: {
          'application/octet-stream': string
        }
      }
    }
  }
  /** Returns micheline parameters converted from its JSON representation. */
  Contracts_BuildEntrypointParametersPOST: {
    parameters: {
      path: {
        /** Contract address */
        address: string | null
        /** Entrypoint name */
        name: string | null
      }
    }
    responses: {
      200: {
        content: {
          'application/octet-stream': string
        }
      }
    }
    /** Json parameters */
    requestBody: {
      content: {
        'application/json': unknown
      }
    }
  }
  /** Returns contract storage value in JSON format. */
  Contracts_GetStorage: {
    parameters: {
      path: {
        /** Contract address */
        address: string | null
      }
      query: {
        /** Level at which storage value should be taken. If `0` or not specified, the current value will be returned. */
        level?: number
        /** Path in the JSON value (point-separated list of field names, e.g. `path=settings.refund_time` to return */
        path?: string | null
      }
    }
    responses: {
      200: {
        content: {
          'application/octet-stream': string
        }
      }
    }
  }
  /** Returns JSON schema of the contract storage. */
  Contracts_GetStorageSchema: {
    parameters: {
      path: {
        /** Contract address */
        address: string | null
      }
      query: {
        /** Level at which storage schema should be taken. If `0` or not specified, the current schema will be returned. */
        level?: number
      }
    }
    responses: {
      200: {
        content: {
          'application/octet-stream': string
        }
      }
    }
  }
  /** Returns contract storage historical values. */
  Contracts_GetStorageHistory: {
    parameters: {
      path: {
        /** Contract address */
        address: string | null
      }
      query: {
        /** Id of the last item received (for pagination) */
        lastId?: number
        /** Maximum number of items to return */
        limit?: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['StorageRecord'][]
        }
      }
    }
  }
  /** Returns raw contract storage value in micheline format. */
  Contracts_GetRawStorage: {
    parameters: {
      path: {
        /** Contract address */
        address: string | null
      }
      query: {
        /** Level at which storage value should be taken. If `0` or not specified, the current value will be returned. */
        level?: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['IMicheline']
        }
      }
    }
  }
  /** Returns micheline schema (type) of the contract storage. */
  Contracts_GetRawStorageSchema: {
    parameters: {
      path: {
        /** Contract address */
        address: string | null
      }
      query: {
        /** Level at which storage schema should be taken. If `0` or not specified, the current schema will be returned. */
        level?: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['IMicheline']
        }
      }
    }
  }
  /** Returns raw contract storage historical values. */
  Contracts_GetRawStorageHistory: {
    parameters: {
      path: {
        /** Contract address */
        address: string | null
      }
      query: {
        /** Id of the last item received (for pagination) */
        lastId?: number
        /** Maximum number of items to return */
        limit?: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['StorageRecord'][]
        }
      }
    }
  }
  /** Returns all active bigmaps allocated in the contract storage. */
  Contracts_GetBigMaps: {
    parameters: {
      path: {
        /** Contract address */
        address: string | null
      }
      query: {
        /** Filters bigmaps tags (`token_metadata` - tzip-12, `metadata` - tzip-16). */
        tags?: Components['schemas']['BigMapTagsParameter'] | null
        /**
         * Specify comma-separated list of fields to include into response or leave it undefined to return full object.
         *             If you select single field, response will be an array of values in both `.fields` and `.values` modes.
         */
        select?: Components['schemas']['SelectParameter'] | null
        /** Sorts bigmaps by specified field. Supported fields: `id` (default), `firstLevel`, `lastLevel`, `totalKeys`, `activeKeys`, `updates`. */
        sort?: Components['schemas']['SortParameter'] | null
        /** Specifies which or how many items should be skipped */
        offset?: Components['schemas']['OffsetParameter'] | null
        /** Maximum number of items to return */
        limit?: number
        /** Format of the bigmap key and value: `0` - JSON, `1` - JSON string, `2` - Micheline, `3` - Micheline string */
        micheline?: Components['schemas']['MichelineFormat']
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['BigMap'][]
        }
      }
    }
  }
  /** Returns contract bigmap with the specified name or storage path. */
  Contracts_GetBigMapByName: {
    parameters: {
      path: {
        /** Contract address */
        address: string | null
        /**
         * Bigmap name is the last piece of the bigmap storage path.
         *             For example, if the storage path is `ledger` or `assets.ledger`, then the name is `ledger`.
         *             If there are multiple bigmaps with the same name, for example `assets.ledger` and `tokens.ledger`, you can specify the full path.
         */
        name: string | null
      }
      query: {
        /** Format of the bigmap key and value: `0` - JSON, `1` - JSON string, `2` - Micheline, `3` - Micheline string */
        micheline?: Components['schemas']['MichelineFormat']
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['BigMap']
        }
      }
    }
  }
  /** Returns keys of a contract bigmap with the specified name. */
  Contracts_GetBigMapByNameKeys: {
    parameters: {
      path: {
        /** Contract address */
        address: string | null
        /**
         * Bigmap name is the last piece of the bigmap storage path.
         *             For example, if the storage path is `ledger` or `assets.ledger`, then the name is `ledger`.
         *             If there are multiple bigmaps with the same name, for example `assets.ledger` and `tokens.ledger`, you can specify the full path.
         */
        name: string | null
      }
      query: {
        /** Filters keys by status: `true` - active, `false` - removed. */
        active?: boolean | null
        /**
         * Filters keys by JSON key. Note, this query parameter supports the following format: `?key{.path?}{.mode?}=...`,
         *             so you can specify a path to a particular field to filter by, for example: `?key.token_id=...`.
         */
        key?: Components['schemas']['JsonParameter'] | null
        /**
         * Filters keys by JSON value. Note, this query parameter supports the following format: `?value{.path?}{.mode?}=...`,
         *             so you can specify a path to a particular field to filter by, for example: `?value.balance.gt=...`.
         */
        value?: Components['schemas']['JsonParameter'] | null
        /** Filters bigmap keys by the last update level. */
        lastLevel?: Components['schemas']['Int32Parameter'] | null
        /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. */
        select?: Components['schemas']['SelectParameter'] | null
        /** Sorts bigmap keys by specified field. Supported fields: `id` (default), `firstLevel`, `lastLevel`, `updates`. */
        sort?: Components['schemas']['SortParameter'] | null
        /** Specifies which or how many items should be skipped */
        offset?: Components['schemas']['OffsetParameter'] | null
        /** Maximum number of items to return */
        limit?: number
        /** Format of the bigmap key and value: `0` - JSON, `1` - JSON string, `2` - Micheline, `3` - Micheline string */
        micheline?: Components['schemas']['MichelineFormat']
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['BigMapKey'][]
        }
      }
    }
  }
  /** Returns the specified bigmap key. */
  Contracts_GetKey: {
    parameters: {
      path: {
        /** Contract address */
        address: string | null
        /**
         * Bigmap name is the last piece of the bigmap storage path.
         *             For example, if the storage path is `ledger` or `assets.ledger`, then the name is `ledger`.
         *             If there are multiple bigmaps with the same name, for example `assets.ledger` and `tokens.ledger`, you can specify the full path.
         */
        name: string | null
        /**
         * Either a key hash (`expr123...`) or a plain value (`abcde...`).
         *             Even if the key is complex (an object or an array), you can specify it as is, for example, `/keys/{"address":"tz123","nat":"123"}`.
         */
        key: string | null
      }
      query: {
        /** Format of the bigmap key and value: `0` - JSON, `1` - JSON string, `2` - Micheline, `3` - Micheline string */
        micheline?: Components['schemas']['MichelineFormat']
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['BigMapKey']
        }
      }
    }
  }
  /** Returns updates history for the specified bigmap key. */
  Contracts_GetKeyUpdates: {
    parameters: {
      path: {
        /** Contract address */
        address: string | null
        /**
         * Bigmap name is the last piece of the bigmap storage path.
         *             For example, if the storage path is `ledger` or `assets.ledger`, then the name is `ledger`.
         *             If there are multiple bigmaps with the same name, for example `assets.ledger` and `tokens.ledger`, you can specify the full path.
         */
        name: string | null
        /**
         * Either a key hash (`expr123...`) or a plain value (`abcde...`).
         *             Even if the key is complex (an object or an array), you can specify it as is, for example, `/keys/{"address":"tz123","nat":"123"}`.
         */
        key: string | null
      }
      query: {
        /** Sorts bigmap updates by specified field. Supported fields: `id` (default). */
        sort?: Components['schemas']['SortParameter'] | null
        /** Specifies which or how many items should be skipped */
        offset?: Components['schemas']['OffsetParameter'] | null
        /** Maximum number of items to return */
        limit?: number
        /** Format of the key value: `0` - JSON, `1` - JSON string, `2` - Micheline, `3` - Micheline string */
        micheline?: Components['schemas']['MichelineFormat']
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['BigMapKeyUpdate'][]
        }
      }
    }
  }
  /** Returns a list of bigmap keys at the specific block. */
  Contracts_GetHistoricalKeys: {
    parameters: {
      path: {
        /** Contract address */
        address: string | null
        /**
         * Bigmap name is the last piece of the bigmap storage path.
         *             For example, if the storage path is `ledger` or `assets.ledger`, then the name is `ledger`.
         *             If there are multiple bigmaps with the same name, for example `assets.ledger` and `tokens.ledger`, you can specify the full path.
         */
        name: string | null
        /** Level of the block at which you want to get bigmap keys */
        level: number
      }
      query: {
        /** Filters keys by status: `true` - active, `false` - removed. */
        active?: boolean | null
        /**
         * Filters keys by JSON key. Note, this query parameter supports the following format: `?key{.path?}{.mode?}=...`,
         *             so you can specify a path to a particular field to filter by, for example: `?key.token_id=...`.
         */
        key?: Components['schemas']['JsonParameter'] | null
        /**
         * Filters keys by JSON value. Note, this query parameter supports the following format: `?value{.path?}{.mode?}=...`,
         *             so you can specify a path to a particular field to filter by, for example: `?value.balance.gt=...`.
         */
        value?: Components['schemas']['JsonParameter'] | null
        /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. */
        select?: Components['schemas']['SelectParameter'] | null
        /** Sorts bigmap keys by specified field. Supported fields: `id` (default). */
        sort?: Components['schemas']['SortParameter'] | null
        /** Specifies which or how many items should be skipped */
        offset?: Components['schemas']['OffsetParameter'] | null
        /** Maximum number of items to return */
        limit?: number
        /** Format of the bigmap key and value: `0` - JSON, `1` - JSON string, `2` - Micheline, `3` - Micheline string */
        micheline?: Components['schemas']['MichelineFormat']
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['BigMapKeyHistorical'][]
        }
      }
    }
  }
  /** Returns the specified bigmap key at the specific block. */
  Contracts_GetKey2: {
    parameters: {
      path: {
        /** Contract address */
        address: string | null
        /**
         * Bigmap name is the last piece of the bigmap storage path.
         *             For example, if the storage path is `ledger` or `assets.ledger`, then the name is `ledger`.
         *             If there are multiple bigmaps with the same name, for example `assets.ledger` and `tokens.ledger`, you can specify the full path.
         */
        name: string | null
        /** Level of the block at which you want to get bigmap key */
        level: number
        /**
         * Either a key hash (`expr123...`) or a plain value (`abcde...`).
         *             Even if the key is complex (an object or an array), you can specify it as is, for example, `/keys/{"address":"tz123","nat":"123"}`.
         */
        key: string | null
      }
      query: {
        /** Format of the bigmap key and value: `0` - JSON, `1` - JSON string, `2` - Micheline, `3` - Micheline string */
        micheline?: Components['schemas']['MichelineFormat']
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['BigMapKeyHistorical']
        }
      }
    }
  }
  /** Returns the total number of cycles, including future cycles. */
  Cycles_GetCount: {
    responses: {
      200: {
        content: {
          'application/json': number
        }
      }
    }
  }
  /** Returns a list of cycles, including future cycles. */
  Cycles_Get: {
    parameters: {
      query: {
        /** Filters cycles by snapshot index (0..15) */
        snapshotIndex?: Components['schemas']['Int32Parameter'] | null
        /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. */
        select?: Components['schemas']['SelectParameter'] | null
        /** Sorts cycles by specified field. Supported fields: `index` (default, desc). */
        sort?: Components['schemas']['SortParameter'] | null
        /** Specifies which or how many items should be skipped */
        offset?: Components['schemas']['OffsetParameter'] | null
        /** Maximum number of items to return */
        limit?: number
        /** Comma-separated list of ticker symbols to inject historical prices into response */
        quote?: Components['schemas']['Symbols']
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['Cycle'][]
        }
      }
    }
  }
  /** Returns a cycle at the specified index. */
  Cycles_GetByIndex: {
    parameters: {
      path: {
        /** Cycle index starting from zero */
        index: number
      }
      query: {
        /** Comma-separated list of ticker symbols to inject historical prices into response */
        quote?: Components['schemas']['Symbols']
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['Cycle']
        }
      }
    }
  }
  /** Returns a list of delegate accounts. */
  Delegates_Get: {
    parameters: {
      query: {
        /** Delegate status to filter by (true - only active, false - only deactivated, undefined - all delegates) */
        active?: Components['schemas']['BoolParameter'] | null
        /** Filters delegates by last activity level (where the delegate was updated) */
        lastActivity?: Components['schemas']['Int32Parameter'] | null
        /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. */
        select?: Components['schemas']['SelectParameter'] | null
        /** Sorts delegators by specified field. Supported fields: `id` (default), `activationLevel`, `deactivationLevel`, `stakingBalance`, `balance`, `numDelegators`. */
        sort?: Components['schemas']['SortParameter'] | null
        /** Specifies which or how many items should be skipped */
        offset?: Components['schemas']['OffsetParameter'] | null
        /** Maximum number of items to return */
        limit?: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['Delegate'][]
        }
      }
    }
  }
  /** Returns a number of delegate accounts. */
  Delegates_GetCount: {
    parameters: {
      query: {
        /** Delegate status to filter by (true - only active, false - only deactivated, undefined - all delegates) */
        active?: Components['schemas']['BoolParameter'] | null
      }
    }
    responses: {
      200: {
        content: {
          'application/json': number
        }
      }
    }
  }
  /** Returns a delegate with the specified address. */
  Delegates_GetByAddress: {
    parameters: {
      path: {
        /** Delegate address (starting with tz) */
        address: string | null
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['Delegate']
        }
      }
    }
  }
  /** Returns indexer head and synchronization status. */
  Head_Get: {
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['State']
        }
      }
    }
  }
  /** Returns a list of operations with the specified hash. */
  Operations_GetByHash: {
    parameters: {
      path: {
        /** Operation hash */
        hash: string | null
      }
      query: {
        /** Format of the parameters, storage and diffs: `0` - JSON, `1` - JSON string, `2` - raw micheline, `3` - raw micheline string */
        micheline?: Components['schemas']['MichelineFormat']
        /** Comma-separated list of ticker symbols to inject historical prices into response */
        quote?: Components['schemas']['Symbols']
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['Operation'][]
        }
      }
    }
  }
  /** Returns a list of operations with the specified hash and counter. */
  Operations_GetByHashCounter: {
    parameters: {
      path: {
        /** Operation hash */
        hash: string | null
        /** Operation counter */
        counter: number
      }
      query: {
        /** Format of the parameters, storage and diffs: `0` - JSON, `1` - JSON string, `2` - raw micheline, `3` - raw micheline string */
        micheline?: Components['schemas']['MichelineFormat']
        /** Comma-separated list of ticker symbols to inject historical prices into response */
        quote?: Components['schemas']['Symbols']
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['Operation'][]
        }
      }
    }
  }
  /** Returns an internal operations with the specified hash, counter and nonce. */
  Operations_GetByHashCounterNonce: {
    parameters: {
      path: {
        /** Operation hash */
        hash: string | null
        /** Operation counter */
        counter: number
        /** Operation nonce (internal) */
        nonce: number
      }
      query: {
        /** Format of the parameters, storage and diffs: `0` - JSON, `1` - JSON string, `2` - raw micheline, `3` - raw micheline string */
        micheline?: Components['schemas']['MichelineFormat']
        /** Comma-separated list of ticker symbols to inject historical prices into response */
        quote?: Components['schemas']['Symbols']
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['Operation'][]
        }
      }
    }
  }
  /** Returns a list of endorsement operations. */
  Operations_GetEndorsements: {
    parameters: {
      query: {
        /** Filters endorsements by delegate. Allowed fields for `.eqx` mode: none. */
        delegate?: Components['schemas']['AccountParameter'] | null
        /** Filters endorsements by level. */
        level?: Components['schemas']['Int32Parameter'] | null
        /** Filters endorsements by timestamp. */
        timestamp?: Components['schemas']['DateTimeParameter'] | null
        /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. */
        select?: Components['schemas']['SelectParameter'] | null
        /** Sorts endorsements by specified field. Supported fields: `id` (default), `level`. */
        sort?: Components['schemas']['SortParameter'] | null
        /** Specifies which or how many items should be skipped */
        offset?: Components['schemas']['OffsetParameter'] | null
        /** Maximum number of items to return */
        limit?: number
        /** Comma-separated list of ticker symbols to inject historical prices into response */
        quote?: Components['schemas']['Symbols']
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['EndorsementOperation'][]
        }
      }
    }
  }
  /** Returns an endorsement operation with specified hash. */
  Operations_GetEndorsementByHash: {
    parameters: {
      path: {
        /** Operation hash */
        hash: string | null
      }
      query: {
        /** Comma-separated list of ticker symbols to inject historical prices into response */
        quote?: Components['schemas']['Symbols']
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['EndorsementOperation'][]
        }
      }
    }
  }
  /** Returns the total number of endorsement operations. */
  Operations_GetEndorsementsCount: {
    parameters: {
      query: {
        /** Filters endorsements by level. */
        level?: Components['schemas']['Int32Parameter'] | null
        /** Filters endorsements by timestamp. */
        timestamp?: Components['schemas']['DateTimeParameter'] | null
      }
    }
    responses: {
      200: {
        content: {
          'application/json': number
        }
      }
    }
  }
  /** Returns a list of ballot operations. */
  Operations_GetBallots: {
    parameters: {
      query: {
        /** Filters ballots by delegate. Allowed fields for `.eqx` mode: none. */
        delegate?: Components['schemas']['AccountParameter'] | null
        /** Filters ballots by level. */
        level?: Components['schemas']['Int32Parameter'] | null
        /** Filters ballots by timestamp. */
        timestamp?: Components['schemas']['DateTimeParameter'] | null
        /** Filters ballots by voting epoch. */
        epoch?: Components['schemas']['Int32Parameter'] | null
        /** Filters ballots by voting period. */
        period?: Components['schemas']['Int32Parameter'] | null
        /** Filters ballots by proposal hash. */
        proposal?: Components['schemas']['ProtocolParameter'] | null
        /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. */
        select?: Components['schemas']['SelectParameter'] | null
        /** Sorts ballots by specified field. Supported fields: `id` (default), `level`. */
        sort?: Components['schemas']['SortParameter'] | null
        /** Specifies which or how many items should be skipped */
        offset?: Components['schemas']['OffsetParameter'] | null
        /** Maximum number of items to return */
        limit?: number
        /** Comma-separated list of ticker symbols to inject historical prices into response */
        quote?: Components['schemas']['Symbols']
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['BallotOperation'][]
        }
      }
    }
  }
  /** Returns a ballot operation with specified hash. */
  Operations_GetBallotByHash: {
    parameters: {
      path: {
        /** Operation hash */
        hash: string | null
      }
      query: {
        /** Comma-separated list of ticker symbols to inject historical prices into response */
        quote?: Components['schemas']['Symbols']
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['BallotOperation'][]
        }
      }
    }
  }
  /** Returns the total number of ballot operations. */
  Operations_GetBallotsCount: {
    parameters: {
      query: {
        /** Filters ballot operations by level. */
        level?: Components['schemas']['Int32Parameter'] | null
        /** Filters ballot operations by timestamp. */
        timestamp?: Components['schemas']['DateTimeParameter'] | null
      }
    }
    responses: {
      200: {
        content: {
          'application/json': number
        }
      }
    }
  }
  /** Returns a list of proposal operations. */
  Operations_GetProposals: {
    parameters: {
      query: {
        /** Filters proposal operations by delegate. Allowed fields for `.eqx` mode: none. */
        delegate?: Components['schemas']['AccountParameter'] | null
        /** Filters proposal operations by level. */
        level?: Components['schemas']['Int32Parameter'] | null
        /** Filters proposal operations by timestamp. */
        timestamp?: Components['schemas']['DateTimeParameter'] | null
        /** Filters proposal operations by voting epoch. */
        epoch?: Components['schemas']['Int32Parameter'] | null
        /** Filters proposal operations by voting period. */
        period?: Components['schemas']['Int32Parameter'] | null
        /** Filters proposal operations by proposal hash. */
        proposal?: Components['schemas']['ProtocolParameter'] | null
        /** Specify whether to include or exclude duplicates, which didn't actually upvote a proposal. */
        duplicated?: Components['schemas']['BoolParameter'] | null
        /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. */
        select?: Components['schemas']['SelectParameter'] | null
        /** Sorts proposal operations by specified field. Supported fields: `id` (default), `level`. */
        sort?: Components['schemas']['SortParameter'] | null
        /** Specifies which or how many items should be skipped */
        offset?: Components['schemas']['OffsetParameter'] | null
        /** Maximum number of items to return */
        limit?: number
        /** Comma-separated list of ticker symbols to inject historical prices into response */
        quote?: Components['schemas']['Symbols']
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['ProposalOperation'][]
        }
      }
    }
  }
  /** Returns a proposal operation with specified hash. */
  Operations_GetProposalByHash: {
    parameters: {
      path: {
        /** Operation hash */
        hash: string | null
      }
      query: {
        /** Comma-separated list of ticker symbols to inject historical prices into response */
        quote?: Components['schemas']['Symbols']
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['ProposalOperation'][]
        }
      }
    }
  }
  /** Returns the total number of proposal operations. */
  Operations_GetProposalsCount: {
    parameters: {
      query: {
        /** Filters proposal operations by level. */
        level?: Components['schemas']['Int32Parameter'] | null
        /** Filters proposal operations by timestamp. */
        timestamp?: Components['schemas']['DateTimeParameter'] | null
      }
    }
    responses: {
      200: {
        content: {
          'application/json': number
        }
      }
    }
  }
  /** Returns a list of activation operations. */
  Operations_GetActivations: {
    parameters: {
      query: {
        /** Filters activations by account. Allowed fields for `.eqx` mode: none. */
        account?: Components['schemas']['AccountParameter'] | null
        /** Filters activations by level. */
        level?: Components['schemas']['Int32Parameter'] | null
        /** Filters activations by timestamp. */
        timestamp?: Components['schemas']['DateTimeParameter'] | null
        /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. */
        select?: Components['schemas']['SelectParameter'] | null
        /** Sorts activations by specified field. Supported fields: `id` (default), `level`, `balance`. */
        sort?: Components['schemas']['SortParameter'] | null
        /** Specifies which or how many items should be skipped */
        offset?: Components['schemas']['OffsetParameter'] | null
        /** Maximum number of items to return */
        limit?: number
        /** Comma-separated list of ticker symbols to inject historical prices into response */
        quote?: Components['schemas']['Symbols']
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['ActivationOperation'][]
        }
      }
    }
  }
  /** Returns an activation operation with specified hash. */
  Operations_GetActivationByHash: {
    parameters: {
      path: {
        /** Operation hash */
        hash: string | null
      }
      query: {
        /** Comma-separated list of ticker symbols to inject historical prices into response */
        quote?: Components['schemas']['Symbols']
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['ActivationOperation'][]
        }
      }
    }
  }
  /** Returns the total number of activation operations. */
  Operations_GetActivationsCount: {
    parameters: {
      query: {
        /** Filters activations by level. */
        level?: Components['schemas']['Int32Parameter'] | null
        /** Filters activations by timestamp. */
        timestamp?: Components['schemas']['DateTimeParameter'] | null
      }
    }
    responses: {
      200: {
        content: {
          'application/json': number
        }
      }
    }
  }
  /** Returns a list of double baking operations. */
  Operations_GetDoubleBaking: {
    parameters: {
      query: {
        /** Filters double baking operations by any of the specified fields. Example: `anyof.accuser.offender=tz1...` will return operations where `accuser` OR `offender` is equal to the specified value. This parameter is useful when you need to retrieve all operations associated with a specified account. */
        anyof?: string | null
        /** Filters double baking operations by accuser. Allowed fields for `.eqx` mode: `offender`. */
        accuser?: Components['schemas']['AccountParameter'] | null
        /** Filters double baking operations by offender. Allowed fields for `.eqx` mode: `accuser`. */
        offender?: Components['schemas']['AccountParameter'] | null
        /** Filters double baking operations by level. */
        level?: Components['schemas']['Int32Parameter'] | null
        /** Filters double baking operations by timestamp. */
        timestamp?: Components['schemas']['DateTimeParameter'] | null
        /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. */
        select?: Components['schemas']['SelectParameter'] | null
        /** Sorts double baking operations by specified field. Supported fields: `id` (default), `level`, `accusedLevel`, `accuserRewards`, `offenderLostDeposits`, `offenderLostRewards`, `offenderLostFees`. */
        sort?: Components['schemas']['SortParameter'] | null
        /** Specifies which or how many items should be skipped */
        offset?: Components['schemas']['OffsetParameter'] | null
        /** Maximum number of items to return */
        limit?: number
        /** Comma-separated list of ticker symbols to inject historical prices into response */
        quote?: Components['schemas']['Symbols']
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['DoubleBakingOperation'][]
        }
      }
    }
  }
  /** Returns a double baking operation with specified hash. */
  Operations_GetDoubleBakingByHash: {
    parameters: {
      path: {
        /** Operation hash */
        hash: string | null
      }
      query: {
        /** Comma-separated list of ticker symbols to inject historical prices into response */
        quote?: Components['schemas']['Symbols']
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['DoubleBakingOperation'][]
        }
      }
    }
  }
  /** Returns the total number of double baking operations. */
  Operations_GetDoubleBakingCount: {
    parameters: {
      query: {
        /** Filters double baking operations by level. */
        level?: Components['schemas']['Int32Parameter'] | null
        /** Filters double baking operations by timestamp. */
        timestamp?: Components['schemas']['DateTimeParameter'] | null
      }
    }
    responses: {
      200: {
        content: {
          'application/json': number
        }
      }
    }
  }
  /** Returns a list of double endorsing operations. */
  Operations_GetDoubleEndorsing: {
    parameters: {
      query: {
        /** Filters double endorsing operations by any of the specified fields. Example: `anyof.accuser.offender=tz1...` will return operations where `accuser` OR `offender` is equal to the specified value. This parameter is useful when you need to retrieve all operations associated with a specified account. */
        anyof?: string | null
        /** Filters double endorsing operations by accuser. Allowed fields for `.eqx` mode: `offender`. */
        accuser?: Components['schemas']['AccountParameter'] | null
        /** Filters double endorsing operations by offender. Allowed fields for `.eqx` mode: `accuser`. */
        offender?: Components['schemas']['AccountParameter'] | null
        /** Filters double endorsing operations by level. */
        level?: Components['schemas']['Int32Parameter'] | null
        /** Filters double endorsing operations by timestamp. */
        timestamp?: Components['schemas']['DateTimeParameter'] | null
        /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. */
        select?: Components['schemas']['SelectParameter'] | null
        /** Sorts double endorsing operations by specified field. Supported fields: `id` (default), `level`, `accusedLevel`, `accuserRewards`, `offenderLostDeposits`, `offenderLostRewards`, `offenderLostFees`. */
        sort?: Components['schemas']['SortParameter'] | null
        /** Specifies which or how many items should be skipped */
        offset?: Components['schemas']['OffsetParameter'] | null
        /** Maximum number of items to return */
        limit?: number
        /** Comma-separated list of ticker symbols to inject historical prices into response */
        quote?: Components['schemas']['Symbols']
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['DoubleEndorsingOperation'][]
        }
      }
    }
  }
  /** Returns a double endorsing operation with specified hash. */
  Operations_GetDoubleEndorsingByHash: {
    parameters: {
      path: {
        /** Operation hash */
        hash: string | null
      }
      query: {
        /** Comma-separated list of ticker symbols to inject historical prices into response */
        quote?: Components['schemas']['Symbols']
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['DoubleEndorsingOperation'][]
        }
      }
    }
  }
  /** Returns the total number of double endorsing operations. */
  Operations_GetDoubleEndorsingCount: {
    parameters: {
      query: {
        /** Filters double endorsing operations by level. */
        level?: Components['schemas']['Int32Parameter'] | null
        /** Filters double endorsing operations by timestamp. */
        timestamp?: Components['schemas']['DateTimeParameter'] | null
      }
    }
    responses: {
      200: {
        content: {
          'application/json': number
        }
      }
    }
  }
  /** Returns a list of seed nonce revelation operations. */
  Operations_GetNonceRevelations: {
    parameters: {
      query: {
        /** Filters nonce revelation operations by any of the specified fields. Example: `anyof.baker.sender=tz1...` will return operations where `baker` OR `sender` is equal to the specified value. This parameter is useful when you need to retrieve all operations associated with a specified account. */
        anyof?: string | null
        /** Filters nonce revelation operations by baker. Allowed fields for `.eqx` mode: `sender`. */
        baker?: Components['schemas']['AccountParameter'] | null
        /** Filters nonce revelation operations by sender. Allowed fields for `.eqx` mode: `baker`. */
        sender?: Components['schemas']['AccountParameter'] | null
        /** Filters nonce revelation operations by level. */
        level?: Components['schemas']['Int32Parameter'] | null
        /** Filters nonce revelation operations by timestamp. */
        timestamp?: Components['schemas']['DateTimeParameter'] | null
        /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. */
        select?: Components['schemas']['SelectParameter'] | null
        /** Sorts nonce revelation operations by specified field. Supported fields: `id` (default), `level`, `revealedLevel`. */
        sort?: Components['schemas']['SortParameter'] | null
        /** Specifies which or how many items should be skipped */
        offset?: Components['schemas']['OffsetParameter'] | null
        /** Maximum number of items to return */
        limit?: number
        /** Comma-separated list of ticker symbols to inject historical prices into response */
        quote?: Components['schemas']['Symbols']
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['NonceRevelationOperation'][]
        }
      }
    }
  }
  /** Returns a seed nonce revelation operation with specified hash. */
  Operations_GetNonceRevelationByHash: {
    parameters: {
      path: {
        /** Operation hash */
        hash: string | null
      }
      query: {
        /** Comma-separated list of ticker symbols to inject historical prices into response */
        quote?: Components['schemas']['Symbols']
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['NonceRevelationOperation'][]
        }
      }
    }
  }
  /** Returns the total number of seed nonce revelation operations. */
  Operations_GetNonceRevelationsCount: {
    parameters: {
      query: {
        /** Filters seed nonce revelation operations by level. */
        level?: Components['schemas']['Int32Parameter'] | null
        /** Filters seed nonce revelation operations by timestamp. */
        timestamp?: Components['schemas']['DateTimeParameter'] | null
      }
    }
    responses: {
      200: {
        content: {
          'application/json': number
        }
      }
    }
  }
  /** Returns a list of delegation operations. */
  Operations_GetDelegations: {
    parameters: {
      query: {
        /** Filters delegations by any of the specified fields. Example: `anyof.prevDelegate.newDelegate=tz1...` will return operations where `prevDelegate` OR `newDelegate` is equal to the specified value. This parameter is useful when you need to retrieve all delegations associated with a specified account. */
        anyof?: string | null
        /** Filters delegations by initiator. Allowed fields for `.eqx` mode: `prevDelegate`, `newDelegate`. */
        initiator?: Components['schemas']['AccountParameter'] | null
        /** Filters delegations by sender. Allowed fields for `.eqx` mode: `prevDelegate`, `newDelegate`. */
        sender?: Components['schemas']['AccountParameter'] | null
        /** Filters delegations by prev delegate. Allowed fields for `.eqx` mode: `initiator`, `sender`, `newDelegate`. */
        prevDelegate?: Components['schemas']['AccountParameter'] | null
        /** Filters delegations by new delegate. Allowed fields for `.eqx` mode: `initiator`, `sender`, `prevDelegate`. */
        newDelegate?: Components['schemas']['AccountParameter'] | null
        /** Filters delegations by level. */
        level?: Components['schemas']['Int32Parameter'] | null
        /** Filters delegations by timestamp. */
        timestamp?: Components['schemas']['DateTimeParameter'] | null
        /** Filters delegations by operation status (`applied`, `failed`, `backtracked`, `skipped`). */
        status?: Components['schemas']['OperationStatusParameter'] | null
        /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. */
        select?: Components['schemas']['SelectParameter'] | null
        /** Sorts delegations by specified field. Supported fields: `id` (default), `level`, `gasUsed`, `bakerFee`. */
        sort?: Components['schemas']['SortParameter'] | null
        /** Specifies which or how many items should be skipped */
        offset?: Components['schemas']['OffsetParameter'] | null
        /** Maximum number of items to return */
        limit?: number
        /** Comma-separated list of ticker symbols to inject historical prices into response */
        quote?: Components['schemas']['Symbols']
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['DelegationOperation'][]
        }
      }
    }
  }
  /** Returns a delegation operation with specified hash. */
  Operations_GetDelegationByHash: {
    parameters: {
      path: {
        /** Operation hash */
        hash: string | null
      }
      query: {
        /** Comma-separated list of ticker symbols to inject historical prices into response */
        quote?: Components['schemas']['Symbols']
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['DelegationOperation'][]
        }
      }
    }
  }
  /** Returns the total number of delegation operations. */
  Operations_GetDelegationsCount: {
    parameters: {
      query: {
        /** Filters delegations by level. */
        level?: Components['schemas']['Int32Parameter'] | null
        /** Filters delegations by timestamp. */
        timestamp?: Components['schemas']['DateTimeParameter'] | null
      }
    }
    responses: {
      200: {
        content: {
          'application/json': number
        }
      }
    }
  }
  /** Returns a list of origination operations. */
  Operations_GetOriginations: {
    parameters: {
      query: {
        /** Filters originations by any of the specified fields. Example: `anyof.sender.initiator=tz1...` will return operations where `sender` OR `initiator` is equal to the specified value. This parameter is useful when you need to retrieve all originations associated with a specified account. */
        anyof?: string | null
        /** Filters origination operations by initiator. Allowed fields for `.eqx` mode: `contractManager`, `contractDelegate`. */
        initiator?: Components['schemas']['AccountParameter'] | null
        /** Filters origination operations by sender. Allowed fields for `.eqx` mode: `contractManager`, `contractDelegate`. */
        sender?: Components['schemas']['AccountParameter'] | null
        /** Filters origination operations by manager. Allowed fields for `.eqx` mode: `initiator`, `sender`, `contractDelegate`. */
        contractManager?: Components['schemas']['AccountParameter'] | null
        /** Filters origination operations by delegate. Allowed fields for `.eqx` mode: `initiator`, `sender`, `contractManager`. */
        contractDelegate?: Components['schemas']['AccountParameter'] | null
        /** Filters origination operations by originated contract. Allowed fields for `.eqx` mode: none. */
        originatedContract?: Components['schemas']['AccountParameter'] | null
        /** Filters origination operations by internal TzKT id */
        id?: Components['schemas']['Int32Parameter'] | null
        /** Filters origination operations by 32-bit hash of originated contract parameter and storage types (helpful for searching originations of similar contracts) */
        typeHash?: Components['schemas']['Int32Parameter'] | null
        /** Filters origination operations by 32-bit hash of originated contract code (helpful for searching originations of same contracts) */
        codeHash?: Components['schemas']['Int32Parameter'] | null
        /** Filters origination operations by level. */
        level?: Components['schemas']['Int32Parameter'] | null
        /** Filters origination operations by timestamp. */
        timestamp?: Components['schemas']['DateTimeParameter'] | null
        /** Filters origination operations by operation status (`applied`, `failed`, `backtracked`, `skipped`). */
        status?: Components['schemas']['OperationStatusParameter'] | null
        /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. */
        select?: Components['schemas']['SelectParameter'] | null
        /** Sorts originations by specified field. Supported fields: `id` (default), `level`, `gasUsed`, `storageUsed`, `bakerFee`, `storageFee`, `allocationFee`, `contractBalance`. */
        sort?: Components['schemas']['SortParameter'] | null
        /** Specifies which or how many items should be skipped */
        offset?: Components['schemas']['OffsetParameter'] | null
        /** Maximum number of items to return */
        limit?: number
        /** Format of the parameters, storage and diffs: `0` - JSON, `1` - JSON string, `2` - raw micheline, `3` - raw micheline string */
        micheline?: Components['schemas']['MichelineFormat']
        /** Comma-separated list of ticker symbols to inject historical prices into response */
        quote?: Components['schemas']['Symbols']
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['OriginationOperation'][]
        }
      }
    }
  }
  /** Returns origination operations with specified hash. */
  Operations_GetOriginationByHash: {
    parameters: {
      path: {
        /** Operation hash */
        hash: string | null
      }
      query: {
        /** Format of the parameters, storage and diffs: `0` - JSON, `1` - JSON string, `2` - raw micheline, `3` - raw micheline string */
        micheline?: Components['schemas']['MichelineFormat']
        /** Comma-separated list of ticker symbols to inject historical prices into response */
        quote?: Components['schemas']['Symbols']
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['OriginationOperation'][]
        }
      }
    }
  }
  /** Returns the total number of origination operations. */
  Operations_GetOriginationsCount: {
    parameters: {
      query: {
        /** Filters originations by level. */
        level?: Components['schemas']['Int32Parameter'] | null
        /** Filters originations by timestamp. */
        timestamp?: Components['schemas']['DateTimeParameter'] | null
      }
    }
    responses: {
      200: {
        content: {
          'application/json': number
        }
      }
    }
  }
  /** Returns a list of transaction operations. */
  Operations_GetTransactions: {
    parameters: {
      query: {
        /** Filters transactions by any of the specified fields. Example: `anyof.sender.target=tz1...` will return operations where `sender` OR `target` is equal to the specified value. This parameter is useful when you need to retrieve all transactions associated with a specified account. */
        anyof?: string | null
        /** Filters transactions by initiator. Allowed fields for `.eqx` mode: `target`. */
        initiator?: Components['schemas']['AccountParameter'] | null
        /** Filters transactions by sender. Allowed fields for `.eqx` mode: `target`. */
        sender?: Components['schemas']['AccountParameter'] | null
        /** Filters transactions by target. Allowed fields for `.eqx` mode: `sender`, `initiator`. */
        target?: Components['schemas']['AccountParameter'] | null
        /** Filters transactions by amount (microtez). */
        amount?: Components['schemas']['Int64Parameter'] | null
        /** Filters transactions by id. */
        id?: Components['schemas']['Int32Parameter'] | null
        /** Filters transactions by level. */
        level?: Components['schemas']['Int32Parameter'] | null
        /** Filters transactions by timestamp. */
        timestamp?: Components['schemas']['DateTimeParameter'] | null
        /** Filters transactions by entrypoint called on the target contract. */
        entrypoint?: Components['schemas']['StringParameter'] | null
        /**
         * Filters transactions by parameter value. Note, this query parameter supports the following format: `?parameter{.path?}{.mode?}=...`,
         *             so you can specify a path to a particular field to filter by, for example: `?parameter.token_id=...` or `?parameter.sigs.0.ne=...`.
         */
        parameter?: Components['schemas']['JsonParameter'] | null
        /** Filters transactions by presence of internal operations. */
        hasInternals?: Components['schemas']['BoolParameter'] | null
        /** Filters transactions by operation status (`applied`, `failed`, `backtracked`, `skipped`). */
        status?: Components['schemas']['OperationStatusParameter'] | null
        /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. */
        select?: Components['schemas']['SelectParameter'] | null
        /** Sorts transactions by specified field. Supported fields: `id` (default), `level`, `gasUsed`, `storageUsed`, `bakerFee`, `storageFee`, `allocationFee`, `amount`. */
        sort?: Components['schemas']['SortParameter'] | null
        /** Specifies which or how many items should be skipped */
        offset?: Components['schemas']['OffsetParameter'] | null
        /** Maximum number of items to return */
        limit?: number
        /** Format of the parameters, storage and diffs: `0` - JSON, `1` - JSON string, `2` - raw micheline, `3` - raw micheline string */
        micheline?: Components['schemas']['MichelineFormat']
        /** Comma-separated list of ticker symbols to inject historical prices into response */
        quote?: Components['schemas']['Symbols']
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['TransactionOperation'][]
        }
      }
    }
  }
  /** Returns transaction operations with specified hash. */
  Operations_GetTransactionByHash: {
    parameters: {
      path: {
        /** Operation hash */
        hash: string | null
      }
      query: {
        /** Format of the parameters, storage and diffs: `0` - JSON, `1` - JSON string, `2` - raw micheline, `3` - raw micheline string */
        micheline?: Components['schemas']['MichelineFormat']
        /** Comma-separated list of ticker symbols to inject historical prices into response */
        quote?: Components['schemas']['Symbols']
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['TransactionOperation'][]
        }
      }
    }
  }
  /** Returns transaction operations with specified hash and counter. */
  Operations_GetTransactionByHashCounter: {
    parameters: {
      path: {
        /** Operation hash */
        hash: string | null
        /** Operation counter */
        counter: number
      }
      query: {
        /** Format of the parameters, storage and diffs: `0` - JSON, `1` - JSON string, `2` - raw micheline, `3` - raw micheline string */
        micheline?: Components['schemas']['MichelineFormat']
        /** Comma-separated list of ticker symbols to inject historical prices into response */
        quote?: Components['schemas']['Symbols']
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['TransactionOperation'][]
        }
      }
    }
  }
  /** Returns an internal transaction operation with specified hash, counter and nonce. */
  Operations_GetTransactionByHashCounterNonce: {
    parameters: {
      path: {
        /** Operation hash */
        hash: string | null
        /** Operation counter */
        counter: number
        /** Operation nonce (internal) */
        nonce: number
      }
      query: {
        /** Format of the parameters, storage and diffs: `0` - JSON, `1` - JSON string, `2` - raw micheline, `3` - raw micheline string */
        micheline?: Components['schemas']['MichelineFormat']
        /** Comma-separated list of ticker symbols to inject historical prices into response */
        quote?: Components['schemas']['Symbols']
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['TransactionOperation'][]
        }
      }
    }
  }
  /** Returns the total number of transaction operations. */
  Operations_GetTransactionsCount: {
    parameters: {
      query: {
        /** Filters transactions by level. */
        level?: Components['schemas']['Int32Parameter'] | null
        /** Filters transactions by timestamp. */
        timestamp?: Components['schemas']['DateTimeParameter'] | null
        /** Filters transactions by operation status (`applied`, `failed`, `backtracked`, `skipped`). */
        status?: Components['schemas']['OperationStatusParameter'] | null
      }
    }
    responses: {
      200: {
        content: {
          'application/json': number
        }
      }
    }
  }
  /** Returns a list of reveal operations. */
  Operations_GetReveals: {
    parameters: {
      query: {
        /** Filters reveal operations by sender. Allowed fields for `.eqx` mode: none. */
        sender?: Components['schemas']['AccountParameter'] | null
        /** Filters reveal operations by level. */
        level?: Components['schemas']['Int32Parameter'] | null
        /** Filters reveal operations by timestamp. */
        timestamp?: Components['schemas']['DateTimeParameter'] | null
        /** Filters reveal operations by operation status (`applied`, `failed`, `backtracked`, `skipped`). */
        status?: Components['schemas']['OperationStatusParameter'] | null
        /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. */
        select?: Components['schemas']['SelectParameter'] | null
        /** Sorts reveals by specified field. Supported fields: `id` (default), `level`, `gasUsed`, `bakerFee`. */
        sort?: Components['schemas']['SortParameter'] | null
        /** Specifies which or how many items should be skipped */
        offset?: Components['schemas']['OffsetParameter'] | null
        /** Maximum number of items to return */
        limit?: number
        /** Comma-separated list of ticker symbols to inject historical prices into response */
        quote?: Components['schemas']['Symbols']
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['RevealOperation'][]
        }
      }
    }
  }
  /** Returns reveal operation with specified hash. */
  Operations_GetRevealByHash: {
    parameters: {
      path: {
        /** Operation hash */
        hash: string | null
      }
      query: {
        /** Comma-separated list of ticker symbols to inject historical prices into response */
        quote?: Components['schemas']['Symbols']
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['RevealOperation'][]
        }
      }
    }
  }
  /** Returns the total number of reveal operations. */
  Operations_GetRevealsCount: {
    parameters: {
      query: {
        /** Filters reveals by level. */
        level?: Components['schemas']['Int32Parameter'] | null
        /** Filters reveals by timestamp. */
        timestamp?: Components['schemas']['DateTimeParameter'] | null
      }
    }
    responses: {
      200: {
        content: {
          'application/json': number
        }
      }
    }
  }
  /** Returns a list of register global constant operations. */
  Operations_GetRegisterConstants: {
    parameters: {
      query: {
        /** Filters operations by sender. Allowed fields for `.eqx` mode: none. */
        sender?: Components['schemas']['AccountParameter'] | null
        /** Filters operations by global address of the created constant (starts with `expr..`). */
        address?: Components['schemas']['ExpressionParameter'] | null
        /** Filters operations by level. */
        level?: Components['schemas']['Int32Parameter'] | null
        /** Filters operations by timestamp. */
        timestamp?: Components['schemas']['DateTimeParameter'] | null
        /** Filters operations by status (`applied`, `failed`, `backtracked`, `skipped`). */
        status?: Components['schemas']['OperationStatusParameter'] | null
        /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. */
        select?: Components['schemas']['SelectParameter'] | null
        /** Sorts operations by specified field. Supported fields: `id` (default), `level`, `gasUsed`, `storageUsed`, `bakerFee`, `storageFee`. */
        sort?: Components['schemas']['SortParameter'] | null
        /** Specifies which or how many items should be skipped */
        offset?: Components['schemas']['OffsetParameter'] | null
        /** Maximum number of items to return */
        limit?: number
        /** Format of the constant value: `0` - JSON, `1` - JSON string, `2` - raw micheline, `3` - raw micheline string */
        micheline?: Components['schemas']['MichelineFormat']
        /** Comma-separated list of ticker symbols to inject historical prices into response */
        quote?: Components['schemas']['Symbols']
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['RegisterConstantOperation'][]
        }
      }
    }
  }
  /** Returns register global constant operation with specified hash. */
  Operations_GetRegisterConstantByHash: {
    parameters: {
      path: {
        /** Operation hash */
        hash: string | null
      }
      query: {
        /** Format of the constant value: `0` - JSON, `1` - JSON string, `2` - raw micheline, `3` - raw micheline string */
        micheline?: Components['schemas']['MichelineFormat']
        /** Comma-separated list of ticker symbols to inject historical prices into response */
        quote?: Components['schemas']['Symbols']
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['RegisterConstantOperation'][]
        }
      }
    }
  }
  /** Returns the total number of register global constant operations. */
  Operations_GetRegisterConstantsCount: {
    parameters: {
      query: {
        /** Filters operations by level. */
        level?: Components['schemas']['Int32Parameter'] | null
        /** Filters operations by timestamp. */
        timestamp?: Components['schemas']['DateTimeParameter'] | null
      }
    }
    responses: {
      200: {
        content: {
          'application/json': number
        }
      }
    }
  }
  /** Returns a list of migration operations (synthetic type). */
  Operations_GetMigrations: {
    parameters: {
      query: {
        /** Filters migration operations by account. Allowed fields for `.eqx` mode: none. */
        account?: Components['schemas']['AccountParameter'] | null
        /** Filters migration operations by kind (`bootstrap`, `activate_delegate`, `airdrop`, `proposal_invoice`, `origination`, `subsidy`). */
        kind?: Components['schemas']['MigrationKindParameter'] | null
        /** Filters migration operations by amount. */
        balanceChange?: Components['schemas']['Int64Parameter'] | null
        /** Filters migration operations by internal TzKT id. */
        id?: Components['schemas']['Int32Parameter'] | null
        /** Filters migration operations by level. */
        level?: Components['schemas']['Int32Parameter'] | null
        /** Filters migration operations by timestamp. */
        timestamp?: Components['schemas']['DateTimeParameter'] | null
        /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. */
        select?: Components['schemas']['SelectParameter'] | null
        /** Sorts migrations by specified field. Supported fields: `id` (default), `level`. */
        sort?: Components['schemas']['SortParameter'] | null
        /** Specifies which or how many items should be skipped */
        offset?: Components['schemas']['OffsetParameter'] | null
        /** Maximum number of items to return */
        limit?: number
        /** Format of the parameters, storage and diffs: `0` - JSON, `1` - JSON string, `2` - raw micheline, `3` - raw micheline string */
        micheline?: Components['schemas']['MichelineFormat']
        /** Comma-separated list of ticker symbols to inject historical prices into response */
        quote?: Components['schemas']['Symbols']
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['MigrationOperation'][]
        }
      }
    }
  }
  /** Returns migration operation with specified id. */
  Operations_GetMigrationById: {
    parameters: {
      path: {
        /** Operation id */
        id: number
      }
      query: {
        /** Format of the parameters, storage and diffs: `0` - JSON, `1` - JSON string, `2` - raw micheline, `3` - raw micheline string */
        micheline?: Components['schemas']['MichelineFormat']
        /** Comma-separated list of ticker symbols to inject historical prices into response */
        quote?: Components['schemas']['Symbols']
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['MigrationOperation']
        }
      }
    }
  }
  /** Returns the total number of migration operations (synthetic type). */
  Operations_GetMigrationsCount: {
    parameters: {
      query: {
        /** Filters migrations by level. */
        level?: Components['schemas']['Int32Parameter'] | null
        /** Filters migrations by timestamp. */
        timestamp?: Components['schemas']['DateTimeParameter'] | null
      }
    }
    responses: {
      200: {
        content: {
          'application/json': number
        }
      }
    }
  }
  /** Returns a list of revelation penalty operations (synthetic type). */
  Operations_GetRevelationPenalties: {
    parameters: {
      query: {
        /** Filters revelation penalty operations by baker. Allowed fields for `.eqx` mode: none. */
        baker?: Components['schemas']['AccountParameter'] | null
        /** Filters revelation penalty operations by level. */
        level?: Components['schemas']['Int32Parameter'] | null
        /** Filters revelation penalty operations by timestamp. */
        timestamp?: Components['schemas']['DateTimeParameter'] | null
        /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. */
        select?: Components['schemas']['SelectParameter'] | null
        /** Sorts revelation penalty operations by specified field. Supported fields: `id` (default), `level`. */
        sort?: Components['schemas']['SortParameter'] | null
        /** Specifies which or how many items should be skipped */
        offset?: Components['schemas']['OffsetParameter'] | null
        /** Maximum number of items to return */
        limit?: number
        /** Comma-separated list of ticker symbols to inject historical prices into response */
        quote?: Components['schemas']['Symbols']
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['RevelationPenaltyOperation'][]
        }
      }
    }
  }
  /** Returns revelation penalty operation with specified id. */
  Operations_GetRevelationPenaltyById: {
    parameters: {
      path: {
        /** Operation id */
        id: number
      }
      query: {
        /** Comma-separated list of ticker symbols to inject historical prices into response */
        quote?: Components['schemas']['Symbols']
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['RevelationPenaltyOperation']
        }
      }
    }
  }
  /** Returns the total number of revelation penalty operations (synthetic type). */
  Operations_GetRevelationPenaltiesCount: {
    parameters: {
      query: {
        /** Filters revelation penalty operations by level. */
        level?: Components['schemas']['Int32Parameter'] | null
        /** Filters revelation penalty operations by timestamp. */
        timestamp?: Components['schemas']['DateTimeParameter'] | null
      }
    }
    responses: {
      200: {
        content: {
          'application/json': number
        }
      }
    }
  }
  /** Returns a list of baking operations (synthetic type). */
  Operations_GetBaking: {
    parameters: {
      query: {
        /** Filters baking operations by baker. Allowed fields for `.eqx` mode: none. */
        baker?: Components['schemas']['AccountParameter'] | null
        /** Filters baking operations by level. */
        level?: Components['schemas']['Int32Parameter'] | null
        /** Filters baking operations by timestamp. */
        timestamp?: Components['schemas']['DateTimeParameter'] | null
        /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. */
        select?: Components['schemas']['SelectParameter'] | null
        /** Sorts baking operations by specified field. Supported fields: `id` (default), `level`. */
        sort?: Components['schemas']['SortParameter'] | null
        /** Specifies which or how many items should be skipped */
        offset?: Components['schemas']['OffsetParameter'] | null
        /** Maximum number of items to return */
        limit?: number
        /** Comma-separated list of ticker symbols to inject historical prices into response */
        quote?: Components['schemas']['Symbols']
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['BakingOperation'][]
        }
      }
    }
  }
  /** Returns baking operation with specified id. */
  Operations_GetBakingById: {
    parameters: {
      path: {
        /** Operation id */
        id: number
      }
      query: {
        /** Comma-separated list of ticker symbols to inject historical prices into response */
        quote?: Components['schemas']['Symbols']
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['BakingOperation']
        }
      }
    }
  }
  /** Returns the total number of baking operations (synthetic type). */
  Operations_GetBakingCount: {
    parameters: {
      query: {
        /** Filters baking operations by level. */
        level?: Components['schemas']['Int32Parameter'] | null
        /** Filters baking operations by timestamp. */
        timestamp?: Components['schemas']['DateTimeParameter'] | null
      }
    }
    responses: {
      200: {
        content: {
          'application/json': number
        }
      }
    }
  }
  /** Returns the total number of protocols. */
  Protocols_GetCount: {
    responses: {
      200: {
        content: {
          'application/json': number
        }
      }
    }
  }
  /** Returns a list of protocols. */
  Protocols_Get: {
    parameters: {
      query: {
        /** Sorts protocols by specified field. Supported fields: `code` (default), `firstLevel`, `lastLevel`. */
        sort?: Components['schemas']['SortParameter'] | null
        /** Specifies which or how many items should be skipped */
        offset?: Components['schemas']['OffsetParameter'] | null
        /** Maximum number of items to return */
        limit?: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['Protocol'][]
        }
      }
    }
  }
  /** Returns current protocol. */
  Protocols_GetCurrent: {
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['Protocol']
        }
      }
    }
  }
  /** Returns a protocol with the specified proto code. */
  Protocols_GetByCode: {
    parameters: {
      path: {
        /** Protocol code (e.g. 4 for Athens, 5 for Babylon, etc) */
        code: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['Protocol']
        }
      }
    }
  }
  /** Returns a protocol with the specified hash. */
  Protocols_GetByHash: {
    parameters: {
      path: {
        /** Protocol hash */
        hash: string | null
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['Protocol']
        }
      }
    }
  }
  /** Returns a protocol at the specified cycle. */
  Protocols_GetByCycle: {
    parameters: {
      path: {
        /** Cycle index */
        cycle: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['Protocol']
        }
      }
    }
  }
  /** Returns the total number of quotes aligned with blocks. */
  Quotes_GetCount: {
    responses: {
      200: {
        content: {
          'application/json': number
        }
      }
    }
  }
  /** Returns last known quote. */
  Quotes_GetLast: {
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['Quote']
        }
      }
    }
  }
  /** Returns a list of quotes aligned with blocks. */
  Quotes_Get: {
    parameters: {
      query: {
        /** Filters quotes by level. */
        level?: Components['schemas']['Int32Parameter'] | null
        /** Filters quotes by timestamp. */
        timestamp?: Components['schemas']['DateTimeParameter'] | null
        /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. */
        select?: Components['schemas']['SelectParameter'] | null
        /** Sorts quotes by specified field. Supported fields: `level` (default). */
        sort?: Components['schemas']['SortParameter'] | null
        /** Specifies which or how many items should be skipped */
        offset?: Components['schemas']['OffsetParameter'] | null
        /** Maximum number of items to return */
        limit?: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['Quote'][]
        }
      }
    }
  }
  /** Returns total number of cycles where the baker was active */
  Rewards_GetBakerRewardsCount: {
    parameters: {
      path: {
        /** Baker address */
        address: string | null
      }
    }
    responses: {
      200: {
        content: {
          'application/json': number
        }
      }
    }
  }
  /** Returns a list of baker rewards for every cycle, including future cycles. */
  Rewards_GetBakerRewards: {
    parameters: {
      path: {
        /** Baker address. */
        address: string | null
      }
      query: {
        /** Filters rewards by cycle. */
        cycle?: Components['schemas']['Int32Parameter'] | null
        /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. */
        select?: Components['schemas']['SelectParameter'] | null
        /** Sorts cycle rewards by specified field. Supported fields: `cycle` (default, desc). */
        sort?: Components['schemas']['SortParameter'] | null
        /** Specifies which or how many items should be skipped */
        offset?: Components['schemas']['OffsetParameter'] | null
        /** Maximum number of items to return */
        limit?: number
        /** Comma-separated list of ticker symbols to inject historical prices into response */
        quote?: Components['schemas']['Symbols']
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['BakerRewards'][]
        }
      }
    }
  }
  /** Returns baker cycle rewards for the specified cycle. */
  Rewards_GetBakerRewardsByCycle: {
    parameters: {
      path: {
        /** Baker address */
        address: string | null
        /** Rewards cycle */
        cycle: number
      }
      query: {
        /** Comma-separated list of ticker symbols to inject historical prices into response */
        quote?: Components['schemas']['Symbols']
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['BakerRewards']
        }
      }
    }
  }
  /** Returns total number of cycles where the delegator was delegated to an active baker */
  Rewards_GetDelegatorRewardsCount: {
    parameters: {
      path: {
        /** Delegator address */
        address: string | null
      }
    }
    responses: {
      200: {
        content: {
          'application/json': number
        }
      }
    }
  }
  /** Returns a list of delegator rewards for every cycle, including future cycles. */
  Rewards_GetDelegatorRewards: {
    parameters: {
      path: {
        /** Delegator address. */
        address: string | null
      }
      query: {
        /** Filters rewards by cycle. */
        cycle?: Components['schemas']['Int32Parameter'] | null
        /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. */
        select?: Components['schemas']['SelectParameter'] | null
        /** Sorts cycle rewards by specified field. Supported fields: `cycle` (default, desc). */
        sort?: Components['schemas']['SortParameter'] | null
        /** Specifies which or how many items should be skipped */
        offset?: Components['schemas']['OffsetParameter'] | null
        /** Maximum number of items to return */
        limit?: number
        /** Comma-separated list of ticker symbols to inject historical prices into response */
        quote?: Components['schemas']['Symbols']
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['DelegatorRewards'][]
        }
      }
    }
  }
  /** Returns delegator cycle rewards for the specified cycle. */
  Rewards_GetDelegatorRewardsByCycle: {
    parameters: {
      path: {
        /** Delegator address */
        address: string | null
        /** Rewards cycle */
        cycle: number
      }
      query: {
        /** Comma-separated list of ticker symbols to inject historical prices into response */
        quote?: Components['schemas']['Symbols']
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['DelegatorRewards']
        }
      }
    }
  }
  /** Returns baker rewards for the specified cycle with all delegator balances at that cycle to allow rewards distribution in proportion to shares. */
  Rewards_GetRewardSplit: {
    parameters: {
      path: {
        /** Baker address */
        baker: string | null
        /** Rewards cycle */
        cycle: number
      }
      query: {
        /** Specifies how many delegators in the reward split should be skipped */
        offset?: number
        /** Maximum number of delegators to return */
        limit?: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['RewardSplit']
        }
      }
    }
  }
  /** Returns delegator from the reward split for the specified cycle. */
  Rewards_GetRewardSplitDelegator: {
    parameters: {
      path: {
        /** Baker address */
        baker: string | null
        /** Reward split cycle */
        cycle: number
        /** Delegator address */
        delegator: string | null
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['SplitDelegator']
        }
      }
    }
  }
  /** Returns the total number of stored rights. */
  Rights_GetCount: {
    parameters: {
      query: {
        /** Filters rights by type (`baking`, `endorsing`) */
        type?: Components['schemas']['BakingRightTypeParameter'] | null
        /** Filters rights by baker */
        baker?: Components['schemas']['AccountParameter'] | null
        /** Filters rights by cycle */
        cycle?: Components['schemas']['Int32Parameter'] | null
        /** Filters rights by level */
        level?: Components['schemas']['Int32Parameter'] | null
        /** Filters rights by slots */
        slots?: Components['schemas']['Int32NullParameter'] | null
        /** Filters rights by priority */
        priority?: Components['schemas']['Int32NullParameter'] | null
        /** Filters rights by status (`future`, `realized`, `uncovered`, `missed`) */
        status?: Components['schemas']['BakingRightStatusParameter'] | null
      }
    }
    responses: {
      200: {
        content: {
          'application/json': number
        }
      }
    }
  }
  /** Returns a list of rights. */
  Rights_Get: {
    parameters: {
      query: {
        /** Filters rights by type (`baking`, `endorsing`) */
        type?: Components['schemas']['BakingRightTypeParameter'] | null
        /** Filters rights by baker */
        baker?: Components['schemas']['AccountParameter'] | null
        /** Filters rights by cycle */
        cycle?: Components['schemas']['Int32Parameter'] | null
        /** Filters rights by level */
        level?: Components['schemas']['Int32Parameter'] | null
        /** Filters rights by slots */
        slots?: Components['schemas']['Int32NullParameter'] | null
        /** Filters rights by priority */
        priority?: Components['schemas']['Int32NullParameter'] | null
        /** Filters rights by status (`future`, `realized`, `uncovered`, `missed`) */
        status?: Components['schemas']['BakingRightStatusParameter'] | null
        /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. */
        select?: Components['schemas']['SelectParameter'] | null
        /** Sorts rights by specified field. Supported fields: `level` (default). */
        sort?: Components['schemas']['SortParameter'] | null
        /** Specifies which or how many items should be skipped */
        offset?: Components['schemas']['OffsetParameter'] | null
        /** Maximum number of items to return */
        limit?: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['BakingRight'][]
        }
      }
    }
  }
  /** Returns a list of baker software. */
  Software_Get: {
    parameters: {
      query: {
        /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. */
        select?: Components['schemas']['SelectParameter'] | null
        /** Sorts delegators by specified field. Supported fields: `id` (default), `firstLevel`, `lastLevel`, `blocksCount`. */
        sort?: Components['schemas']['SortParameter'] | null
        /** Specifies which or how many items should be skipped */
        offset?: Components['schemas']['OffsetParameter'] | null
        /** Maximum number of items to return */
        limit?: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['Software'][]
        }
      }
    }
  }
  /** Returns a number of software. */
  Software_GetCount: {
    responses: {
      200: {
        content: {
          'application/json': number
        }
      }
    }
  }
  /** Returns a list of end-of-block statistics. */
  Statistics_Get: {
    parameters: {
      query: {
        /** Filters statistics by level. */
        level?: Components['schemas']['Int32Parameter'] | null
        /** Filters statistics by timestamp. */
        timestamp?: Components['schemas']['TimestampParameter'] | null
        /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. */
        select?: Components['schemas']['SelectParameter'] | null
        /** Sorts delegators by specified field. Supported fields: `id` (default), `level`, `cycle`, `date`. */
        sort?: Components['schemas']['SortParameter'] | null
        /** Specifies which or how many items should be skipped */
        offset?: Components['schemas']['OffsetParameter'] | null
        /** Maximum number of items to return */
        limit?: number
        /** Comma-separated list of ticker symbols to inject historical prices into response */
        quote?: Components['schemas']['Symbols']
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['Statistics'][]
        }
      }
    }
  }
  /** Returns a list of end-of-day statistics. */
  Statistics_GetDaily: {
    parameters: {
      query: {
        /** Filters statistics by date. */
        date?: Components['schemas']['DateTimeParameter'] | null
        /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. */
        select?: Components['schemas']['SelectParameter'] | null
        /** Sorts delegators by specified field. Supported fields: `id` (default), `level`, `cycle`, `date`. */
        sort?: Components['schemas']['SortParameter'] | null
        /** Specifies which or how many items should be skipped */
        offset?: Components['schemas']['OffsetParameter'] | null
        /** Maximum number of items to return */
        limit?: number
        /** Comma-separated list of ticker symbols to inject historical prices into response */
        quote?: Components['schemas']['Symbols']
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['Statistics'][]
        }
      }
    }
  }
  /** Returns a list of end-of-cycle statistics. */
  Statistics_GetCyclesAll: {
    parameters: {
      query: {
        /** Filters statistics by cycle. */
        cycle?: Components['schemas']['Int32Parameter'] | null
        /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. */
        select?: Components['schemas']['SelectParameter'] | null
        /** Sorts delegators by specified field. Supported fields: `id` (default), `level`, `cycle`, `date`. */
        sort?: Components['schemas']['SortParameter'] | null
        /** Specifies which or how many items should be skipped */
        offset?: Components['schemas']['OffsetParameter'] | null
        /** Maximum number of items to return */
        limit?: number
        /** Comma-separated list of ticker symbols to inject historical prices into response */
        quote?: Components['schemas']['Symbols']
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['Statistics'][]
        }
      }
    }
  }
  /** Returns statistics at the end of a head block. */
  Statistics_GetCycles: {
    parameters: {
      query: {
        /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. */
        select?: Components['schemas']['SelectParameter'] | null
        /** Comma-separated list of ticker symbols to inject historical prices into response */
        quote?: Components['schemas']['Symbols']
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['Statistics']
        }
      }
    }
  }
  /** Returns a total number of tokens. */
  Tokens_GetTokensCount: {
    parameters: {
      query: {
        /**
         * Filter by internal TzKT id. Note, this is not the same as `tokenId` nat value.
         * Click on the parameter to expand more details.
         */
        id?: Components['schemas']['Int32Parameter'] | null
        /**
         * Filter by contract address.
         * Click on the parameter to expand more details.
         */
        contract?: Components['schemas']['AccountParameter'] | null
        /**
         * Filter by tokenId (for FA1.2 tokens tokenId is always `"0"`).
         * Click on the parameter to expand more details.
         */
        tokenId?: Components['schemas']['NatParameter'] | null
        /**
         * Filter by token standard (`fa1.2` or `fa2`).
         * Click on the parameter to expand more details.
         */
        standard?: Components['schemas']['TokenStandardParameter'] | null
        /**
         * Filter by level of the block where the token was first seen.
         * Click on the parameter to expand more details.
         */
        firstLevel?: Components['schemas']['Int32Parameter'] | null
        /**
         * Filter by timestamp (ISO 8601) of the block where the token was first seen.
         * Click on the parameter to expand more details.
         */
        firstTime?: Components['schemas']['TimestampParameter'] | null
        /**
         * Filter by level of the block where the token was last seen.
         * Click on the parameter to expand more details.
         */
        lastLevel?: Components['schemas']['Int32Parameter'] | null
        /**
         * Filter by timestamp (ISO 8601) of the block where the token was last seen.
         * Click on the parameter to expand more details.
         */
        lastTime?: Components['schemas']['TimestampParameter'] | null
        /**
         * Filter by metadata.
         * Note, this parameter supports the following format: `metadata{.path?}{.mode?}=...`,
         * so you can specify a path to a particular field to filter by (for example, `?metadata.symbol.in=kUSD,uUSD`).
         * Click on the parameter to expand more details.
         */
        metadata?: Components['schemas']['JsonParameter'] | null
      }
    }
    responses: {
      200: {
        content: {
          'application/json': number
        }
      }
    }
  }
  /** Returns a list of tokens. */
  Tokens_GetTokens: {
    parameters: {
      query: {
        /**
         * Filter by internal TzKT id. Note, this is not the same as `tokenId` nat value.
         * Click on the parameter to expand more details.
         */
        id?: Components['schemas']['Int32Parameter'] | null
        /**
         * Filter by contract address.
         * Click on the parameter to expand more details.
         */
        contract?: Components['schemas']['AccountParameter'] | null
        /**
         * Filter by tokenId (for FA1.2 tokens tokenId is always `"0"`).
         * Click on the parameter to expand more details.
         */
        tokenId?: Components['schemas']['NatParameter'] | null
        /**
         * Filter by token standard (`fa1.2` or `fa2`).
         * Click on the parameter to expand more details.
         */
        standard?: Components['schemas']['TokenStandardParameter'] | null
        /**
         * Filter by level of the block where the token was first seen.
         * Click on the parameter to expand more details.
         */
        firstLevel?: Components['schemas']['Int32Parameter'] | null
        /**
         * Filter by timestamp (ISO 8601) of the block where the token was first seen.
         * Click on the parameter to expand more details.
         */
        firstTime?: Components['schemas']['TimestampParameter'] | null
        /**
         * Filter by level of the block where the token was last seen.
         * Click on the parameter to expand more details.
         */
        lastLevel?: Components['schemas']['Int32Parameter'] | null
        /**
         * Filter by timestamp (ISO 8601) of the block where the token was last seen.
         * Click on the parameter to expand more details.
         */
        lastTime?: Components['schemas']['TimestampParameter'] | null
        /**
         * Filter by metadata.
         * Note, this parameter supports the following format: `metadata{.path?}{.mode?}=...`,
         * so you can specify a path to a particular field to filter by (for example, `?metadata.symbol.in=kUSD,uUSD`).
         * Click on the parameter to expand more details.
         */
        metadata?: Components['schemas']['JsonParameter'] | null
        /**
         * Sorts items (asc or desc) by the specified field.
         * You can see what fileds can be used for sorting in the response description, below.
         * Click on the parameter to expand more details.
         */
        sort?: Components['schemas']['SortParameter'] | null
        /**
         * Specifies which or how many items should be skipped.
         * Click on the parameter to expand more details.
         */
        offset?: Components['schemas']['OffsetParameter'] | null
        /** Maximum number of items to return. */
        limit?: number
        /**
         * Specify a comma-separated list of fields to include into response or leave it undefined to get default set of fields.
         * This parameter accepts values of the following format: `{field}{path?}{as alias?}`, so you can do deep selection
         * (for example, `?select=balance,token.metadata.symbol as token,...`).
         * Note, if you select just one field, the response will be flatten into a simple array of values.
         * Click on the parameter to expand the details.
         */
        select?: Components['schemas']['SelectionParameter'] | null
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['Token'][]
        }
      }
    }
  }
  /** Returns a total number of token balances. */
  Tokens_GetTokenBalancesCount: {
    parameters: {
      query: {
        /**
         * Filter by internal TzKT id.
         * Click on the parameter to expand more details.
         */
        id?: Components['schemas']['Int32Parameter'] | null
        /**
         * Filter by account address.
         * Click on the parameter to expand more details.
         */
        account?: Components['schemas']['AccountParameter'] | null
        /**
         * Filter by internal TzKT id. Note, this is not the same as `tokenId`.
         * Click on the parameter to expand more details.
         */
        'token.id'?: Components['schemas']['Int32Parameter'] | null
        /**
         * Filter by contract address.
         * Click on the parameter to expand more details.
         */
        'token.contract'?: Components['schemas']['AccountParameter'] | null
        /**
         * Filter by tokenId (for FA1.2 tokens tokenId is always `"0"`).
         * Click on the parameter to expand more details.
         */
        'token.tokenId'?: Components['schemas']['NatParameter'] | null
        /**
         * Filter by token standard (`fa1.2` or `fa2`).
         * Click on the parameter to expand more details.
         */
        'token.standard'?:
          | Components['schemas']['TokenStandardParameter']
          | null
        /**
         * Filter by metadata. Note, this parameter supports the following format: `token.metadata{.path?}{.mode?}=...`,
         * so you can specify a path to a particular field to filter by, for example: `?token.metadata.symbol.in=kUSD,uUSD`.
         * Click on the parameter to expand more details.
         */
        'token.metadata'?: Components['schemas']['JsonParameter'] | null
        'token.HasFilters'?: boolean
        /**
         * Filter by balance.
         * Click on the parameter to expand more details.
         */
        balance?: Components['schemas']['NatParameter'] | null
        /**
         * Filter by level of the block where the balance was first changed.
         * Click on the parameter to expand more details.
         */
        firstLevel?: Components['schemas']['Int32Parameter'] | null
        /**
         * Filter by timestamp (ISO 8601) of the block where the balance was first changed.
         * Click on the parameter to expand more details.
         */
        firstTime?: Components['schemas']['TimestampParameter'] | null
        /**
         * Filter by level of the block where the balance was last seen.
         * Click on the parameter to expand more details.
         */
        lastLevel?: Components['schemas']['Int32Parameter'] | null
        /**
         * Filter by timestamp (ISO 8601) of the block where the balance was last changed.
         * Click on the parameter to expand more details.
         */
        lastTime?: Components['schemas']['TimestampParameter'] | null
      }
    }
    responses: {
      200: {
        content: {
          'application/json': number
        }
      }
    }
  }
  /** Returns a list of token balances. */
  Tokens_GetTokenBalances: {
    parameters: {
      query: {
        /**
         * Filter by internal TzKT id.
         * Click on the parameter to expand more details.
         */
        id?: Components['schemas']['Int32Parameter'] | null
        /**
         * Filter by account address.
         * Click on the parameter to expand more details.
         */
        account?: Components['schemas']['AccountParameter'] | null
        /**
         * Filter by internal TzKT id. Note, this is not the same as `tokenId`.
         * Click on the parameter to expand more details.
         */
        'token.id'?: Components['schemas']['Int32Parameter'] | null
        /**
         * Filter by contract address.
         * Click on the parameter to expand more details.
         */
        'token.contract'?: Components['schemas']['AccountParameter'] | null
        /**
         * Filter by tokenId (for FA1.2 tokens tokenId is always `"0"`).
         * Click on the parameter to expand more details.
         */
        'token.tokenId'?: Components['schemas']['NatParameter'] | null
        /**
         * Filter by token standard (`fa1.2` or `fa2`).
         * Click on the parameter to expand more details.
         */
        'token.standard'?:
          | Components['schemas']['TokenStandardParameter']
          | null
        /**
         * Filter by metadata. Note, this parameter supports the following format: `token.metadata{.path?}{.mode?}=...`,
         * so you can specify a path to a particular field to filter by, for example: `?token.metadata.symbol.in=kUSD,uUSD`.
         * Click on the parameter to expand more details.
         */
        'token.metadata'?: Components['schemas']['JsonParameter'] | null
        'token.HasFilters'?: boolean
        /**
         * Filter by balance.
         * Click on the parameter to expand more details.
         */
        balance?: Components['schemas']['NatParameter'] | null
        /**
         * Filter by level of the block where the balance was first changed.
         * Click on the parameter to expand more details.
         */
        firstLevel?: Components['schemas']['Int32Parameter'] | null
        /**
         * Filter by timestamp (ISO 8601) of the block where the balance was first changed.
         * Click on the parameter to expand more details.
         */
        firstTime?: Components['schemas']['TimestampParameter'] | null
        /**
         * Filter by level of the block where the balance was last seen.
         * Click on the parameter to expand more details.
         */
        lastLevel?: Components['schemas']['Int32Parameter'] | null
        /**
         * Filter by timestamp (ISO 8601) of the block where the balance was last changed.
         * Click on the parameter to expand more details.
         */
        lastTime?: Components['schemas']['TimestampParameter'] | null
        /**
         * Sorts items (asc or desc) by the specified field.
         * You can see what fileds can be used for sorting in the response description, below.
         * Click on the parameter to expand more details.
         */
        sort?: Components['schemas']['SortParameter'] | null
        /**
         * Specifies which or how many items should be skipped.
         * Click on the parameter to expand more details.
         */
        offset?: Components['schemas']['OffsetParameter'] | null
        /** Maximum number of items to return. */
        limit?: number
        /**
         * Specify a comma-separated list of fields to include into response or leave it undefined to get default set of fields.
         * This parameter accepts values of the following format: `{field}{path?}{as alias?}`, so you can do deep selection
         * (for example, `?select=balance,token.metadata.symbol as token,...`).
         * Note, if you select just one field, the response will be flatten into a simple array of values.
         * Click on the parameter to expand the details.
         */
        select?: Components['schemas']['SelectionParameter'] | null
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['TokenBalance'][]
        }
      }
    }
  }
  /** Returns the total number of token transfers. */
  Tokens_GetTokenTransfersCount: {
    parameters: {
      query: {
        /**
         * Filter by internal TzKT id.
         * Click on the parameter to expand more details.
         */
        id?: Components['schemas']['Int32Parameter'] | null
        /**
         * Filter by level of the block where the transfer was made.
         * Click on the parameter to expand more details.
         */
        level?: Components['schemas']['Int32Parameter'] | null
        /**
         * Filter by timestamp (ISO 8601) of the block where the transfer was made.
         * Click on the parameter to expand more details.
         */
        timestamp?: Components['schemas']['TimestampParameter'] | null
        /**
         * Filter by internal TzKT id. Note, this is not the same as `tokenId`.
         * Click on the parameter to expand more details.
         */
        'token.id'?: Components['schemas']['Int32Parameter'] | null
        /**
         * Filter by contract address.
         * Click on the parameter to expand more details.
         */
        'token.contract'?: Components['schemas']['AccountParameter'] | null
        /**
         * Filter by tokenId (for FA1.2 tokens tokenId is always `"0"`).
         * Click on the parameter to expand more details.
         */
        'token.tokenId'?: Components['schemas']['NatParameter'] | null
        /**
         * Filter by token standard (`fa1.2` or `fa2`).
         * Click on the parameter to expand more details.
         */
        'token.standard'?:
          | Components['schemas']['TokenStandardParameter']
          | null
        /**
         * Filter by metadata. Note, this parameter supports the following format: `token.metadata{.path?}{.mode?}=...`,
         * so you can specify a path to a particular field to filter by, for example: `?token.metadata.symbol.in=kUSD,uUSD`.
         * Click on the parameter to expand more details.
         */
        'token.metadata'?: Components['schemas']['JsonParameter'] | null
        'token.HasFilters'?: boolean
        /**
         * Filter by any of the specified fields (`from` or `to`).
         * Example: `anyof.from.to=tz1...` will return transfers where `from` OR `to` is equal to the specified value.
         * This parameter is useful when you need to get both incoming and outgoing transfers of the account at once.
         * Click on the parameter to expand more details.
         */
        anyof?: string | null
        /**
         * Filter by sender account address.
         * Click on the parameter to expand more details.
         */
        from?: Components['schemas']['AccountParameter'] | null
        /**
         * Filter by target account address.
         * Click on the parameter to expand more details.
         */
        to?: Components['schemas']['AccountParameter'] | null
        /**
         * Filter by amount.
         * Click on the parameter to expand more details.
         */
        amount?: Components['schemas']['NatParameter'] | null
        /**
         * Filter by id of the transaction, caused the token transfer.
         * Click on the parameter to expand more details.
         */
        transactionId?: Components['schemas']['Int32NullParameter'] | null
        /**
         * Filter by id of the origination, caused the token transfer.
         * Click on the parameter to expand more details.
         */
        originationId?: Components['schemas']['Int32NullParameter'] | null
        /**
         * Filter by id of the migration, caused the token transfer.
         * Click on the parameter to expand more details.
         */
        migrationId?: Components['schemas']['Int32NullParameter'] | null
      }
    }
    responses: {
      200: {
        content: {
          'application/json': number
        }
      }
    }
  }
  /** Returns a list of token transfers. */
  Tokens_GetTokenTransfers: {
    parameters: {
      query: {
        /**
         * Filter by internal TzKT id.
         * Click on the parameter to expand more details.
         */
        id?: Components['schemas']['Int32Parameter'] | null
        /**
         * Filter by level of the block where the transfer was made.
         * Click on the parameter to expand more details.
         */
        level?: Components['schemas']['Int32Parameter'] | null
        /**
         * Filter by timestamp (ISO 8601) of the block where the transfer was made.
         * Click on the parameter to expand more details.
         */
        timestamp?: Components['schemas']['TimestampParameter'] | null
        /**
         * Filter by internal TzKT id. Note, this is not the same as `tokenId`.
         * Click on the parameter to expand more details.
         */
        'token.id'?: Components['schemas']['Int32Parameter'] | null
        /**
         * Filter by contract address.
         * Click on the parameter to expand more details.
         */
        'token.contract'?: Components['schemas']['AccountParameter'] | null
        /**
         * Filter by tokenId (for FA1.2 tokens tokenId is always `"0"`).
         * Click on the parameter to expand more details.
         */
        'token.tokenId'?: Components['schemas']['NatParameter'] | null
        /**
         * Filter by token standard (`fa1.2` or `fa2`).
         * Click on the parameter to expand more details.
         */
        'token.standard'?:
          | Components['schemas']['TokenStandardParameter']
          | null
        /**
         * Filter by metadata. Note, this parameter supports the following format: `token.metadata{.path?}{.mode?}=...`,
         * so you can specify a path to a particular field to filter by, for example: `?token.metadata.symbol.in=kUSD,uUSD`.
         * Click on the parameter to expand more details.
         */
        'token.metadata'?: Components['schemas']['JsonParameter'] | null
        'token.HasFilters'?: boolean
        /**
         * Filter by any of the specified fields (`from` or `to`).
         * Example: `anyof.from.to=tz1...` will return transfers where `from` OR `to` is equal to the specified value.
         * This parameter is useful when you need to get both incoming and outgoing transfers of the account at once.
         * Click on the parameter to expand more details.
         */
        anyof?: string | null
        /**
         * Filter by sender account address.
         * Click on the parameter to expand more details.
         */
        from?: Components['schemas']['AccountParameter'] | null
        /**
         * Filter by target account address.
         * Click on the parameter to expand more details.
         */
        to?: Components['schemas']['AccountParameter'] | null
        /**
         * Filter by amount.
         * Click on the parameter to expand more details.
         */
        amount?: Components['schemas']['NatParameter'] | null
        /**
         * Filter by id of the transaction, caused the token transfer.
         * Click on the parameter to expand more details.
         */
        transactionId?: Components['schemas']['Int32NullParameter'] | null
        /**
         * Filter by id of the origination, caused the token transfer.
         * Click on the parameter to expand more details.
         */
        originationId?: Components['schemas']['Int32NullParameter'] | null
        /**
         * Filter by id of the migration, caused the token transfer.
         * Click on the parameter to expand more details.
         */
        migrationId?: Components['schemas']['Int32NullParameter'] | null
        /**
         * Sorts items (asc or desc) by the specified field.
         * You can see what fileds can be used for sorting in the response description, below.
         * Click on the parameter to expand more details.
         */
        sort?: Components['schemas']['SortParameter'] | null
        /**
         * Specifies which or how many items should be skipped.
         * Click on the parameter to expand more details.
         */
        offset?: Components['schemas']['OffsetParameter'] | null
        /** Maximum number of items to return. */
        limit?: number
        /**
         * Specify a comma-separated list of fields to include into response or leave it undefined to get default set of fields.
         * This parameter accepts values of the following format: `{field}{path?}{as alias?}`, so you can do deep selection
         * (for example, `?select=balance,token.metadata.symbol as token,...`).
         * Note, if you select just one field, the response will be flatten into a simple array of values.
         * Click on the parameter to expand the details.
         */
        select?: Components['schemas']['SelectionParameter'] | null
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['TokenTransfer'][]
        }
      }
    }
  }
  /**
   * Returns a list of token balances at the end of the specified block.
   * Note, this endpoint is quite heavy, therefore at least one of the filters
   * (`account`, `token.id`, `token.contract` with `token.tokenId`) must be specified.
   */
  Tokens_GetTokenBalances2: {
    parameters: {
      path: {
        /** Level of the block at the end of which historical balances must be calculated */
        level: number
      }
      query: {
        /**
         * Filter by account address.
         * Click on the parameter to expand more details.
         */
        account?: Components['schemas']['AccountParameter'] | null
        /**
         * Filter by internal TzKT id. Note, this is not the same as `tokenId`.
         * Click on the parameter to expand more details.
         */
        'token.id'?: Components['schemas']['Int32Parameter'] | null
        /**
         * Filter by contract address.
         * Click on the parameter to expand more details.
         */
        'token.contract'?: Components['schemas']['AccountParameter'] | null
        /**
         * Filter by tokenId (for FA1.2 tokens tokenId is always `"0"`).
         * Click on the parameter to expand more details.
         */
        'token.tokenId'?: Components['schemas']['NatParameter'] | null
        /**
         * Filter by token standard (`fa1.2` or `fa2`).
         * Click on the parameter to expand more details.
         */
        'token.standard'?:
          | Components['schemas']['TokenStandardParameter']
          | null
        /**
         * Filter by metadata. Note, this parameter supports the following format: `token.metadata{.path?}{.mode?}=...`,
         * so you can specify a path to a particular field to filter by, for example: `?token.metadata.symbol.in=kUSD,uUSD`.
         * Click on the parameter to expand more details.
         */
        'token.metadata'?: Components['schemas']['JsonParameter'] | null
        'token.HasFilters'?: boolean
        /**
         * Filter by balance.
         * Click on the parameter to expand more details.
         */
        balance?: Components['schemas']['NatParameter'] | null
        /**
         * Sorts items (asc or desc) by the specified field.
         * You can see what fileds can be used for sorting in the response description, below.
         * Click on the parameter to expand more details.
         */
        sort?: Components['schemas']['SortParameter'] | null
        /**
         * Specifies which or how many items should be skipped.
         * Click on the parameter to expand more details.
         */
        offset?: Components['schemas']['OffsetParameter'] | null
        /** Maximum number of items to return. */
        limit?: number
        /**
         * Specify a comma-separated list of fields to include into response or leave it undefined to get default set of fields.
         * This parameter accepts values of the following format: `{field}{path?}{as alias?}`, so you can do deep selection
         * (for example, `?select=balance,token.metadata.symbol as token,...`).
         * Note, if you select just one field, the response will be flatten into a simple array of values.
         * Click on the parameter to expand the details.
         */
        select?: Components['schemas']['SelectionParameter'] | null
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['TokenBalanceShort'][]
        }
      }
    }
  }
  /** Returns the total number of protocol proposals. */
  Voting_GetProposalsCount: {
    responses: {
      200: {
        content: {
          'application/json': number
        }
      }
    }
  }
  /** Returns a list of protocol proposals. */
  Voting_GetProposals: {
    parameters: {
      query: {
        /** Filters proposals by hash */
        hash?: Components['schemas']['ProtocolParameter'] | null
        /** Filters proposals by voting epoch */
        epoch?: Components['schemas']['Int32Parameter'] | null
        /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. */
        select?: Components['schemas']['SelectParameter'] | null
        /** Sorts proposals by specified field. Supported fields: `id` (default), `upvotes`, `rolls`. */
        sort?: Components['schemas']['SortParameter'] | null
        /** Specifies which or how many items should be skipped */
        offset?: Components['schemas']['OffsetParameter'] | null
        /** Maximum number of items to return */
        limit?: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['Proposal'][]
        }
      }
    }
  }
  /** Returns the most recent protocol proposal with the specified hash. */
  Voting_GetProposalByHash: {
    parameters: {
      path: {
        /** Proposal hash */
        hash: string | null
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['Proposal']
        }
      }
    }
  }
  /** Returns a list of voting periods. */
  Voting_GetPeriods: {
    parameters: {
      query: {
        /** Specify comma-separated list of fields to include into response or leave it undefined to return full object. If you select single field, response will be an array of values in both `.fields` and `.values` modes. */
        select?: Components['schemas']['SelectParameter'] | null
        /** Sorts voting periods by specified field. Supported fields: `id` (default). */
        sort?: Components['schemas']['SortParameter'] | null
        /** Specifies which or how many items should be skipped */
        offset?: Components['schemas']['OffsetParameter'] | null
        /** Maximum number of items to return */
        limit?: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['VotingPeriod'][]
        }
      }
    }
  }
  /** Returns a voting period at the specified index. */
  Voting_GetPeriod: {
    parameters: {
      path: {
        /** Voting period index starting from zero */
        index: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['VotingPeriod']
        }
      }
    }
  }
  /** Returns current voting period. */
  Voting_GetCurrentPeriod: {
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['VotingPeriod']
        }
      }
    }
  }
  /** Returns voters from the voting period at the specified index. */
  Voting_GetPeriodVoters: {
    parameters: {
      path: {
        /** Voting period index starting from zero */
        index: number
      }
      query: {
        /** Filters voters by status (`none`, `upvoted`, `voted_yay`, `voted_nay`, `voted_pass`) */
        status?: Components['schemas']['VoterStatusParameter'] | null
        /** Sorts voters by specified field. Supported fields: `id` (default), `rolls`. */
        sort?: Components['schemas']['SortParameter'] | null
        /** Specifies which or how many items should be skipped */
        offset?: Components['schemas']['OffsetParameter'] | null
        /** Maximum number of items to return */
        limit?: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['VoterSnapshot'][]
        }
      }
    }
  }
  /** Returns a voter with the specified address from the voting period at the specified index. */
  Voting_GetPeriodVoter: {
    parameters: {
      path: {
        /** Voting period index starting from zero */
        index: number
        /** Voter address */
        address: string | null
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['VoterSnapshot']
        }
      }
    }
  }
  /** Returns voters from the current period. */
  Voting_GetPeriodVoters2: {
    parameters: {
      query: {
        /** Filters voters by status (`none`, `upvoted`, `voted_yay`, `voted_nay`, `voted_pass`) */
        status?: Components['schemas']['VoterStatusParameter'] | null
        /** Sorts voters by specified field. Supported fields: `id` (default), `rolls`. */
        sort?: Components['schemas']['SortParameter'] | null
        /** Specifies which or how many items should be skipped */
        offset?: Components['schemas']['OffsetParameter'] | null
        /** Maximum number of items to return */
        limit?: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['VoterSnapshot'][]
        }
      }
    }
  }
  /** Returns a voter with the specified address from the current period. */
  Voting_GetPeriodVoter2: {
    parameters: {
      path: {
        /** Voter address */
        address: string | null
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['VoterSnapshot']
        }
      }
    }
  }
  /** Returns a list of voting epochs. */
  Voting_GetEpochs: {
    parameters: {
      query: {
        /** Sorts voting epochs by specified field. Supported fields: `id` (default). */
        sort?: Components['schemas']['SortParameter'] | null
        /** Specifies which or how many items should be skipped */
        offset?: Components['schemas']['OffsetParameter'] | null
        /** Maximum number of items to return */
        limit?: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['VotingEpoch'][]
        }
      }
    }
  }
  /** Returns a voting epoch at the specified index. */
  Voting_GetEpoch: {
    parameters: {
      path: {
        /** Voting epoch index starting from zero */
        index: number
      }
    }
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['VotingEpoch']
        }
      }
    }
  }
  /** Returns the current voting epoch */
  Voting_GetCurrentEpoch: {
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['VotingEpoch']
        }
      }
    }
  }
  /** Returns the latest epoch with at least one proposal */
  Voting_GetLatestVoting: {
    responses: {
      200: {
        content: {
          'application/json': Components['schemas']['VotingEpoch']
        }
      }
    }
  }
}
